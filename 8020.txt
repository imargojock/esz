-- DROP SCHEMA esz;

CREATE SCHEMA esz AUTHORIZATION postgres;

-- DROP SEQUENCE esz.action_type_id_seq;

CREATE SEQUENCE esz.action_type_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.additional_agreement_id_seq;

CREATE SEQUENCE esz.additional_agreement_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.address_id_seq;

CREATE SEQUENCE esz.address_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.admission_plan_history_id_seq;

CREATE SEQUENCE esz.admission_plan_history_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.admission_plan_id_seq;

CREATE SEQUENCE esz.admission_plan_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.advertisement_id_seq;

CREATE SEQUENCE esz.advertisement_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.advertisement_state_id_seq;

CREATE SEQUENCE esz.advertisement_state_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.candidate_restriction_type_id_seq;

CREATE SEQUENCE esz.candidate_restriction_type_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.candidate_restrictions_id_seq;

CREATE SEQUENCE esz.candidate_restrictions_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.changelog_id_seq;

CREATE SEQUENCE esz.changelog_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.class_letter_id_seq;

CREATE SEQUENCE esz.class_letter_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.class_name_id_seq;

CREATE SEQUENCE esz.class_name_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.class_parallel_id_seq;

CREATE SEQUENCE esz.class_parallel_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.classificator_eku_edit_action_id_seq;

CREATE SEQUENCE esz.classificator_eku_edit_action_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.classificator_eku_edit_id_seq;

CREATE SEQUENCE esz.classificator_eku_edit_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.classificator_eku_id_seq;

CREATE SEQUENCE esz.classificator_eku_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.classificator_eku_limit_id_seq;

CREATE SEQUENCE esz.classificator_eku_limit_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.classificator_request_id_seq;

CREATE SEQUENCE esz.classificator_request_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.contingent_link_type_id_seq;

CREATE SEQUENCE esz.contingent_link_type_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.contract_decline_reason_id_seq;

CREATE SEQUENCE esz.contract_decline_reason_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.contract_id_seq;

CREATE SEQUENCE esz.contract_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.contract_status_id_seq;

CREATE SEQUENCE esz.contract_status_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.discipline_id_seq;

CREATE SEQUENCE esz.discipline_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.document_type_id_seq;

CREATE SEQUENCE esz.document_type_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.duration_of_training_unit_id_seq;

CREATE SEQUENCE esz.duration_of_training_unit_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.education_type_id_seq;

CREATE SEQUENCE esz.education_type_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.entity_type_id_seq;

CREATE SEQUENCE esz.entity_type_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.errors_id_seq;

CREATE SEQUENCE esz.errors_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.event_subscription_type_id_seq;

CREATE SEQUENCE esz.event_subscription_type_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.external_exchange_systems_id_seq;

CREATE SEQUENCE esz.external_exchange_systems_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.external_system_id_seq;

CREATE SEQUENCE esz.external_system_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.external_system_response_id_seq;

CREATE SEQUENCE esz.external_system_response_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.external_system_response_status_id_seq;

CREATE SEQUENCE esz.external_system_response_status_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.external_system_response_type_id_seq;

CREATE SEQUENCE esz.external_system_response_type_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.faq_id_seq;

CREATE SEQUENCE esz.faq_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.favorite_object_id_seq;

CREATE SEQUENCE esz.favorite_object_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.feedback_id_seq;

CREATE SEQUENCE esz.feedback_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.feedback_owner_type_id_seq;

CREATE SEQUENCE esz.feedback_owner_type_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.file_storage_id_seq;

CREATE SEQUENCE esz.file_storage_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.filter_id_seq;

CREATE SEQUENCE esz.filter_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.form_field_value_id_seq;

CREATE SEQUENCE esz.form_field_value_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.form_type_id_seq;

CREATE SEQUENCE esz.form_type_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.general_classificator_eku_id_seq;

CREATE SEQUENCE esz.general_classificator_eku_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.hashtag_id_seq;

CREATE SEQUENCE esz.hashtag_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.items_work_id_seq;

CREATE SEQUENCE esz.items_work_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.logging_id_seq;

CREATE SEQUENCE esz.logging_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.logging_type_id_seq;

CREATE SEQUENCE esz.logging_type_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.mega_relation_history_id_seq;

CREATE SEQUENCE esz.mega_relation_history_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.mega_relation_history_type_id_seq;

CREATE SEQUENCE esz.mega_relation_history_type_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.mega_relation_id_seq;

CREATE SEQUENCE esz.mega_relation_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.mega_relation_pupil_history_id_seq;

CREATE SEQUENCE esz.mega_relation_pupil_history_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.mega_relation_status_id_seq;

CREATE SEQUENCE esz.mega_relation_status_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.menu_settings_id_seq;

CREATE SEQUENCE esz.menu_settings_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.metro_line_id_seq;

CREATE SEQUENCE esz.metro_line_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.metro_station_id_seq;

CREATE SEQUENCE esz.metro_station_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.migration_data_id_seq;

CREATE SEQUENCE esz.migration_data_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.monitoring_mosru_id_seq;

CREATE SEQUENCE esz.monitoring_mosru_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.moscow_registration_id_seq;

CREATE SEQUENCE esz.moscow_registration_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.move_reason_id_seq;

CREATE SEQUENCE esz.move_reason_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.mrsd_id_seq;

CREATE SEQUENCE esz.mrsd_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.normative_document_id_seq;

CREATE SEQUENCE esz.normative_document_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.office_code_id_seq;

CREATE SEQUENCE esz.office_code_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.organization_building_resource_id_seq;

CREATE SEQUENCE esz.organization_building_resource_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.organization_class_parallel_rel_id_seq;

CREATE SEQUENCE esz.organization_class_parallel_rel_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.organization_history_copy_id_seq;

CREATE SEQUENCE esz.organization_history_copy_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.organization_history_id_seq;

CREATE SEQUENCE esz.organization_history_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.organization_id_seq;

CREATE SEQUENCE esz.organization_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.organization_legal_form_id_seq;

CREATE SEQUENCE esz.organization_legal_form_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.organization_move_history_id_seq;

CREATE SEQUENCE esz.organization_move_history_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.organization_program_id_seq;

CREATE SEQUENCE esz.organization_program_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.organization_resource_history_id_seq;

CREATE SEQUENCE esz.organization_resource_history_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.organization_resource_id_seq;

CREATE SEQUENCE esz.organization_resource_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.organization_type_financing_id_seq;

CREATE SEQUENCE esz.organization_type_financing_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.person_id_seq;

CREATE SEQUENCE esz.person_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.person_position_id_seq;

CREATE SEQUENCE esz.person_position_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.person_position_organization_rel_history_id_seq;

CREATE SEQUENCE esz.person_position_organization_rel_history_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.personal_address_history_id_seq;

CREATE SEQUENCE esz.personal_address_history_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.personal_address_id_seq;

CREATE SEQUENCE esz.personal_address_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.personal_request_data_id_seq;

CREATE SEQUENCE esz.personal_request_data_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.photo_id_seq;

CREATE SEQUENCE esz.photo_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.place_service_id_seq;

CREATE SEQUENCE esz.place_service_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.preliminary_request_id_seq;

CREATE SEQUENCE esz.preliminary_request_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.privilege_category_id_seq;

CREATE SEQUENCE esz.privilege_category_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.privilege_id_seq;

CREATE SEQUENCE esz.privilege_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.programm_level_id_seq;

CREATE SEQUENCE esz.programm_level_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.programm_module_id_seq;

CREATE SEQUENCE esz.programm_module_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.project_type_id_seq;

CREATE SEQUENCE esz.project_type_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.publication_status_id_seq;

CREATE SEQUENCE esz.publication_status_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.pupil_completion_document_id_seq;

CREATE SEQUENCE esz.pupil_completion_document_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.pupil_decline_reason_id_seq;

CREATE SEQUENCE esz.pupil_decline_reason_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.pupil_document_id_seq;

CREATE SEQUENCE esz.pupil_document_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.pupil_id_seq;

CREATE SEQUENCE esz.pupil_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.pupil_personal_rel_add_history_id_seq;

CREATE SEQUENCE esz.pupil_personal_rel_add_history_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.pupil_personal_rel_history_id_seq;

CREATE SEQUENCE esz.pupil_personal_rel_history_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.question_type_id_seq;

CREATE SEQUENCE esz.question_type_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.queue_id_seq;

CREATE SEQUENCE esz.queue_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.queue_type_id_seq;

CREATE SEQUENCE esz.queue_type_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.registry_office_id_seq;

CREATE SEQUENCE esz.registry_office_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.request_apply_reason_id_seq;

CREATE SEQUENCE esz.request_apply_reason_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.request_change_type_id_seq;

CREATE SEQUENCE esz.request_change_type_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.request_decline_reason_id_seq;

CREATE SEQUENCE esz.request_decline_reason_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.request_history_id_seq;

CREATE SEQUENCE esz.request_history_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.request_id_seq;

CREATE SEQUENCE esz.request_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.request_scan_document_id_seq;

CREATE SEQUENCE esz.request_scan_document_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.request_source_id_seq;

CREATE SEQUENCE esz.request_source_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.request_status_id_seq;

CREATE SEQUENCE esz.request_status_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.rtshed_document_type_id_seq;

CREATE SEQUENCE esz.rtshed_document_type_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.schedule_of_classes_id_seq;

CREATE SEQUENCE esz.schedule_of_classes_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.schedule_of_service_id_seq;

CREATE SEQUENCE esz.schedule_of_service_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.schedule_of_timetable_id_seq;

CREATE SEQUENCE esz.schedule_of_timetable_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.schedule_type_of_service_id_seq;

CREATE SEQUENCE esz.schedule_type_of_service_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.service_class_history_id_seq;

CREATE SEQUENCE esz.service_class_history_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.service_class_id_seq;

CREATE SEQUENCE esz.service_class_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.service_class_person_rel_id_seq;

CREATE SEQUENCE esz.service_class_person_rel_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.service_class_start_status_id_seq;

CREATE SEQUENCE esz.service_class_start_status_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.service_class_status_id_seq;

CREATE SEQUENCE esz.service_class_status_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.service_class_teacher_rel_id_seq;

CREATE SEQUENCE esz.service_class_teacher_rel_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.service_discipline_id_seq;

CREATE SEQUENCE esz.service_discipline_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.service_form_id_seq;

CREATE SEQUENCE esz.service_form_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.service_history_id_seq;

CREATE SEQUENCE esz.service_history_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.service_stage_id_seq;

CREATE SEQUENCE esz.service_stage_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.service_status_id_seq;

CREATE SEQUENCE esz.service_status_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.service_subclass_id_seq;

CREATE SEQUENCE esz.service_subclass_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.sex_id_seq;

CREATE SEQUENCE esz.sex_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.shedule_period_id_seq;

CREATE SEQUENCE esz.shedule_period_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.sign_id_seq;

CREATE SEQUENCE esz.sign_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.signing_type_id_seq;

CREATE SEQUENCE esz.signing_type_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.social_support_measure_id_seq;

CREATE SEQUENCE esz.social_support_measure_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.spell_dictionary_id_seq;

CREATE SEQUENCE esz.spell_dictionary_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.sphinx_migration_data_id_seq;

CREATE SEQUENCE esz.sphinx_migration_data_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.sphinx_ranker_id_seq;

CREATE SEQUENCE esz.sphinx_ranker_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.sphinx_ranker_weight_id_seq;

CREATE SEQUENCE esz.sphinx_ranker_weight_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.sport_objects_id_seq;

CREATE SEQUENCE esz.sport_objects_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.subscription_id_seq;

CREATE SEQUENCE esz.subscription_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.suspend_reason_id_seq;

CREATE SEQUENCE esz.suspend_reason_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.system_check_fix_id_seq;

CREATE SEQUENCE esz.system_check_fix_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.system_property_id_seq;

CREATE SEQUENCE esz.system_property_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.teacher_history_id_seq;

CREATE SEQUENCE esz.teacher_history_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.teacher_id_seq;

CREATE SEQUENCE esz.teacher_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.territory_entity_id_seq;

CREATE SEQUENCE esz.territory_entity_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.training_group_id_seq;

CREATE SEQUENCE esz.training_group_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.training_group_status_id_seq;

CREATE SEQUENCE esz.training_group_status_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.training_stage_id_seq;

CREATE SEQUENCE esz.training_stage_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.type_financing_id_seq;

CREATE SEQUENCE esz.type_financing_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.type_issue_place_id_seq;

CREATE SEQUENCE esz.type_issue_place_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.type_of_attendance_id_seq;

CREATE SEQUENCE esz.type_of_attendance_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.type_representation_id_seq;

CREATE SEQUENCE esz.type_representation_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.type_union_catalog_services_id_seq;

CREATE SEQUENCE esz.type_union_catalog_services_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.type_value_service_id_seq;

CREATE SEQUENCE esz.type_value_service_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.types_of_repetition_id_seq;

CREATE SEQUENCE esz.types_of_repetition_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.types_providing_services_id_seq;

CREATE SEQUENCE esz.types_providing_services_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.union_catalog_services_id_seq;

CREATE SEQUENCE esz.union_catalog_services_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.user_additional_parameters_id_seq;

CREATE SEQUENCE esz.user_additional_parameters_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.user_manual_id_seq;

CREATE SEQUENCE esz.user_manual_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.validation_state_id_seq;

CREATE SEQUENCE esz.validation_state_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.vedomstvo_founder_id_seq;

CREATE SEQUENCE esz.vedomstvo_founder_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.vedomstvo_id_seq;

CREATE SEQUENCE esz.vedomstvo_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.work_schedule_id_seq;

CREATE SEQUENCE esz.work_schedule_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE esz.year_of_training_id_seq;

CREATE SEQUENCE esz.year_of_training_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;-- esz.action_type definition

-- Drop table

-- DROP TABLE esz.action_type;

CREATE TABLE esz.action_type (
	id serial4 NOT NULL, -- Уникальный идентификатор записи в БД
	action_type_name varchar(200) NULL, -- Название типа события
	action_type_description varchar(200) NULL, -- Описание типа события
	is_archive bool DEFAULT false NOT NULL, -- Признак архивной записи
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата обновления записи
	CONSTRAINT action_type_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.action_type IS 'Типы событий';

-- Column comments

COMMENT ON COLUMN esz.action_type.id IS 'Уникальный идентификатор записи в БД';
COMMENT ON COLUMN esz.action_type.action_type_name IS 'Название типа события';
COMMENT ON COLUMN esz.action_type.action_type_description IS 'Описание типа события';
COMMENT ON COLUMN esz.action_type.is_archive IS 'Признак архивной записи';
COMMENT ON COLUMN esz.action_type.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.action_type.date_change IS 'Дата обновления записи';


-- esz.admission_plan_history definition

-- Drop table

-- DROP TABLE esz.admission_plan_history;

CREATE TABLE esz.admission_plan_history (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	organization_id int4 NULL, -- Уникальный идентификатор
	admission_plan_id int4 NULL, -- Уникальный идентификатор
	old_organization_id int4 NOT NULL, -- Уникальный идентификатор переносимой организации
	"date" timestamp(0) NOT NULL, -- Дата события
	CONSTRAINT admission_plan_history_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.admission_plan_history IS 'История AdmissionPlan';

-- Column comments

COMMENT ON COLUMN esz.admission_plan_history.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.admission_plan_history.organization_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.admission_plan_history.admission_plan_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.admission_plan_history.old_organization_id IS 'Уникальный идентификатор переносимой организации';
COMMENT ON COLUMN esz.admission_plan_history."date" IS 'Дата события';


-- esz.advertisement_state definition

-- Drop table

-- DROP TABLE esz.advertisement_state;

CREATE TABLE esz.advertisement_state (
	id serial4 NOT NULL, -- Идентификатор записи
	advertisement_id int4 NULL, -- Идентификатор объявления
	user_id int4 NULL, -- Идентификатор пользователя, прочитавшего уведомление
	date_create timestamp(0) NULL, -- Дата создания записи
	CONSTRAINT advertisement_state_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.advertisement_state IS 'факты прочтения объявлений на главной странице';

-- Column comments

COMMENT ON COLUMN esz.advertisement_state.id IS 'Идентификатор записи';
COMMENT ON COLUMN esz.advertisement_state.advertisement_id IS 'Идентификатор объявления';
COMMENT ON COLUMN esz.advertisement_state.user_id IS 'Идентификатор пользователя, прочитавшего уведомление';
COMMENT ON COLUMN esz.advertisement_state.date_create IS 'Дата создания записи';


-- esz.cancel_request_history definition

-- Drop table

-- DROP TABLE esz.cancel_request_history;

CREATE TABLE esz.cancel_request_history (
	session_id uuid DEFAULT gen_random_uuid() NOT NULL, -- Идентификатор сессии
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	request_id int4 NOT NULL, -- Идентификатор заявления
	request_status_id int4 NOT NULL, -- Предыдущий статус заявления
	request_decline_reason_id int4 NULL, -- Предыдущий статус отказа
	enrollment_decline_comment text NULL, -- Предыдущий комментарий к отказу в зачислении
	booking_guid uuid NULL -- Идентификатор бронирования
);
CREATE INDEX idx_cancel_request_history_session_id ON esz.cancel_request_history USING btree (session_id);
COMMENT ON TABLE esz.cancel_request_history IS 'История по заявлениям';

-- Column comments

COMMENT ON COLUMN esz.cancel_request_history.session_id IS 'Идентификатор сессии';
COMMENT ON COLUMN esz.cancel_request_history.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.cancel_request_history.request_id IS 'Идентификатор заявления';
COMMENT ON COLUMN esz.cancel_request_history.request_status_id IS 'Предыдущий статус заявления';
COMMENT ON COLUMN esz.cancel_request_history.request_decline_reason_id IS 'Предыдущий статус отказа';
COMMENT ON COLUMN esz.cancel_request_history.enrollment_decline_comment IS 'Предыдущий комментарий к отказу в зачислении';
COMMENT ON COLUMN esz.cancel_request_history.booking_guid IS 'Идентификатор бронирования';


-- esz.cancel_service_history definition

-- Drop table

-- DROP TABLE esz.cancel_service_history;

CREATE TABLE esz.cancel_service_history (
	session_id uuid DEFAULT gen_random_uuid() NOT NULL, -- Идентификатор сессии
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	union_catalog_services_id int4 NOT NULL, -- Идентификатор услуги, снимаемой с публикации
	service_status_id int4 NOT NULL -- Предыдущий статус услуги
);
CREATE INDEX idx_cancel_service_history_session_id ON esz.cancel_service_history USING btree (session_id);
COMMENT ON TABLE esz.cancel_service_history IS 'История по услугам';

-- Column comments

COMMENT ON COLUMN esz.cancel_service_history.session_id IS 'Идентификатор сессии';
COMMENT ON COLUMN esz.cancel_service_history.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.cancel_service_history.union_catalog_services_id IS 'Идентификатор услуги, снимаемой с публикации';
COMMENT ON COLUMN esz.cancel_service_history.service_status_id IS 'Предыдущий статус услуги';


-- esz.candidate_restrictions definition

-- Drop table

-- DROP TABLE esz.candidate_restrictions;

CREATE TABLE esz.candidate_restrictions (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(500) NULL, -- Наименование
	code varchar(50) NULL, -- Код
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT candidate_restrictions_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.candidate_restrictions IS 'Ограничения при приеме (Не доступно для лиц с ограниченными ';

-- Column comments

COMMENT ON COLUMN esz.candidate_restrictions.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.candidate_restrictions."name" IS 'Наименование';
COMMENT ON COLUMN esz.candidate_restrictions.code IS 'Код';
COMMENT ON COLUMN esz.candidate_restrictions.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.candidate_restrictions.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.candidate_restrictions.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.candidate_restrictions.is_archive IS 'Признак архивности';


-- esz.changelog definition

-- Drop table

-- DROP TABLE esz.changelog;

CREATE TABLE esz.changelog (
	id serial4 NOT NULL, -- Первичный ключ
	release_version varchar(30) NULL, -- Номер версии
	release_date timestamp(0) DEFAULT now() NOT NULL, -- Дата выхода
	description text NULL, -- Текст описания
	is_archive bool NOT NULL, -- Признак архивности
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения
	CONSTRAINT changelog_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.changelog IS 'История изменений';

-- Column comments

COMMENT ON COLUMN esz.changelog.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.changelog.release_version IS 'Номер версии';
COMMENT ON COLUMN esz.changelog.release_date IS 'Дата выхода';
COMMENT ON COLUMN esz.changelog.description IS 'Текст описания';
COMMENT ON COLUMN esz.changelog.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.changelog.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.changelog.date_change IS 'Дата последнего изменения';

-- Table Triggers

create trigger t_changelog before
update
    on
    esz.changelog for each row execute function esz.insert_current_timestamp();


-- esz.classificator_request definition

-- Drop table

-- DROP TABLE esz.classificator_request;

CREATE TABLE esz.classificator_request (
	id serial4 NOT NULL, -- Идентификатор
	vedomstvo_id int4 NULL, -- Уникальный идентификатор
	extend_entity_id int4 NULL, -- Уникальный идентификатор
	general_classificator_eku_id int4 NULL, -- Уникальный идентификатор
	classificator_eku_id int4 NULL, -- Уникальный идентификатор
	organization_id int4 NULL, -- Уникальный идентификатор
	user_id int4 NULL, -- Уникальный идентификатор
	request_change_type_id int4 NULL, -- Идентификатор запроса на изменение
	"number" varchar(50) NULL, -- Номер
	request_date timestamp(0) NULL, -- Дата заявки
	set_code varchar(100) NULL, -- Присвоить код
	set_name varchar(500) NULL, -- Присвоить наименование
	set_description varchar(2000) NULL, -- Присвоить описание
	set_mvk int4 NULL, -- Присвоить МВК
	reason text NULL, -- Причина изменений
	accept_date timestamp(0) NULL, -- Дата согласования
	is_accepted bool NULL, -- Согласовано
	decline_reason text NULL, -- Причина отмены
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT classificator_request_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.classificator_request IS 'Заявки на внесение изменений в МВК или РБНДО';

-- Column comments

COMMENT ON COLUMN esz.classificator_request.id IS 'Идентификатор';
COMMENT ON COLUMN esz.classificator_request.vedomstvo_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.classificator_request.extend_entity_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.classificator_request.general_classificator_eku_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.classificator_request.classificator_eku_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.classificator_request.organization_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.classificator_request.user_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.classificator_request.request_change_type_id IS 'Идентификатор запроса на изменение';
COMMENT ON COLUMN esz.classificator_request."number" IS 'Номер';
COMMENT ON COLUMN esz.classificator_request.request_date IS 'Дата заявки';
COMMENT ON COLUMN esz.classificator_request.set_code IS 'Присвоить код';
COMMENT ON COLUMN esz.classificator_request.set_name IS 'Присвоить наименование';
COMMENT ON COLUMN esz.classificator_request.set_description IS 'Присвоить описание';
COMMENT ON COLUMN esz.classificator_request.set_mvk IS 'Присвоить МВК';
COMMENT ON COLUMN esz.classificator_request.reason IS 'Причина изменений';
COMMENT ON COLUMN esz.classificator_request.accept_date IS 'Дата согласования';
COMMENT ON COLUMN esz.classificator_request.is_accepted IS 'Согласовано';
COMMENT ON COLUMN esz.classificator_request.decline_reason IS 'Причина отмены';
COMMENT ON COLUMN esz.classificator_request.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.classificator_request.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.classificator_request.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.classificator_request.is_archive IS 'Признак архивности';


-- esz.contingent_link_type definition

-- Drop table

-- DROP TABLE esz.contingent_link_type;

CREATE TABLE esz.contingent_link_type (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(200) NULL, -- Наименование
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT contingent_link_type_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.contingent_link_type IS 'Справочник решений по результату связки с Реестром континген';

-- Column comments

COMMENT ON COLUMN esz.contingent_link_type.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.contingent_link_type."name" IS 'Наименование';
COMMENT ON COLUMN esz.contingent_link_type.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.contingent_link_type.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.contingent_link_type.is_archive IS 'Признак архивности';


-- esz.contract_decline_reason definition

-- Drop table

-- DROP TABLE esz.contract_decline_reason;

CREATE TABLE esz.contract_decline_reason (
	id serial4 NOT NULL, -- Первичный ключ
	decline_reason_name varchar(100) NULL, -- Наименование причины отказа по договору
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT contract_decline_reason_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.contract_decline_reason IS 'Причины отклонения договоров';

-- Column comments

COMMENT ON COLUMN esz.contract_decline_reason.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.contract_decline_reason.decline_reason_name IS 'Наименование причины отказа по договору';
COMMENT ON COLUMN esz.contract_decline_reason.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.contract_decline_reason.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.contract_decline_reason.is_archive IS 'Признак архивности';

-- Table Triggers

create trigger t_contract_decline_reason before
update
    on
    esz.contract_decline_reason for each row execute function esz.insert_current_timestamp();


-- esz.contract_status definition

-- Drop table

-- DROP TABLE esz.contract_status;

CREATE TABLE esz.contract_status (
	id serial4 NOT NULL, -- Первичный ключ
	contract_status_name varchar(100) NULL, -- Наименование статуса договора
	description varchar(50) NULL, -- Код статуса договора
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT contract_status_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.contract_status IS 'Статус договора в заявлении';

-- Column comments

COMMENT ON COLUMN esz.contract_status.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.contract_status.contract_status_name IS 'Наименование статуса договора';
COMMENT ON COLUMN esz.contract_status.description IS 'Код статуса договора';
COMMENT ON COLUMN esz.contract_status.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.contract_status.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.contract_status.is_archive IS 'Признак архивности';

-- Table Triggers

create trigger t_contract_status before
update
    on
    esz.contract_status for each row execute function esz.insert_current_timestamp();


-- esz.databasechangelog definition

-- Drop table

-- DROP TABLE esz.databasechangelog;

CREATE TABLE esz.databasechangelog (
	id varchar(255) NOT NULL,
	author varchar(255) NOT NULL,
	filename varchar(255) NOT NULL,
	dateexecuted timestamp NOT NULL,
	orderexecuted int4 NOT NULL,
	exectype varchar(10) NOT NULL,
	md5sum varchar(35) NULL,
	description varchar(255) NULL,
	"comments" varchar(255) NULL,
	tag varchar(255) NULL,
	liquibase varchar(20) NULL,
	contexts varchar(255) NULL,
	labels varchar(255) NULL,
	deployment_id varchar(10) NULL
);


-- esz.databasechangeloglock definition

-- Drop table

-- DROP TABLE esz.databasechangeloglock;

CREATE TABLE esz.databasechangeloglock (
	id int4 NOT NULL,
	"locked" bool NOT NULL,
	lockgranted timestamp NULL,
	lockedby varchar(255) NULL,
	CONSTRAINT databasechangeloglock_pkey PRIMARY KEY (id)
);


-- esz.division_rbndo_rel definition

-- Drop table

-- DROP TABLE esz.division_rbndo_rel;

CREATE TABLE esz.division_rbndo_rel (
	classificator_eku_id int4 NOT NULL, -- Уникальный идентификатор
	division_id int4 NOT NULL, -- Идентификатор подразделения
	CONSTRAINT division_rbndo_rel_pkey PRIMARY KEY (classificator_eku_id, division_id)
);
COMMENT ON TABLE esz.division_rbndo_rel IS 'Связь с РБНДО';

-- Column comments

COMMENT ON COLUMN esz.division_rbndo_rel.classificator_eku_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.division_rbndo_rel.division_id IS 'Идентификатор подразделения';


-- esz.duration_of_training_unit definition

-- Drop table

-- DROP TABLE esz.duration_of_training_unit;

CREATE TABLE esz.duration_of_training_unit (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(500) NULL, -- Наименование
	code varchar(50) NULL, -- Код
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT duration_of_training_unit_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.duration_of_training_unit IS 'Справочник едениц продолжительности программы обучения';

-- Column comments

COMMENT ON COLUMN esz.duration_of_training_unit.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.duration_of_training_unit."name" IS 'Наименование';
COMMENT ON COLUMN esz.duration_of_training_unit.code IS 'Код';
COMMENT ON COLUMN esz.duration_of_training_unit.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.duration_of_training_unit.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.duration_of_training_unit.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.duration_of_training_unit.is_archive IS 'Признак архивности';


-- esz.entity_type definition

-- Drop table

-- DROP TABLE esz.entity_type;

CREATE TABLE esz.entity_type (
	id serial4 NOT NULL, -- Идентификатор записи в таблице
	"name" varchar(50) NULL, -- Имя типа объекта
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи в таблице
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT entity_type_pkey PRIMARY KEY (id)
);
CREATE INDEX fts_entity_type_name ON esz.entity_type USING gin (to_tsvector('russian'::regconfig, (name)::text));
COMMENT ON TABLE esz.entity_type IS 'Справочник по типам основных сущностей системы';

-- Column comments

COMMENT ON COLUMN esz.entity_type.id IS 'Идентификатор записи в таблице';
COMMENT ON COLUMN esz.entity_type."name" IS 'Имя типа объекта';
COMMENT ON COLUMN esz.entity_type.date_create IS 'Дата создания записи в таблице';
COMMENT ON COLUMN esz.entity_type.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.entity_type.is_archive IS 'Признак архивности';


-- esz.event_subscription_type definition

-- Drop table

-- DROP TABLE esz.event_subscription_type;

CREATE TABLE esz.event_subscription_type (
	id serial4 NOT NULL, -- Первичный ключ
	"name" varchar(800) NULL, -- Название типа
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT event_subscription_type_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.event_subscription_type IS 'Справочник событий для подписки';

-- Column comments

COMMENT ON COLUMN esz.event_subscription_type.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.event_subscription_type."name" IS 'Название типа';
COMMENT ON COLUMN esz.event_subscription_type.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.event_subscription_type.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.event_subscription_type.is_archive IS 'Признак архивности';

-- Table Triggers

create trigger t_event_subscription_type before
update
    on
    esz.event_subscription_type for each row execute function esz.insert_current_timestamp();


-- esz.extend_entity definition

-- Drop table

-- DROP TABLE esz.extend_entity;

CREATE TABLE esz.extend_entity (
	id int4 NOT NULL, -- Уникальный идентификатор
	CONSTRAINT extend_entity_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.extend_entity IS 'Расширение объекта';

-- Column comments

COMMENT ON COLUMN esz.extend_entity.id IS 'Уникальный идентификатор';


-- esz.external_exchange_systems definition

-- Drop table

-- DROP TABLE esz.external_exchange_systems;

CREATE TABLE esz.external_exchange_systems (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(255) NOT NULL, -- Название системы
	description varchar(255) NULL, -- Описание
	url varchar(255) NOT NULL, -- Адрес системы
	type_interaction int4 NOT NULL, -- Тип взаимодействия
	date_create timestamp(0) NOT NULL, -- Дата создания записи
	date_change timestamp(0) DEFAULT now() NOT NULL, -- Дата изменения записи
	CONSTRAINT external_exchange_systems_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.external_exchange_systems IS 'Внешние системы для обмена данными';

-- Column comments

COMMENT ON COLUMN esz.external_exchange_systems.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.external_exchange_systems."name" IS 'Название системы';
COMMENT ON COLUMN esz.external_exchange_systems.description IS 'Описание';
COMMENT ON COLUMN esz.external_exchange_systems.url IS 'Адрес системы';
COMMENT ON COLUMN esz.external_exchange_systems.type_interaction IS 'Тип взаимодействия';
COMMENT ON COLUMN esz.external_exchange_systems.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.external_exchange_systems.date_change IS 'Дата изменения записи';


-- esz.external_system definition

-- Drop table

-- DROP TABLE esz.external_system;

CREATE TABLE esz.external_system (
	id serial4 NOT NULL, -- Первичный ключ
	"name" varchar(255) NULL, -- Название внешней системы
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT external_system_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.external_system IS 'Внешняя система';

-- Column comments

COMMENT ON COLUMN esz.external_system.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.external_system."name" IS 'Название внешней системы';
COMMENT ON COLUMN esz.external_system.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.external_system.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.external_system.is_archive IS 'Признак архивности';

-- Table Triggers

create trigger t_external_system before
update
    on
    esz.external_system for each row execute function esz.insert_current_timestamp();


-- esz.feedback_owner_type definition

-- Drop table

-- DROP TABLE esz.feedback_owner_type;

CREATE TABLE esz.feedback_owner_type (
	id serial4 NOT NULL, -- Первичный ключ
	"name" varchar(100) NOT NULL, -- Название типа пользователя, оставляющего отзыв
	CONSTRAINT feedback_owner_type_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.feedback_owner_type IS 'Справочник типов пользователей, оставляющих отзывы на услуги';

-- Column comments

COMMENT ON COLUMN esz.feedback_owner_type.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.feedback_owner_type."name" IS 'Название типа пользователя, оставляющего отзыв';


-- esz.file_storage definition

-- Drop table

-- DROP TABLE esz.file_storage;

CREATE TABLE esz.file_storage (
	id serial4 NOT NULL, -- Уникальный идентификатор
	file_name varchar(1000) NULL, -- Имя файла
	"content" varchar(1000) NULL, -- Тип содержимого
	url varchar(1000) NOT NULL, -- Адрес для получения содержимого файла
	date_create timestamp(0) NULL, -- Дата создания
	CONSTRAINT file_storage_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.file_storage IS 'Файлы для хранения';

-- Column comments

COMMENT ON COLUMN esz.file_storage.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.file_storage.file_name IS 'Имя файла';
COMMENT ON COLUMN esz.file_storage."content" IS 'Тип содержимого';
COMMENT ON COLUMN esz.file_storage.url IS 'Адрес для получения содержимого файла';
COMMENT ON COLUMN esz.file_storage.date_create IS 'Дата создания';


-- esz."filter" definition

-- Drop table

-- DROP TABLE esz."filter";

CREATE TABLE esz."filter" (
	id serial4 NOT NULL, -- Первичный ключ
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	extend_entity_guid uuid NULL, -- Уникальный идентификатор сущности
	CONSTRAINT filter_pkey PRIMARY KEY (id)
);
CREATE INDEX ind_filter_extend_entity_guid ON esz.filter USING btree (extend_entity_guid);
COMMENT ON TABLE esz."filter" IS 'Таблица для связи объявления с настройками доступа в разрезе департаментов, организаций, ролей, прав пользователей';

-- Column comments

COMMENT ON COLUMN esz."filter".id IS 'Первичный ключ';
COMMENT ON COLUMN esz."filter".date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz."filter".date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz."filter".is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz."filter".extend_entity_guid IS 'Уникальный идентификатор сущности';

-- Table Triggers

create trigger t_filter before
update
    on
    esz.filter for each row execute function esz.insert_current_timestamp();


-- esz.form_field_value definition

-- Drop table

-- DROP TABLE esz.form_field_value;

CREATE TABLE esz.form_field_value (
	id serial4 NOT NULL, -- Первичный ключ
	form_id int4 NOT NULL, -- Идентификатор формы
	dictionary_id int4 NOT NULL, -- Идентификатор справочника
	field_value_id int4 NOT NULL, -- Идентификатор поля формы
	CONSTRAINT form_field_value_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.form_field_value IS 'Номер поля на форме';

-- Column comments

COMMENT ON COLUMN esz.form_field_value.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.form_field_value.form_id IS 'Идентификатор формы';
COMMENT ON COLUMN esz.form_field_value.dictionary_id IS 'Идентификатор справочника';
COMMENT ON COLUMN esz.form_field_value.field_value_id IS 'Идентификатор поля формы';


-- esz.form_type definition

-- Drop table

-- DROP TABLE esz.form_type;

CREATE TABLE esz.form_type (
	id serial4 NOT NULL, -- Первичный ключ
	"name" varchar(1000) NOT NULL, -- Уникальное имя формы
	description varchar(2000) NULL, -- Описание
	CONSTRAINT form_type_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.form_type IS 'Тип формы';

-- Column comments

COMMENT ON COLUMN esz.form_type.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.form_type."name" IS 'Уникальное имя формы';
COMMENT ON COLUMN esz.form_type.description IS 'Описание';


-- esz.hashtag definition

-- Drop table

-- DROP TABLE esz.hashtag;

CREATE TABLE esz.hashtag (
	id serial4 NOT NULL, -- Первичный ключ
	"name" varchar(500) NOT NULL, -- Наименование хештега
	is_manual bool DEFAULT false NOT NULL, -- Признак ручного ввода оператором
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения
	CONSTRAINT hashtag_name_key UNIQUE (name),
	CONSTRAINT hashtag_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.hashtag IS 'Хештеги детских объединений';

-- Column comments

COMMENT ON COLUMN esz.hashtag.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.hashtag."name" IS 'Наименование хештега';
COMMENT ON COLUMN esz.hashtag.is_manual IS 'Признак ручного ввода оператором';
COMMENT ON COLUMN esz.hashtag.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.hashtag.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.hashtag.date_change IS 'Дата последнего изменения';


-- esz.hashtag_classificator_eku_rel definition

-- Drop table

-- DROP TABLE esz.hashtag_classificator_eku_rel;

CREATE TABLE esz.hashtag_classificator_eku_rel (
	hashtag_id int4 NOT NULL, -- Ссылка на идентификатор хештега
	classificator_eku_id int4 NOT NULL, -- Ссылка на идентификатор вида деятельности
	is_main bool DEFAULT false NOT NULL, -- Признак основного хештега вида деятельности
	CONSTRAINT hashtag_classificator_eku_rel_pkey PRIMARY KEY (hashtag_id, classificator_eku_id)
);
COMMENT ON TABLE esz.hashtag_classificator_eku_rel IS 'Связь видов деятельности РБНДО с хештегами';

-- Column comments

COMMENT ON COLUMN esz.hashtag_classificator_eku_rel.hashtag_id IS 'Ссылка на идентификатор хештега';
COMMENT ON COLUMN esz.hashtag_classificator_eku_rel.classificator_eku_id IS 'Ссылка на идентификатор вида деятельности';
COMMENT ON COLUMN esz.hashtag_classificator_eku_rel.is_main IS 'Признак основного хештега вида деятельности';


-- esz.mega_relation definition

-- Drop table

-- DROP TABLE esz.mega_relation;

CREATE TABLE esz.mega_relation (
	id serial4 NOT NULL, -- Идентификатор
	service_stage_id int4 NULL, -- Идентификатор
	service_class_id int4 NULL, -- Идентификатор
	mega_relation_status_id int4 NULL, -- Уникальный идентификатор статуса связи
	pupil_id int4 NULL, -- Идентификатор
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	organization_id int4 NULL, -- Уникальный идентификатор организации
	request_id int4 NULL, -- Уникальный идентификатор заявления
	union_catalog_services_id int4 NULL, -- Уникальный идентификатор услуги
	description varchar(500) NULL, -- Описание
	is_repeat bool NULL, -- Признак повторения
	date_start timestamp(0) NULL, -- Дата начала
	date_end timestamp(0) NULL, -- Дата окончания
	external_uid varchar(50) NULL, -- Внешний идентификатор
	move_reason_id int4 NULL, -- Уникальный идентификатор причины переноса
	prev_mega_relation_id int4 NULL, -- Уникальный идентификатор предыдущей записи
	next_mega_relation_id int4 NULL, -- Уникальный идентификатор следующей записи
	date_learn_start timestamp(0) NULL, -- Дата начала обучения
	date_learn_end timestamp(0) NULL, -- Дата окончания обучения
	external_system_id int4 NULL, -- Ссылка на внешнюю систему
	extend_entity_guid uuid DEFAULT gen_random_uuid() NOT NULL, -- Уникальный идентификатор сущности
	is_send_to_mk bool DEFAULT false NOT NULL, -- Отметка, что запись отправлена в МЭШ.Контингент
	CONSTRAINT mega_relation_pkey PRIMARY KEY (id)
);
CREATE INDEX ind_mega_relation_organization_id_external_system ON esz.mega_relation USING btree (organization_id);
CREATE INDEX ind_mega_relation_request ON esz.mega_relation USING btree (request_id);
CREATE INDEX ind_mega_relation_service_class_id_mega_relation_status_id ON esz.mega_relation USING btree (service_class_id, mega_relation_status_id);
CREATE INDEX ind_mega_relation_union_catalog_services_id_mega_relation_statu ON esz.mega_relation USING btree (union_catalog_services_id, mega_relation_status_id);
CREATE INDEX ind_mr_mega_rel_status ON esz.mega_relation USING btree (mega_relation_status_id);
CREATE INDEX ind_pupil_search ON esz.mega_relation USING btree (pupil_id, organization_id);
COMMENT ON TABLE esz.mega_relation IS 'Связь';

-- Column comments

COMMENT ON COLUMN esz.mega_relation.id IS 'Идентификатор';
COMMENT ON COLUMN esz.mega_relation.service_stage_id IS 'Идентификатор';
COMMENT ON COLUMN esz.mega_relation.service_class_id IS 'Идентификатор';
COMMENT ON COLUMN esz.mega_relation.mega_relation_status_id IS 'Уникальный идентификатор статуса связи';
COMMENT ON COLUMN esz.mega_relation.pupil_id IS 'Идентификатор';
COMMENT ON COLUMN esz.mega_relation.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.mega_relation.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.mega_relation.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.mega_relation.organization_id IS 'Уникальный идентификатор организации';
COMMENT ON COLUMN esz.mega_relation.request_id IS 'Уникальный идентификатор заявления';
COMMENT ON COLUMN esz.mega_relation.union_catalog_services_id IS 'Уникальный идентификатор услуги';
COMMENT ON COLUMN esz.mega_relation.description IS 'Описание';
COMMENT ON COLUMN esz.mega_relation.is_repeat IS 'Признак повторения';
COMMENT ON COLUMN esz.mega_relation.date_start IS 'Дата начала';
COMMENT ON COLUMN esz.mega_relation.date_end IS 'Дата окончания';
COMMENT ON COLUMN esz.mega_relation.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.mega_relation.move_reason_id IS 'Уникальный идентификатор причины переноса';
COMMENT ON COLUMN esz.mega_relation.prev_mega_relation_id IS 'Уникальный идентификатор предыдущей записи';
COMMENT ON COLUMN esz.mega_relation.next_mega_relation_id IS 'Уникальный идентификатор следующей записи';
COMMENT ON COLUMN esz.mega_relation.date_learn_start IS 'Дата начала обучения';
COMMENT ON COLUMN esz.mega_relation.date_learn_end IS 'Дата окончания обучения';
COMMENT ON COLUMN esz.mega_relation.external_system_id IS 'Ссылка на внешнюю систему';
COMMENT ON COLUMN esz.mega_relation.extend_entity_guid IS 'Уникальный идентификатор сущности';
COMMENT ON COLUMN esz.mega_relation.is_send_to_mk IS 'Отметка, что запись отправлена в МЭШ.Контингент';


-- esz.mega_relation_history definition

-- Drop table

-- DROP TABLE esz.mega_relation_history;

CREATE TABLE esz.mega_relation_history (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	mega_relation_id int4 NULL, -- Идентификатор
	mega_relation_history_type_id int4 NULL, -- Уникальный идентификатор типа истории связи
	document_type_id int4 NULL, -- Уникальный идентификатор
	"date" timestamp(0) NULL, -- Дата события
	doc_number varchar(100) NULL, -- Номер документа
	doc_date timestamp(0) NULL, -- Дата выдачи документа
	doc_name varchar(200) NULL, -- Наименование документа
	description varchar(1000) NULL, -- Описание
	old_class_id int4 NULL, -- Предыдущий класс
	old_service_id int4 NULL, -- Предыдущая услуга
	old_stage_id int4 NULL, -- Предыдущий этап
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	new_class_id int4 NULL, -- Новый класс
	new_service_id int4 NULL, -- Новая услуга
	new_stage_id int4 NULL, -- Новый этап
	service_class_id int4 NULL, -- Уникальный идентификатор класса
	user_id int4 NULL, -- Уникальный идентификатор пользователя (оператора)
	exclude_reason_id int4 NULL, -- Уникальный идентификатор причины исключения
	is_exam_participate bool NULL, -- Признак участника экзаменов
	CONSTRAINT mega_relation_history_pkey PRIMARY KEY (id)
);
CREATE INDEX ind_mega_relation_history_mega_relation_id ON esz.mega_relation_history USING btree (mega_relation_id);
CREATE INDEX ind_mega_relation_history_new_class_id ON esz.mega_relation_history USING btree (new_class_id);
CREATE INDEX ind_mega_relation_history_service_class_id_new_class_id ON esz.mega_relation_history USING btree (service_class_id, new_class_id);
CREATE INDEX ind_srv_cls ON esz.mega_relation_history USING btree (service_class_id);
COMMENT ON TABLE esz.mega_relation_history IS 'История переводов';

-- Column comments

COMMENT ON COLUMN esz.mega_relation_history.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.mega_relation_history.mega_relation_id IS 'Идентификатор';
COMMENT ON COLUMN esz.mega_relation_history.mega_relation_history_type_id IS 'Уникальный идентификатор типа истории связи';
COMMENT ON COLUMN esz.mega_relation_history.document_type_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.mega_relation_history."date" IS 'Дата события';
COMMENT ON COLUMN esz.mega_relation_history.doc_number IS 'Номер документа';
COMMENT ON COLUMN esz.mega_relation_history.doc_date IS 'Дата выдачи документа';
COMMENT ON COLUMN esz.mega_relation_history.doc_name IS 'Наименование документа';
COMMENT ON COLUMN esz.mega_relation_history.description IS 'Описание';
COMMENT ON COLUMN esz.mega_relation_history.old_class_id IS 'Предыдущий класс';
COMMENT ON COLUMN esz.mega_relation_history.old_service_id IS 'Предыдущая услуга';
COMMENT ON COLUMN esz.mega_relation_history.old_stage_id IS 'Предыдущий этап';
COMMENT ON COLUMN esz.mega_relation_history.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.mega_relation_history.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.mega_relation_history.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.mega_relation_history.new_class_id IS 'Новый класс';
COMMENT ON COLUMN esz.mega_relation_history.new_service_id IS 'Новая услуга';
COMMENT ON COLUMN esz.mega_relation_history.new_stage_id IS 'Новый этап';
COMMENT ON COLUMN esz.mega_relation_history.service_class_id IS 'Уникальный идентификатор класса';
COMMENT ON COLUMN esz.mega_relation_history.user_id IS 'Уникальный идентификатор пользователя (оператора)';
COMMENT ON COLUMN esz.mega_relation_history.exclude_reason_id IS 'Уникальный идентификатор причины исключения';
COMMENT ON COLUMN esz.mega_relation_history.is_exam_participate IS 'Признак участника экзаменов';


-- esz.mega_relation_history_type definition

-- Drop table

-- DROP TABLE esz.mega_relation_history_type;

CREATE TABLE esz.mega_relation_history_type (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(300) NULL, -- Наименование
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT mega_relation_history_type_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.mega_relation_history_type IS 'Справочник типов переводов';

-- Column comments

COMMENT ON COLUMN esz.mega_relation_history_type.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.mega_relation_history_type."name" IS 'Наименование';
COMMENT ON COLUMN esz.mega_relation_history_type.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.mega_relation_history_type.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.mega_relation_history_type.is_archive IS 'Признак архивности';


-- esz.mega_relation_pupil_history definition

-- Drop table

-- DROP TABLE esz.mega_relation_pupil_history;

CREATE TABLE esz.mega_relation_pupil_history (
	id serial4 NOT NULL, -- Уникальный идентификатор
	mega_relation_id int4 NULL, -- Уникальный идентификатор
	pupil_id int4 NULL, -- Идентификатор
	old_pupil_id int4 NULL, -- Идентификатор
	"date" timestamp(0) NOT NULL, -- Дата события
	CONSTRAINT mega_relation_pupil_history_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.mega_relation_pupil_history IS 'История переводов учеников';

-- Column comments

COMMENT ON COLUMN esz.mega_relation_pupil_history.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.mega_relation_pupil_history.mega_relation_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.mega_relation_pupil_history.pupil_id IS 'Идентификатор';
COMMENT ON COLUMN esz.mega_relation_pupil_history.old_pupil_id IS 'Идентификатор';
COMMENT ON COLUMN esz.mega_relation_pupil_history."date" IS 'Дата события';


-- esz.mega_relation_status definition

-- Drop table

-- DROP TABLE esz.mega_relation_status;

CREATE TABLE esz.mega_relation_status (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(300) NULL, -- Наименование
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT mega_relation_status_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.mega_relation_status IS 'Статус связи';

-- Column comments

COMMENT ON COLUMN esz.mega_relation_status.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.mega_relation_status."name" IS 'Наименование';
COMMENT ON COLUMN esz.mega_relation_status.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.mega_relation_status.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.mega_relation_status.is_archive IS 'Признак архивности';


-- esz.migration_data definition

-- Drop table

-- DROP TABLE esz.migration_data;

CREATE TABLE esz.migration_data (
	id int4 NULL, -- Первичный ключ
	script_name varchar(100) NULL, -- Название скрипта
	node_name varchar(100) NULL, -- Название ноды
	date_create timestamp NULL, -- Дата создания записи
	is_script_done bool NULL, -- Скрипт в рамках вывода выполнен на всех нодах
	app_name varchar(100) NULL, -- Название приложения
	date_change timestamp NULL -- Дата изменения записи
);
COMMENT ON TABLE esz.migration_data IS 'История выполнения скриптов при выводе релизов';

-- Column comments

COMMENT ON COLUMN esz.migration_data.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.migration_data.script_name IS 'Название скрипта';
COMMENT ON COLUMN esz.migration_data.node_name IS 'Название ноды';
COMMENT ON COLUMN esz.migration_data.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.migration_data.is_script_done IS 'Скрипт в рамках вывода выполнен на всех нодах';
COMMENT ON COLUMN esz.migration_data.app_name IS 'Название приложения';
COMMENT ON COLUMN esz.migration_data.date_change IS 'Дата изменения записи';


-- esz.migration_data_old definition

-- Drop table

-- DROP TABLE esz.migration_data_old;

CREATE TABLE esz.migration_data_old (
	id int4 DEFAULT nextval('esz.migration_data_id_seq'::regclass) NOT NULL, -- Первичный ключ
	script_name varchar(100) NOT NULL, -- Название скрипта
	node_name varchar(100) NOT NULL, -- Название ноды
	date_create timestamp DEFAULT now() NOT NULL, -- Дата создания записи
	is_script_done bool DEFAULT false NOT NULL, -- Скрипт в рамках вывода выполнен на всех нодах
	app_name varchar(100) NULL, -- Название приложения
	date_change timestamp DEFAULT now() NOT NULL, -- Дата изменения записи
	CONSTRAINT migration_data_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.migration_data_old IS 'Сведения о выполненных скриптах миграции';

-- Column comments

COMMENT ON COLUMN esz.migration_data_old.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.migration_data_old.script_name IS 'Название скрипта';
COMMENT ON COLUMN esz.migration_data_old.node_name IS 'Название ноды';
COMMENT ON COLUMN esz.migration_data_old.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.migration_data_old.is_script_done IS 'Скрипт в рамках вывода выполнен на всех нодах';
COMMENT ON COLUMN esz.migration_data_old.app_name IS 'Название приложения';
COMMENT ON COLUMN esz.migration_data_old.date_change IS 'Дата изменения записи';


-- esz.monitoring_mosru definition

-- Drop table

-- DROP TABLE esz.monitoring_mosru;

CREATE TABLE esz.monitoring_mosru (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	num_org int4 NULL, -- Количество организаций
	num_ucs int4 NULL, -- Количество услуг
	num_sc int4 NULL, -- Количество групп
	sum_pupil int4 NULL, -- Количество зачисленных
	sum_free int4 NULL, -- Количество мест
	num_ad int4 NULL, -- Количество записей без адресов предоставления услуг
	fullad varchar(4000) NULL, -- Адреса без района и/или округа
	date_create timestamp(0) NULL, -- Дата записи
	CONSTRAINT monitoring_mosru_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.monitoring_mosru IS 'Мониторинг mos.ru';

-- Column comments

COMMENT ON COLUMN esz.monitoring_mosru.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.monitoring_mosru.num_org IS 'Количество организаций';
COMMENT ON COLUMN esz.monitoring_mosru.num_ucs IS 'Количество услуг';
COMMENT ON COLUMN esz.monitoring_mosru.num_sc IS 'Количество групп';
COMMENT ON COLUMN esz.monitoring_mosru.sum_pupil IS 'Количество зачисленных';
COMMENT ON COLUMN esz.monitoring_mosru.sum_free IS 'Количество мест';
COMMENT ON COLUMN esz.monitoring_mosru.num_ad IS 'Количество записей без адресов предоставления услуг';
COMMENT ON COLUMN esz.monitoring_mosru.fullad IS 'Адреса без района и/или округа';
COMMENT ON COLUMN esz.monitoring_mosru.date_create IS 'Дата записи';


-- esz.move_reason definition

-- Drop table

-- DROP TABLE esz.move_reason;

CREATE TABLE esz.move_reason (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(200) NULL, -- Наименование
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT move_reason_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.move_reason IS 'Причина перевода';

-- Column comments

COMMENT ON COLUMN esz.move_reason.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.move_reason."name" IS 'Наименование';
COMMENT ON COLUMN esz.move_reason.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.move_reason.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.move_reason.is_archive IS 'Признак архивности';


-- esz.mrsd_ekis definition

-- Drop table

-- DROP TABLE esz.mrsd_ekis;

CREATE TABLE esz.mrsd_ekis (
	org_ekis varchar(100) NULL, -- ЕКИС ОУ
	short_name varchar(500) NOT NULL, -- Сокращенное наименование организации оказания услуг
	mrsd_ekis varchar(100) NULL, -- ЕКИС ОУ
	mrsd_short_name varchar(500) NOT NULL -- Сокращенное наименование организации оказания услуг
);
COMMENT ON TABLE esz.mrsd_ekis IS 'Данные по МРСД из ЕКИС';

-- Column comments

COMMENT ON COLUMN esz.mrsd_ekis.org_ekis IS 'ЕКИС ОУ';
COMMENT ON COLUMN esz.mrsd_ekis.short_name IS 'Сокращенное наименование организации оказания услуг';
COMMENT ON COLUMN esz.mrsd_ekis.mrsd_ekis IS 'ЕКИС ОУ';
COMMENT ON COLUMN esz.mrsd_ekis.mrsd_short_name IS 'Сокращенное наименование организации оказания услуг';


-- esz.normative_document definition

-- Drop table

-- DROP TABLE esz.normative_document;

CREATE TABLE esz.normative_document (
	id serial4 NOT NULL, -- Первичный ключ
	link varchar(1000) NULL, -- Ссылка на документ
	name_document varchar(1000) NULL, -- Название документа отображаемое пользователям
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивной записи
	extend_entity_guid uuid DEFAULT gen_random_uuid() NOT NULL, -- Уникальный идентификатор сущности
	CONSTRAINT normative_document_pkey PRIMARY KEY (id)
);
CREATE INDEX ind_normative_document_extend_entity_guid ON esz.normative_document USING btree (extend_entity_guid);
CREATE INDEX link ON esz.normative_document USING gin (to_tsvector('russian'::regconfig, (((COALESCE(link, ''::character varying))::text || ' '::text) || (COALESCE(name_document, ''::character varying))::text)));
COMMENT ON TABLE esz.normative_document IS 'Информация о нормативных документах, регулирующих процесс записи в кружки/дома творчества и т.д.';

-- Column comments

COMMENT ON COLUMN esz.normative_document.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.normative_document.link IS 'Ссылка на документ';
COMMENT ON COLUMN esz.normative_document.name_document IS 'Название документа отображаемое пользователям';
COMMENT ON COLUMN esz.normative_document.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.normative_document.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.normative_document.is_archive IS 'Признак архивной записи';
COMMENT ON COLUMN esz.normative_document.extend_entity_guid IS 'Уникальный идентификатор сущности';


-- esz.organization_history_copy definition

-- Drop table

-- DROP TABLE esz.organization_history_copy;

CREATE TABLE esz.organization_history_copy (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	source_id int4 NULL, -- Идентификатор организации источника
	result_id int4 NULL, -- Идентификатор организации приемника
	organization_history_type_id int4 NULL, -- Уникальный идентификатор
	organization_id int4 NULL, -- Уникальный идентификатор
	linked_ou_id int4 NULL, -- Идентификатор образовательного учреждения
	event_code int4 NULL, -- Код события
	event_type varchar(3000) NULL, -- Тип события
	author_code int4 NULL, -- Код автора изменений
	author_name varchar(3000) NULL, -- Автор изменений
	event_date timestamp(0) NULL, -- Дата события
	"comment" varchar(800) NULL, -- Комментарий
	CONSTRAINT organization_history_copy_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_ind_type_history_c ON esz.organization_history_copy USING btree (organization_history_type_id);
CREATE INDEX ind_linked_ou_c ON esz.organization_history_copy USING btree (linked_ou_id);
CREATE INDEX ind_result_event_c ON esz.organization_history_copy USING btree (result_id);
CREATE INDEX ind_source_event_c ON esz.organization_history_copy USING btree (source_id);
CREATE INDEX "link_historyC" ON esz.organization_history_copy USING btree (organization_id);
COMMENT ON TABLE esz.organization_history_copy IS 'Организации оказания услуг история';

-- Column comments

COMMENT ON COLUMN esz.organization_history_copy.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.organization_history_copy.source_id IS 'Идентификатор организации источника';
COMMENT ON COLUMN esz.organization_history_copy.result_id IS 'Идентификатор организации приемника';
COMMENT ON COLUMN esz.organization_history_copy.organization_history_type_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization_history_copy.organization_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization_history_copy.linked_ou_id IS 'Идентификатор образовательного учреждения';
COMMENT ON COLUMN esz.organization_history_copy.event_code IS 'Код события';
COMMENT ON COLUMN esz.organization_history_copy.event_type IS 'Тип события';
COMMENT ON COLUMN esz.organization_history_copy.author_code IS 'Код автора изменений';
COMMENT ON COLUMN esz.organization_history_copy.author_name IS 'Автор изменений';
COMMENT ON COLUMN esz.organization_history_copy.event_date IS 'Дата события';
COMMENT ON COLUMN esz.organization_history_copy."comment" IS 'Комментарий';


-- esz.organization_history_type definition

-- Drop table

-- DROP TABLE esz.organization_history_type;

CREATE TABLE esz.organization_history_type (
	id int4 NOT NULL, -- Уникальный идентификатор
	"name" varchar(1000) NULL, -- Наименование
	CONSTRAINT organization_history_type_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.organization_history_type IS 'Тип истории организации';

-- Column comments

COMMENT ON COLUMN esz.organization_history_type.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization_history_type."name" IS 'Наименование';


-- esz.organization_legal_form definition

-- Drop table

-- DROP TABLE esz.organization_legal_form;

CREATE TABLE esz.organization_legal_form (
	id serial4 NOT NULL, -- Уникальный идентификатор
	legal_form_name varchar(500) NULL, -- Наименование организационно-правовой формы из НСИ3
	federal_id int4 NULL, -- Код организационно-правовой формы
	external_uid varchar(250) NULL, -- Идентификатор во внешней системе
	external_system_id int4 NULL, -- Идентификатор внешней системы
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	CONSTRAINT organization_legal_form_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.organization_legal_form IS 'Справочник организационно-правовой формы';

-- Column comments

COMMENT ON COLUMN esz.organization_legal_form.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization_legal_form.legal_form_name IS 'Наименование организационно-правовой формы из НСИ3';
COMMENT ON COLUMN esz.organization_legal_form.federal_id IS 'Код организационно-правовой формы';
COMMENT ON COLUMN esz.organization_legal_form.external_uid IS 'Идентификатор во внешней системе';
COMMENT ON COLUMN esz.organization_legal_form.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.organization_legal_form.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.organization_legal_form.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.organization_legal_form.date_change IS 'Дата изменения';


-- esz.organization_move_history definition

-- Drop table

-- DROP TABLE esz.organization_move_history;

CREATE TABLE esz.organization_move_history (
	id serial4 NOT NULL, -- Первичный ключ
	entity_id int4 NOT NULL, -- Ссылка на сущность
	move_entity_type_id int4 NOT NULL, -- Тип сущности
	old_organization_id int4 NOT NULL, -- Организация источник
	organization_id int4 NOT NULL, -- Организация назначения
	move_date timestamp(0) DEFAULT now() NOT NULL, -- Дата переноса
	CONSTRAINT organization_move_history_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.organization_move_history IS 'История переносов организаций';

-- Column comments

COMMENT ON COLUMN esz.organization_move_history.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.organization_move_history.entity_id IS 'Ссылка на сущность';
COMMENT ON COLUMN esz.organization_move_history.move_entity_type_id IS 'Тип сущности';
COMMENT ON COLUMN esz.organization_move_history.old_organization_id IS 'Организация источник';
COMMENT ON COLUMN esz.organization_move_history.organization_id IS 'Организация назначения';
COMMENT ON COLUMN esz.organization_move_history.move_date IS 'Дата переноса';


-- esz.organization_resource definition

-- Drop table

-- DROP TABLE esz.organization_resource;

CREATE TABLE esz.organization_resource (
	id serial4 NOT NULL, -- Уникальный идентификатор
	organization_id int4 NULL, -- Уникальный идентификатор
	"name" varchar(1000) NULL, -- Наименование
	phone text NULL, -- Телефон контактного лица
	email varchar(200) NULL, -- Электронная почта
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(100) NULL, -- Внешний идентификатор
	external_system varchar(100) NULL, -- Идентификатор внешней системы
	guid uuid NOT NULL, -- Глобальный идентификатор ресурса
	"position" varchar(2000) NULL, -- Должность
	CONSTRAINT organization_resource_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.organization_resource IS 'Персоны которые должны проводить предварительные испытания/п';

-- Column comments

COMMENT ON COLUMN esz.organization_resource.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization_resource.organization_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization_resource."name" IS 'Наименование';
COMMENT ON COLUMN esz.organization_resource.phone IS 'Телефон контактного лица';
COMMENT ON COLUMN esz.organization_resource.email IS 'Электронная почта';
COMMENT ON COLUMN esz.organization_resource.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.organization_resource.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.organization_resource.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.organization_resource.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.organization_resource.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.organization_resource.external_system IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.organization_resource.guid IS 'Глобальный идентификатор ресурса';
COMMENT ON COLUMN esz.organization_resource."position" IS 'Должность';


-- esz.organization_resource_history definition

-- Drop table

-- DROP TABLE esz.organization_resource_history;

CREATE TABLE esz.organization_resource_history (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	organization_id int4 NULL, -- Уникальный идентификатор
	organization_resource_id int4 NULL, -- Уникальный идентификатор
	old_organization_id int4 NOT NULL, -- Уникальный идентификатор переносимой организации
	"date" timestamp(0) NOT NULL, -- Дата события
	CONSTRAINT organization_resource_history_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.organization_resource_history IS 'История ресурсы';

-- Column comments

COMMENT ON COLUMN esz.organization_resource_history.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.organization_resource_history.organization_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization_resource_history.organization_resource_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization_resource_history.old_organization_id IS 'Уникальный идентификатор переносимой организации';
COMMENT ON COLUMN esz.organization_resource_history."date" IS 'Дата события';


-- esz.person_position definition

-- Drop table

-- DROP TABLE esz.person_position;

CREATE TABLE esz.person_position (
	id serial4 NOT NULL, -- Идентификатор
	position_name varchar(200) NULL, -- Название должности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	CONSTRAINT person_position_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.person_position IS 'Должность';

-- Column comments

COMMENT ON COLUMN esz.person_position.id IS 'Идентификатор';
COMMENT ON COLUMN esz.person_position.position_name IS 'Название должности';
COMMENT ON COLUMN esz.person_position.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.person_position.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.person_position.date_change IS 'Дата изменения';


-- esz.person_position_organization_rel_history definition

-- Drop table

-- DROP TABLE esz.person_position_organization_rel_history;

CREATE TABLE esz.person_position_organization_rel_history (
	id serial4 NOT NULL, -- Первичный ключ
	organization_id int4 NULL, -- Ссылка на организацию
	person_id int4 NULL, -- Ссылка на преподавателя
	person_position_organization_id int4 NULL, -- Id записи в PersonPositionOrganizationRel
	old_organization_id int4 NOT NULL, -- Ссылка на старую организацию
	date_move timestamp(0) DEFAULT now() NOT NULL, -- Дата переноса
	CONSTRAINT person_position_organization_rel_history_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.person_position_organization_rel_history IS 'История перемещения преподавателя между организациями';

-- Column comments

COMMENT ON COLUMN esz.person_position_organization_rel_history.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.person_position_organization_rel_history.organization_id IS 'Ссылка на организацию';
COMMENT ON COLUMN esz.person_position_organization_rel_history.person_id IS 'Ссылка на преподавателя';
COMMENT ON COLUMN esz.person_position_organization_rel_history.person_position_organization_id IS 'Id записи в PersonPositionOrganizationRel';
COMMENT ON COLUMN esz.person_position_organization_rel_history.old_organization_id IS 'Ссылка на старую организацию';
COMMENT ON COLUMN esz.person_position_organization_rel_history.date_move IS 'Дата переноса';


-- esz.personal_address_history definition

-- Drop table

-- DROP TABLE esz.personal_address_history;

CREATE TABLE esz.personal_address_history (
	id serial4 NOT NULL, -- Уникальный идентификатор
	personal_address_id int4 NULL, -- Уникальный идентификатор
	pupil_id int4 NULL, -- Идентификатор
	old_pupil_id int4 NULL, -- Идентификатор
	"date" timestamp(0) NOT NULL, -- Дата события
	CONSTRAINT personal_address_history_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.personal_address_history IS 'История переводов учеников';

-- Column comments

COMMENT ON COLUMN esz.personal_address_history.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.personal_address_history.personal_address_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.personal_address_history.pupil_id IS 'Идентификатор';
COMMENT ON COLUMN esz.personal_address_history.old_pupil_id IS 'Идентификатор';
COMMENT ON COLUMN esz.personal_address_history."date" IS 'Дата события';


-- esz.personal_request_data definition

-- Drop table

-- DROP TABLE esz.personal_request_data;

CREATE TABLE esz.personal_request_data (
	id serial4 NOT NULL, -- Уникальный идентификатор
	last_name varchar(200) NULL, -- Фамилия
	first_name varchar(200) NULL, -- Имя
	middle_name varchar(200) NULL, -- Отчество
	date_of_birth date NULL, -- Дата рождения
	series varchar(200) NULL, -- Серия
	"number" varchar(200) NULL, -- Номер
	date_of_issue date NULL, -- Дата выдачи
	issued varchar(250) NULL, -- Кем выдан документ
	entity_id varchar(36) NULL, -- Идентификатор сущности
	external_uid varchar(100) NULL, -- Внешний идентификатор
	document_type_id int4 NULL, -- Уникальный идентификатор
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	email varchar(200) NULL, -- Адрес электронной почты
	phone varchar(50) NULL, -- Номер телефона
	moscow_registration_id int4 NULL, -- Московская регистрация
	snils int8 NULL, -- СНИЛС
	home_phone varchar(30) NULL, -- Домашний телефон
	issuer_code varchar(100) NULL, -- Код подразделения, выдавшего документ
	communication_mode_id int4 NULL, -- Приоритетный способ связи
	type_representation_id int4 DEFAULT 3 NULL, -- Тип представительства
	sex_id int4 NULL, -- Пол
	type_issue_place_id int4 NULL, -- Место выдачи документов
	moscow_social_card_number varchar(50) NULL, -- Номер социальной карты москвича
	emission_series varchar(50) NULL, -- Серия социальной карты москвича
	external_system_id int4 NULL, -- Ссылка на внешнюю систему
	short_number varchar(100) NULL, -- Короткий номер актовой записи о рождении в ЕГР ЗАГС
	CONSTRAINT personal_request_data_pkey PRIMARY KEY (id)
);
CREATE INDEX ind_number ON esz.personal_request_data USING btree (number);
CREATE INDEX ind_personal_request_data_entity_id ON esz.personal_request_data USING btree (entity_id);
CREATE INDEX ind_personal_request_data_last_first_series_number_doc_type_id_ ON esz.personal_request_data USING btree (last_name, first_name, series, number, document_type_id, date_of_birth);
CREATE INDEX ind_personal_request_data_short_number ON esz.personal_request_data USING btree (short_number);
CREATE INDEX ind_prd_date_of_birth ON esz.personal_request_data USING btree (date_of_birth);
CREATE INDEX ind_prd_first_name ON esz.personal_request_data USING btree (first_name);
CREATE INDEX ind_prd_last_name ON esz.personal_request_data USING btree (last_name);
CREATE INDEX ind_prd_middle_name ON esz.personal_request_data USING btree (middle_name);
CREATE INDEX ind_prd_snils ON esz.personal_request_data USING btree (snils);
COMMENT ON TABLE esz.personal_request_data IS 'Персональные данные';

-- Column comments

COMMENT ON COLUMN esz.personal_request_data.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.personal_request_data.last_name IS 'Фамилия';
COMMENT ON COLUMN esz.personal_request_data.first_name IS 'Имя';
COMMENT ON COLUMN esz.personal_request_data.middle_name IS 'Отчество';
COMMENT ON COLUMN esz.personal_request_data.date_of_birth IS 'Дата рождения';
COMMENT ON COLUMN esz.personal_request_data.series IS 'Серия';
COMMENT ON COLUMN esz.personal_request_data."number" IS 'Номер';
COMMENT ON COLUMN esz.personal_request_data.date_of_issue IS 'Дата выдачи';
COMMENT ON COLUMN esz.personal_request_data.issued IS 'Кем выдан документ';
COMMENT ON COLUMN esz.personal_request_data.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.personal_request_data.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.personal_request_data.document_type_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.personal_request_data.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.personal_request_data.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.personal_request_data.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.personal_request_data.email IS 'Адрес электронной почты';
COMMENT ON COLUMN esz.personal_request_data.phone IS 'Номер телефона';
COMMENT ON COLUMN esz.personal_request_data.moscow_registration_id IS 'Московская регистрация';
COMMENT ON COLUMN esz.personal_request_data.snils IS 'СНИЛС';
COMMENT ON COLUMN esz.personal_request_data.home_phone IS 'Домашний телефон';
COMMENT ON COLUMN esz.personal_request_data.issuer_code IS 'Код подразделения, выдавшего документ';
COMMENT ON COLUMN esz.personal_request_data.communication_mode_id IS 'Приоритетный способ связи';
COMMENT ON COLUMN esz.personal_request_data.type_representation_id IS 'Тип представительства';
COMMENT ON COLUMN esz.personal_request_data.sex_id IS 'Пол';
COMMENT ON COLUMN esz.personal_request_data.type_issue_place_id IS 'Место выдачи документов';
COMMENT ON COLUMN esz.personal_request_data.moscow_social_card_number IS 'Номер социальной карты москвича';
COMMENT ON COLUMN esz.personal_request_data.emission_series IS 'Серия социальной карты москвича';
COMMENT ON COLUMN esz.personal_request_data.external_system_id IS 'Ссылка на внешнюю систему';
COMMENT ON COLUMN esz.personal_request_data.short_number IS 'Короткий номер актовой записи о рождении в ЕГР ЗАГС';


-- esz.privilege_category definition

-- Drop table

-- DROP TABLE esz.privilege_category;

CREATE TABLE esz.privilege_category (
	id serial4 NOT NULL, -- Первичный ключ
	code varchar(200) NULL, -- Код привилегии
	"name" varchar(500) NULL, -- Название привилегии
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) DEFAULT now() NOT NULL, -- Дата последнего изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT privilege_category_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.privilege_category IS 'Категории привилегий';

-- Column comments

COMMENT ON COLUMN esz.privilege_category.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.privilege_category.code IS 'Код привилегии';
COMMENT ON COLUMN esz.privilege_category."name" IS 'Название привилегии';
COMMENT ON COLUMN esz.privilege_category.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.privilege_category.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.privilege_category.is_archive IS 'Признак архивности';


-- esz.programm_level definition

-- Drop table

-- DROP TABLE esz.programm_level;

CREATE TABLE esz.programm_level (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(500) NULL, -- Наименование
	code varchar(50) NULL, -- Код
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	entity_id varchar(36) NULL, -- Идентификатор сущности
	CONSTRAINT programm_level_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.programm_level IS 'Профессиональная подготовка/секция';

-- Column comments

COMMENT ON COLUMN esz.programm_level.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.programm_level."name" IS 'Наименование';
COMMENT ON COLUMN esz.programm_level.code IS 'Код';
COMMENT ON COLUMN esz.programm_level.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.programm_level.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.programm_level.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.programm_level.entity_id IS 'Идентификатор сущности';

-- Table Triggers

create trigger trigger_programm_level after
insert
    or
update
    on
    esz.programm_level for each row execute function esz.programm_level_insert_update_trigger_fnc();


-- esz.project_type definition

-- Drop table

-- DROP TABLE esz.project_type;

CREATE TABLE esz.project_type (
	id serial4 NOT NULL, -- Первичный ключ
	"name" varchar(500) NOT NULL, -- Наименование типа проекта ДО ДОНМ
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения
	CONSTRAINT project_type_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.project_type IS 'Cправочник типов проектов детских объединений ДОНМ';

-- Column comments

COMMENT ON COLUMN esz.project_type.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.project_type."name" IS 'Наименование типа проекта ДО ДОНМ';
COMMENT ON COLUMN esz.project_type.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.project_type.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.project_type.date_change IS 'Дата последнего изменения';


-- esz.publication_status definition

-- Drop table

-- DROP TABLE esz.publication_status;

CREATE TABLE esz.publication_status (
	id serial4 NOT NULL, -- Первичный ключ
	"name" varchar(50) NULL, -- Статус публикации
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT publication_status_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.publication_status IS 'Справочник для определения статуса публикации на главной странице АИС записи объявления';

-- Column comments

COMMENT ON COLUMN esz.publication_status.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.publication_status."name" IS 'Статус публикации';
COMMENT ON COLUMN esz.publication_status.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.publication_status.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.publication_status.is_archive IS 'Признак архивности';

-- Table Triggers

create trigger t_publication_status before
update
    on
    esz.publication_status for each row execute function esz.insert_current_timestamp();


-- esz.pupil_decline_reason definition

-- Drop table

-- DROP TABLE esz.pupil_decline_reason;

CREATE TABLE esz.pupil_decline_reason (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(200) NOT NULL, -- Наименование
	date_create timestamp(0) NOT NULL, -- Дата создания записи
	date_change timestamp(0) DEFAULT now() NOT NULL, -- Дата изменения записи
	auto_decline bool DEFAULT false NOT NULL, -- Автоотмена
	is_archive bool NOT NULL, -- Признак архивной записи
	education_type int4 NULL, -- Относится к видам обучения
	CONSTRAINT pupil_decline_reason_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.pupil_decline_reason IS 'Справочник причин отчисления учеников';

-- Column comments

COMMENT ON COLUMN esz.pupil_decline_reason.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.pupil_decline_reason."name" IS 'Наименование';
COMMENT ON COLUMN esz.pupil_decline_reason.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.pupil_decline_reason.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.pupil_decline_reason.auto_decline IS 'Автоотмена';
COMMENT ON COLUMN esz.pupil_decline_reason.is_archive IS 'Признак архивной записи';
COMMENT ON COLUMN esz.pupil_decline_reason.education_type IS 'Относится к видам обучения';


-- esz.pupil_personal_rel_add definition

-- Drop table

-- DROP TABLE esz.pupil_personal_rel_add;

CREATE TABLE esz.pupil_personal_rel_add (
	personal_request_data_id int4 NOT NULL, -- Уникальный идентификатор
	pupil_id int4 NOT NULL, -- Идентификатор
	adding_stage_num int4 DEFAULT 0 NOT NULL -- Этап
);
CREATE INDEX ind1 ON esz.pupil_personal_rel_add USING btree (pupil_id);
CREATE INDEX ind2 ON esz.pupil_personal_rel_add USING btree (personal_request_data_id);
COMMENT ON TABLE esz.pupil_personal_rel_add IS 'Связь таблиц pupil и personal_request_data';

-- Column comments

COMMENT ON COLUMN esz.pupil_personal_rel_add.personal_request_data_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.pupil_personal_rel_add.pupil_id IS 'Идентификатор';
COMMENT ON COLUMN esz.pupil_personal_rel_add.adding_stage_num IS 'Этап';


-- esz.pupil_personal_rel_add_history definition

-- Drop table

-- DROP TABLE esz.pupil_personal_rel_add_history;

CREATE TABLE esz.pupil_personal_rel_add_history (
	id serial4 NOT NULL, -- Уникальный идентификатор
	personal_request_data_id int4 NULL, -- Уникальный идентификатор
	pupil_id int4 NULL, -- Идентификатор
	old_pupil_id int4 NULL, -- Идентификатор
	"date" timestamp(0) NOT NULL, -- Дата события
	CONSTRAINT pupil_personal_rel_add_history_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.pupil_personal_rel_add_history IS 'История переводов учеников';

-- Column comments

COMMENT ON COLUMN esz.pupil_personal_rel_add_history.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.pupil_personal_rel_add_history.personal_request_data_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.pupil_personal_rel_add_history.pupil_id IS 'Идентификатор';
COMMENT ON COLUMN esz.pupil_personal_rel_add_history.old_pupil_id IS 'Идентификатор';
COMMENT ON COLUMN esz.pupil_personal_rel_add_history."date" IS 'Дата события';


-- esz.pupil_personal_rel_history definition

-- Drop table

-- DROP TABLE esz.pupil_personal_rel_history;

CREATE TABLE esz.pupil_personal_rel_history (
	id serial4 NOT NULL, -- Уникальный идентификатор
	personal_request_data_id int4 NULL, -- Уникальный идентификатор
	pupil_id int4 NULL, -- Идентификатор
	old_pupil_id int4 NULL, -- Идентификатор
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания истории
	CONSTRAINT pupil_personal_rel_history_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.pupil_personal_rel_history IS 'История переводов учеников';

-- Column comments

COMMENT ON COLUMN esz.pupil_personal_rel_history.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.pupil_personal_rel_history.personal_request_data_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.pupil_personal_rel_history.pupil_id IS 'Идентификатор';
COMMENT ON COLUMN esz.pupil_personal_rel_history.old_pupil_id IS 'Идентификатор';
COMMENT ON COLUMN esz.pupil_personal_rel_history.date_create IS 'Дата создания истории';


-- esz.question_type definition

-- Drop table

-- DROP TABLE esz.question_type;

CREATE TABLE esz.question_type (
	id serial4 NOT NULL, -- Идентификатор записи
	"name" varchar(500) NULL, -- Название категории вопросов
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего редактирования записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT question_type_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.question_type IS 'таблица категорий часто задаваемых вопросов.';

-- Column comments

COMMENT ON COLUMN esz.question_type.id IS 'Идентификатор записи';
COMMENT ON COLUMN esz.question_type."name" IS 'Название категории вопросов';
COMMENT ON COLUMN esz.question_type.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.question_type.date_change IS 'Дата последнего редактирования записи';
COMMENT ON COLUMN esz.question_type.is_archive IS 'Признак архивности';


-- esz.queue definition

-- Drop table

-- DROP TABLE esz.queue;

CREATE TABLE esz.queue (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	queue_type_id int4 NOT NULL, -- Уникальный идентификатор типа сообщения
	entity_id int4 NULL, -- Идентификатор сущности
	email varchar(100) NULL, -- Адрес электронной почты
	create_date timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	sent_date timestamp(0) NULL, -- Дата отправки
	status int4 NULL, -- Статус
	dogm_nsi_package_id int4 NULL, -- Идентификатор ДОГМ из НСИ
	description varchar(255) NULL, -- Описание
	service_number varchar(255) NULL, -- Единый номер обращения
	extend_entity_guid uuid DEFAULT gen_random_uuid() NULL, -- Идентификатор объекта, уникальный в рамках системы АИС "Зачисление в УДО" или МЭШ Контингент, в зависимости от типа операции
	retry_number int4 NULL, -- Номер попытки выполнения задачи
	delay_to timestamp(0) NULL, -- Не запускать раньше указанного времени
	CONSTRAINT queue_pkey PRIMARY KEY (id, queue_type_id)
);
CREATE INDEX fk_queue_type_rel ON esz.queue USING btree (queue_type_id);
CREATE INDEX ind_queue_create_date ON esz.queue USING btree (create_date);
CREATE INDEX ind_queue_entity_id ON esz.queue USING btree (entity_id);
CREATE INDEX ind_queue_extend_entity_guid ON esz.queue USING btree (extend_entity_guid);
CREATE INDEX ind_queue_service_number ON esz.queue USING btree (service_number);
CREATE INDEX ind_queue_type ON esz.queue USING btree (queue_type_id, sent_date);
COMMENT ON TABLE esz.queue IS 'Очередь отправки сообщений разных типов и электронной почты';

-- Column comments

COMMENT ON COLUMN esz.queue.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.queue.queue_type_id IS 'Уникальный идентификатор типа сообщения';
COMMENT ON COLUMN esz.queue.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.queue.email IS 'Адрес электронной почты';
COMMENT ON COLUMN esz.queue.create_date IS 'Дата создания записи';
COMMENT ON COLUMN esz.queue.sent_date IS 'Дата отправки';
COMMENT ON COLUMN esz.queue.status IS 'Статус';
COMMENT ON COLUMN esz.queue.dogm_nsi_package_id IS 'Идентификатор ДОГМ из НСИ';
COMMENT ON COLUMN esz.queue.description IS 'Описание';
COMMENT ON COLUMN esz.queue.service_number IS 'Единый номер обращения';
COMMENT ON COLUMN esz.queue.extend_entity_guid IS 'Идентификатор объекта, уникальный в рамках системы АИС "Зачисление в УДО" или МЭШ Контингент, в зависимости от типа операции';
COMMENT ON COLUMN esz.queue.retry_number IS 'Номер попытки выполнения задачи';
COMMENT ON COLUMN esz.queue.delay_to IS 'Не запускать раньше указанного времени';


-- esz.queue_type definition

-- Drop table

-- DROP TABLE esz.queue_type;

CREATE TABLE esz.queue_type (
	id serial4 NOT NULL, -- Первичный ключ
	"name" varchar(500) NULL, -- Название типа очереди
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	retry_count int4 NULL, -- Количество повторных попыток отправки
	retry_interval int4 NULL, -- Интервал повторной отправки в секундах
	CONSTRAINT queue_type_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.queue_type IS 'Тип сообщения в очереди отправки сообщений';

-- Column comments

COMMENT ON COLUMN esz.queue_type.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.queue_type."name" IS 'Название типа очереди';
COMMENT ON COLUMN esz.queue_type.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.queue_type.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.queue_type.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.queue_type.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.queue_type.retry_count IS 'Количество повторных попыток отправки';
COMMENT ON COLUMN esz.queue_type.retry_interval IS 'Интервал повторной отправки в секундах';


-- esz.request_change_type definition

-- Drop table

-- DROP TABLE esz.request_change_type;

CREATE TABLE esz.request_change_type (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" text NULL, -- Наименование
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT request_change_type_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.request_change_type IS 'Тип изменения РБНДО или МВК';

-- Column comments

COMMENT ON COLUMN esz.request_change_type.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.request_change_type."name" IS 'Наименование';
COMMENT ON COLUMN esz.request_change_type.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.request_change_type.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.request_change_type.is_archive IS 'Признак архивности';


-- esz.request_decline_reason definition

-- Drop table

-- DROP TABLE esz.request_decline_reason;

CREATE TABLE esz.request_decline_reason (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(1000) NULL, -- Наименование
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	education_type_id int4 DEFAULT 1 NOT NULL, -- Идентификатор типа образования
	CONSTRAINT request_decline_reason_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.request_decline_reason IS 'Справочник причин отказа в зачислении';

-- Column comments

COMMENT ON COLUMN esz.request_decline_reason.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.request_decline_reason."name" IS 'Наименование';
COMMENT ON COLUMN esz.request_decline_reason.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.request_decline_reason.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.request_decline_reason.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.request_decline_reason.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.request_decline_reason.education_type_id IS 'Идентификатор типа образования';


-- esz.request_history definition

-- Drop table

-- DROP TABLE esz.request_history;

CREATE TABLE esz.request_history (
	id serial4 NOT NULL, -- Уникальный идентификатор
	request_id int4 NULL, -- Уникальный идентификатор
	pupil_id int4 NULL, -- Идентификатор
	old_pupil_id int4 NULL, -- Идентификатор
	"date" timestamp(0) NOT NULL, -- Дата события
	CONSTRAINT request_history_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.request_history IS 'История заявки';

-- Column comments

COMMENT ON COLUMN esz.request_history.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.request_history.request_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.request_history.pupil_id IS 'Идентификатор';
COMMENT ON COLUMN esz.request_history.old_pupil_id IS 'Идентификатор';
COMMENT ON COLUMN esz.request_history."date" IS 'Дата события';


-- esz.request_source definition

-- Drop table

-- DROP TABLE esz.request_source;

CREATE TABLE esz.request_source (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(500) NULL, -- Наименование
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT request_source_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.request_source IS 'Справочник источников заявлений';

-- Column comments

COMMENT ON COLUMN esz.request_source.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.request_source."name" IS 'Наименование';
COMMENT ON COLUMN esz.request_source.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.request_source.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.request_source.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.request_source.is_archive IS 'Признак архивности';


-- esz.rtshed_document_type definition

-- Drop table

-- DROP TABLE esz.rtshed_document_type;

CREATE TABLE esz.rtshed_document_type (
	id serial4 NOT NULL, -- Уникальный идентификатор записи в БД
	"name" varchar(200) NOT NULL, -- Наименование типа документа в ЦХЭД
	technical_name varchar(200) NULL, -- Техническое наименование типа документа в ЦХЭД
	is_archive bool DEFAULT false NOT NULL, -- Признак архивной записи
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата обновления записи
	CONSTRAINT rtshed_document_type_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.rtshed_document_type IS 'Тип докумена в ЦХЭД';

-- Column comments

COMMENT ON COLUMN esz.rtshed_document_type.id IS 'Уникальный идентификатор записи в БД';
COMMENT ON COLUMN esz.rtshed_document_type."name" IS 'Наименование типа документа в ЦХЭД';
COMMENT ON COLUMN esz.rtshed_document_type.technical_name IS 'Техническое наименование типа документа в ЦХЭД';
COMMENT ON COLUMN esz.rtshed_document_type.is_archive IS 'Признак архивной записи';
COMMENT ON COLUMN esz.rtshed_document_type.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.rtshed_document_type.date_change IS 'Дата обновления записи';


-- esz.schedule_type_of_service definition

-- Drop table

-- DROP TABLE esz.schedule_type_of_service;

CREATE TABLE esz.schedule_type_of_service (
	id serial4 NOT NULL, -- Уникальный идентификатор
	"name" varchar(1000) NULL, -- Полное наименование
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT schedule_type_of_service_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.schedule_type_of_service IS 'Справочник тип расписания предоставления услуги (общее/индив';

-- Column comments

COMMENT ON COLUMN esz.schedule_type_of_service.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.schedule_type_of_service."name" IS 'Полное наименование';
COMMENT ON COLUMN esz.schedule_type_of_service.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.schedule_type_of_service.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.schedule_type_of_service.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.schedule_type_of_service.is_archive IS 'Признак архивности';


-- esz.service_class_start_status definition

-- Drop table

-- DROP TABLE esz.service_class_start_status;

CREATE TABLE esz.service_class_start_status (
	id serial4 NOT NULL, -- Первичный ключ
	"name" varchar(255) NULL, -- Название статуса
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT service_class_start_status_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.service_class_start_status IS 'Состояние группы обучения по Активному долголетию (Московское долголетие), идет набор, сформирована, начато обучение и т.д.';

-- Column comments

COMMENT ON COLUMN esz.service_class_start_status.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.service_class_start_status."name" IS 'Название статуса';
COMMENT ON COLUMN esz.service_class_start_status.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.service_class_start_status.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.service_class_start_status.is_archive IS 'Признак архивности';


-- esz.service_class_status definition

-- Drop table

-- DROP TABLE esz.service_class_status;

CREATE TABLE esz.service_class_status (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(300) NULL, -- Наименование
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT service_class_status_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.service_class_status IS 'Статус класса';

-- Column comments

COMMENT ON COLUMN esz.service_class_status.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.service_class_status."name" IS 'Наименование';
COMMENT ON COLUMN esz.service_class_status.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.service_class_status.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.service_class_status.is_archive IS 'Признак архивности';


-- esz.service_class_teacher_rel definition

-- Drop table

-- DROP TABLE esz.service_class_teacher_rel;

CREATE TABLE esz.service_class_teacher_rel (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	service_class_id int4 NULL, -- Уникальный идентификатор класса
	teacher_id int4 NULL, -- Ссылка на учителя
	is_supervisor bool NULL, -- Классный руководитель
	CONSTRAINT service_class_teacher_rel_pkey PRIMARY KEY (id)
);
CREATE INDEX ind_service_class_teacher_rel_sc ON esz.service_class_teacher_rel USING btree (service_class_id);
CREATE INDEX ind_t ON esz.service_class_teacher_rel USING btree (teacher_id);
COMMENT ON TABLE esz.service_class_teacher_rel IS 'Связь таблиц service_class и teacher (устарело)';

-- Column comments

COMMENT ON COLUMN esz.service_class_teacher_rel.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.service_class_teacher_rel.service_class_id IS 'Уникальный идентификатор класса';
COMMENT ON COLUMN esz.service_class_teacher_rel.teacher_id IS 'Ссылка на учителя';
COMMENT ON COLUMN esz.service_class_teacher_rel.is_supervisor IS 'Классный руководитель';


-- esz.service_form definition

-- Drop table

-- DROP TABLE esz.service_form;

CREATE TABLE esz.service_form (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(200) NULL, -- Наименование
	CONSTRAINT service_form_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.service_form IS 'Форма занятий';

-- Column comments

COMMENT ON COLUMN esz.service_form.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.service_form."name" IS 'Наименование';


-- esz.shedule_period definition

-- Drop table

-- DROP TABLE esz.shedule_period;

CREATE TABLE esz.shedule_period (
	id serial4 NOT NULL, -- Уникальный идентификатор
	"name" varchar(1000) NULL, -- Наименование периода оказания услуги
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT shedule_period_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.shedule_period IS 'Справочник периодов оказания услуг';

-- Column comments

COMMENT ON COLUMN esz.shedule_period.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.shedule_period."name" IS 'Наименование периода оказания услуги';
COMMENT ON COLUMN esz.shedule_period.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.shedule_period.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.shedule_period.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.shedule_period.is_archive IS 'Признак архивности';


-- esz.social_support_measure definition

-- Drop table

-- DROP TABLE esz.social_support_measure;

CREATE TABLE esz.social_support_measure (
	id serial4 NOT NULL, -- Первичный ключ
	code varchar(200) NULL, -- Код меры социальной поддержки
	"name" varchar(500) NULL, -- Название меры социальной поддержки
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) DEFAULT now() NOT NULL, -- Дата последнего изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT social_support_measure_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.social_support_measure IS 'Меры социальной поддержки';

-- Column comments

COMMENT ON COLUMN esz.social_support_measure.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.social_support_measure.code IS 'Код меры социальной поддержки';
COMMENT ON COLUMN esz.social_support_measure."name" IS 'Название меры социальной поддержки';
COMMENT ON COLUMN esz.social_support_measure.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.social_support_measure.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.social_support_measure.is_archive IS 'Признак архивности';


-- esz.spell_dictionary definition

-- Drop table

-- DROP TABLE esz.spell_dictionary;

CREATE TABLE esz.spell_dictionary (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	word_text varchar(45) NULL, -- Слово
	hash_code int8 NULL, -- Хэш код
	CONSTRAINT spell_dictionary_pkey PRIMARY KEY (id)
);
CREATE UNIQUE INDEX hash_code_unique ON esz.spell_dictionary USING btree (hash_code);
CREATE UNIQUE INDEX word_text_unique ON esz.spell_dictionary USING btree (word_text);
COMMENT ON TABLE esz.spell_dictionary IS 'Словарь';

-- Column comments

COMMENT ON COLUMN esz.spell_dictionary.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.spell_dictionary.word_text IS 'Слово';
COMMENT ON COLUMN esz.spell_dictionary.hash_code IS 'Хэш код';


-- esz.sphinx_migration_data definition

-- Drop table

-- DROP TABLE esz.sphinx_migration_data;

CREATE TABLE esz.sphinx_migration_data (
	id serial4 NOT NULL, -- Первичный ключ
	script_name varchar(100) NOT NULL, -- Название скрипта
	node_name varchar(100) NOT NULL, -- Название ноды
	app_name varchar(100) NOT NULL, -- Название приложения
	date_create timestamp DEFAULT now() NOT NULL, -- Дата создания записи
	is_script_done bool DEFAULT false NOT NULL, -- Скрипт в рамках вывода выполнен на всех нодах
	date_change timestamp DEFAULT now() NOT NULL, -- Дата изменения записи
	CONSTRAINT sphinx_migration_data_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.sphinx_migration_data IS 'Сведения о выполненных скриптах миграции Sphinx';

-- Column comments

COMMENT ON COLUMN esz.sphinx_migration_data.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.sphinx_migration_data.script_name IS 'Название скрипта';
COMMENT ON COLUMN esz.sphinx_migration_data.node_name IS 'Название ноды';
COMMENT ON COLUMN esz.sphinx_migration_data.app_name IS 'Название приложения';
COMMENT ON COLUMN esz.sphinx_migration_data.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.sphinx_migration_data.is_script_done IS 'Скрипт в рамках вывода выполнен на всех нодах';
COMMENT ON COLUMN esz.sphinx_migration_data.date_change IS 'Дата изменения записи';


-- esz.sphinx_ranker definition

-- Drop table

-- DROP TABLE esz.sphinx_ranker;

CREATE TABLE esz.sphinx_ranker (
	id serial4 NOT NULL, -- Первичный ключ
	sphinx_index_id int4 NOT NULL, -- Индекс сфинкса
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) DEFAULT now() NOT NULL, -- Дата последнего изменения записи
	extend_entity_guid uuid DEFAULT gen_random_uuid() NOT NULL, -- Уникальный идентификатор сущности
	CONSTRAINT sphinx_ranker_pkey PRIMARY KEY (id)
);
CREATE INDEX ind_sphinx_ranker_extend_entity_guid ON esz.sphinx_ranker USING btree (extend_entity_guid);
CREATE INDEX ind_sphinx_ranker_sphinx_index_id ON esz.sphinx_ranker USING btree (sphinx_index_id);
COMMENT ON TABLE esz.sphinx_ranker IS 'Настройка ранжирования индекса Sphinx';

-- Column comments

COMMENT ON COLUMN esz.sphinx_ranker.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.sphinx_ranker.sphinx_index_id IS 'Индекс сфинкса';
COMMENT ON COLUMN esz.sphinx_ranker.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.sphinx_ranker.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.sphinx_ranker.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.sphinx_ranker.extend_entity_guid IS 'Уникальный идентификатор сущности';

-- Table Triggers

create trigger t_sphinx_ranker before
update
    on
    esz.sphinx_ranker for each row execute function esz.insert_current_timestamp();


-- esz.suspend_reason definition

-- Drop table

-- DROP TABLE esz.suspend_reason;

CREATE TABLE esz.suspend_reason (
	id serial4 NOT NULL, -- Первичный ключ
	"name" varchar(200) NULL, -- Названте причины приостановки заявления
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания сущности
	date_change timestamp(0) NULL, -- Последняя дата изменения сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT suspend_reason_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.suspend_reason IS 'Причина приостановки';

-- Column comments

COMMENT ON COLUMN esz.suspend_reason.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.suspend_reason."name" IS 'Названте причины приостановки заявления';
COMMENT ON COLUMN esz.suspend_reason.date_create IS 'Дата создания сущности';
COMMENT ON COLUMN esz.suspend_reason.date_change IS 'Последняя дата изменения сущности';
COMMENT ON COLUMN esz.suspend_reason.is_archive IS 'Признак архивности';


-- esz.system_check_fix definition

-- Drop table

-- DROP TABLE esz.system_check_fix;

CREATE TABLE esz.system_check_fix (
	id serial4 NOT NULL, -- Первичный ключ
	fix_name varchar(100) NULL, -- Название фикса
	file_data_id int4 NULL, -- Ссылка на eszFileStorage.FileData
	user_id int4 NULL, -- Пользователь, который создал фикс
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT system_check_fix_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.system_check_fix IS 'Таблица содержит записи по фиксированию MD5 хешей в релизах системы';

-- Column comments

COMMENT ON COLUMN esz.system_check_fix.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.system_check_fix.fix_name IS 'Название фикса';
COMMENT ON COLUMN esz.system_check_fix.file_data_id IS 'Ссылка на eszFileStorage.FileData';
COMMENT ON COLUMN esz.system_check_fix.user_id IS 'Пользователь, который создал фикс';
COMMENT ON COLUMN esz.system_check_fix.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.system_check_fix.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.system_check_fix.is_archive IS 'Признак архивности';


-- esz.system_property definition

-- Drop table

-- DROP TABLE esz.system_property;

CREATE TABLE esz.system_property (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(100) NULL, -- Название настройки
	value_text text NULL, -- Содержание настройки
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_start timestamp(0) NULL, -- Дата начала действия настройки
	date_end timestamp(0) NULL, -- Дата окончания действия настройки
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	CONSTRAINT system_property_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.system_property IS 'Системные настройки';

-- Column comments

COMMENT ON COLUMN esz.system_property.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.system_property."name" IS 'Название настройки';
COMMENT ON COLUMN esz.system_property.value_text IS 'Содержание настройки';
COMMENT ON COLUMN esz.system_property.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.system_property.date_start IS 'Дата начала действия настройки';
COMMENT ON COLUMN esz.system_property.date_end IS 'Дата окончания действия настройки';
COMMENT ON COLUMN esz.system_property.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.system_property.date_change IS 'Дата последнего изменения записи';


-- esz.teacher definition

-- Drop table

-- DROP TABLE esz.teacher;

CREATE TABLE esz.teacher (
	id serial4 NOT NULL, -- Идентификатор
	organization_id int4 NULL, -- Уникальный идентификатор
	first_name varchar(200) NULL, -- Имя
	last_name varchar(200) NULL, -- Фамилия
	middle_name varchar(200) NULL, -- Отчество
	date_of_birth timestamp(0) NULL, -- Дата рождения
	phone varchar(50) NULL, -- Телефон
	email varchar(200) NULL, -- Email
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	description varchar(1000) NULL, -- Комментарий
	weekends varchar(20) NULL, -- Выходные
	additional_info text NULL, -- Дополнительная информация
	external_uid varchar(100) NULL, -- Ключ во внешней системе
	is_contact_person bool NULL, -- Контактное лицо
	personal_hash int8 DEFAULT 0 NOT NULL, -- Хэш персоны
	date_sync timestamp(0) NOT NULL, -- Дата синхронизации
	external_system_id int4 NULL, -- Ссылка на внешнюю систему
	person_id int4 NULL, -- Идентификатор персоны
	CONSTRAINT teacher_pkey PRIMARY KEY (id)
);
CREATE INDEX ind_org ON esz.teacher USING btree (organization_id, is_archive);
CREATE INDEX ind_teacher_afio ON esz.teacher USING btree (last_name, first_name, middle_name);
CREATE INDEX ind_teacher_organization_id_external_uid ON esz.teacher USING btree (organization_id, external_uid);
COMMENT ON TABLE esz.teacher IS 'Преподаватель';

-- Column comments

COMMENT ON COLUMN esz.teacher.id IS 'Идентификатор';
COMMENT ON COLUMN esz.teacher.organization_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.teacher.first_name IS 'Имя';
COMMENT ON COLUMN esz.teacher.last_name IS 'Фамилия';
COMMENT ON COLUMN esz.teacher.middle_name IS 'Отчество';
COMMENT ON COLUMN esz.teacher.date_of_birth IS 'Дата рождения';
COMMENT ON COLUMN esz.teacher.phone IS 'Телефон';
COMMENT ON COLUMN esz.teacher.email IS 'Email';
COMMENT ON COLUMN esz.teacher.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.teacher.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.teacher.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.teacher.description IS 'Комментарий';
COMMENT ON COLUMN esz.teacher.weekends IS 'Выходные';
COMMENT ON COLUMN esz.teacher.additional_info IS 'Дополнительная информация';
COMMENT ON COLUMN esz.teacher.external_uid IS 'Ключ во внешней системе';
COMMENT ON COLUMN esz.teacher.is_contact_person IS 'Контактное лицо';
COMMENT ON COLUMN esz.teacher.personal_hash IS 'Хэш персоны';
COMMENT ON COLUMN esz.teacher.date_sync IS 'Дата синхронизации';
COMMENT ON COLUMN esz.teacher.external_system_id IS 'Ссылка на внешнюю систему';
COMMENT ON COLUMN esz.teacher.person_id IS 'Идентификатор персоны';


-- esz.teacher_discipline_rel definition

-- Drop table

-- DROP TABLE esz.teacher_discipline_rel;

CREATE TABLE esz.teacher_discipline_rel (
	discipline_id int4 NOT NULL, -- Идентификатор
	teacher_id int4 NOT NULL, -- Идентификатор
	CONSTRAINT teacher_discipline_rel_pkey PRIMARY KEY (discipline_id, teacher_id)
);
COMMENT ON TABLE esz.teacher_discipline_rel IS 'Связь преподавателей и дисциплин';

-- Column comments

COMMENT ON COLUMN esz.teacher_discipline_rel.discipline_id IS 'Идентификатор';
COMMENT ON COLUMN esz.teacher_discipline_rel.teacher_id IS 'Идентификатор';


-- esz.teacher_history definition

-- Drop table

-- DROP TABLE esz.teacher_history;

CREATE TABLE esz.teacher_history (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	organization_id int4 NULL, -- Уникальный идентификатор
	teacher_id int4 NULL, -- Уникальный идентификатор
	old_organization_id int4 NOT NULL, -- Уникальный идентификатор переносимой организации
	"date" timestamp(0) NOT NULL, -- Дата события
	CONSTRAINT teacher_history_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.teacher_history IS 'История преподавателя';

-- Column comments

COMMENT ON COLUMN esz.teacher_history.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.teacher_history.organization_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.teacher_history.teacher_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.teacher_history.old_organization_id IS 'Уникальный идентификатор переносимой организации';
COMMENT ON COLUMN esz.teacher_history."date" IS 'Дата события';


-- esz.training_group_status definition

-- Drop table

-- DROP TABLE esz.training_group_status;

CREATE TABLE esz.training_group_status (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(500) NULL, -- Наименование
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT training_group_status_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.training_group_status IS 'Справочник статусов наборов на обучение';

-- Column comments

COMMENT ON COLUMN esz.training_group_status.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.training_group_status."name" IS 'Наименование';
COMMENT ON COLUMN esz.training_group_status.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.training_group_status.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.training_group_status.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.training_group_status.is_archive IS 'Признак архивности';


-- esz.type_financing definition

-- Drop table

-- DROP TABLE esz.type_financing;

CREATE TABLE esz.type_financing (
	id serial4 NOT NULL, -- Уникальный идентификатор
	"name" varchar(1000) NULL, -- Полное наименование
	code varchar(3) NULL, -- Уникальный код типа финансирования услуг.
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT type_financing_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.type_financing IS 'Справочник типа финансирования услуг
бюджет/не бюджет/';

-- Column comments

COMMENT ON COLUMN esz.type_financing.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.type_financing."name" IS 'Полное наименование';
COMMENT ON COLUMN esz.type_financing.code IS 'Уникальный код типа финансирования услуг.';
COMMENT ON COLUMN esz.type_financing.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.type_financing.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.type_financing.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.type_financing.is_archive IS 'Признак архивности';


-- esz.type_issue_place definition

-- Drop table

-- DROP TABLE esz.type_issue_place;

CREATE TABLE esz.type_issue_place (
	id serial4 NOT NULL, -- Первичный ключ
	issue_place_name varchar(70) NULL, -- Название места выдачи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения
	CONSTRAINT type_issue_place_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.type_issue_place IS 'Тип места предоставления услуги';

-- Column comments

COMMENT ON COLUMN esz.type_issue_place.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.type_issue_place.issue_place_name IS 'Название места выдачи';
COMMENT ON COLUMN esz.type_issue_place.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.type_issue_place.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.type_issue_place.date_change IS 'Дата последнего изменения';


-- esz.type_of_attendance definition

-- Drop table

-- DROP TABLE esz.type_of_attendance;

CREATE TABLE esz.type_of_attendance (
	id serial4 NOT NULL, -- Первичный ключ
	attendance_name varchar(500) NULL, -- Название вида посещения
	CONSTRAINT type_of_attendance_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.type_of_attendance IS 'Вид посещения';

-- Column comments

COMMENT ON COLUMN esz.type_of_attendance.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.type_of_attendance.attendance_name IS 'Название вида посещения';


-- esz.type_union_catalog_services definition

-- Drop table

-- DROP TABLE esz.type_union_catalog_services;

CREATE TABLE esz.type_union_catalog_services (
	id serial4 NOT NULL, -- Уникальный идентификатор
	"name" varchar(1000) NULL, -- Полное наименование
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT type_union_catalog_services_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.type_union_catalog_services IS 'Справочник типов сущностей (шаблон/услуга)';

-- Column comments

COMMENT ON COLUMN esz.type_union_catalog_services.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.type_union_catalog_services."name" IS 'Полное наименование';
COMMENT ON COLUMN esz.type_union_catalog_services.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.type_union_catalog_services.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.type_union_catalog_services.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.type_union_catalog_services.is_archive IS 'Признак архивности';


-- esz.type_value_service definition

-- Drop table

-- DROP TABLE esz.type_value_service;

CREATE TABLE esz.type_value_service (
	id serial4 NOT NULL, -- Уникальный идентификатор
	"name" varchar(1000) NULL, -- Наименование
	code varchar(100) NULL, -- Код права
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT type_value_service_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.type_value_service IS 'Тип стоимости оказания услуг';

-- Column comments

COMMENT ON COLUMN esz.type_value_service.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.type_value_service."name" IS 'Наименование';
COMMENT ON COLUMN esz.type_value_service.code IS 'Код права';
COMMENT ON COLUMN esz.type_value_service.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.type_value_service.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.type_value_service.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.type_value_service.is_archive IS 'Признак архивности';


-- esz.types_of_repetition definition

-- Drop table

-- DROP TABLE esz.types_of_repetition;

CREATE TABLE esz.types_of_repetition (
	id serial4 NOT NULL, -- Уникальный идентификатор
	"name" varchar(1000) NULL, -- Полное наименование
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT types_of_repetition_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.types_of_repetition IS 'Справочник типов повторений';

-- Column comments

COMMENT ON COLUMN esz.types_of_repetition.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.types_of_repetition."name" IS 'Полное наименование';
COMMENT ON COLUMN esz.types_of_repetition.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.types_of_repetition.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.types_of_repetition.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.types_of_repetition.is_archive IS 'Признак архивности';


-- esz.union_catalog_services_hashtag_rel definition

-- Drop table

-- DROP TABLE esz.union_catalog_services_hashtag_rel;

CREATE TABLE esz.union_catalog_services_hashtag_rel (
	union_catalog_services_id int4 NOT NULL, -- Ссылка на идентификатор услуги
	hashtag_id int4 NOT NULL, -- Ссылка на идентификатор хештега
	CONSTRAINT union_catalog_services_hashtag_rel_pkey PRIMARY KEY (union_catalog_services_id, hashtag_id)
);
COMMENT ON TABLE esz.union_catalog_services_hashtag_rel IS 'Связь услуг с хештегами';

-- Column comments

COMMENT ON COLUMN esz.union_catalog_services_hashtag_rel.union_catalog_services_id IS 'Ссылка на идентификатор услуги';
COMMENT ON COLUMN esz.union_catalog_services_hashtag_rel.hashtag_id IS 'Ссылка на идентификатор хештега';


-- esz.union_catalog_services_ovz_code_rel definition

-- Drop table

-- DROP TABLE esz.union_catalog_services_ovz_code_rel;

CREATE TABLE esz.union_catalog_services_ovz_code_rel (
	union_catalog_services_id int4 NOT NULL, -- Ссылка на идентификатор услуги
	ovz_code_id int4 NOT NULL, -- Ссылка на идентификатор кода ОВЗ
	CONSTRAINT union_catalog_services_ovz_code_rel_pkey PRIMARY KEY (union_catalog_services_id, ovz_code_id)
);
COMMENT ON TABLE esz.union_catalog_services_ovz_code_rel IS 'Связь услуг с кодами ОВЗ';

-- Column comments

COMMENT ON COLUMN esz.union_catalog_services_ovz_code_rel.union_catalog_services_id IS 'Ссылка на идентификатор услуги';
COMMENT ON COLUMN esz.union_catalog_services_ovz_code_rel.ovz_code_id IS 'Ссылка на идентификатор кода ОВЗ';


-- esz.user_additional_parameters definition

-- Drop table

-- DROP TABLE esz.user_additional_parameters;

CREATE TABLE esz.user_additional_parameters (
	id serial4 NOT NULL, -- Уникальный идентификатор
	user_id int4 NOT NULL, -- Cсылка на таблицу пользователей
	territory_entity_id int4 NOT NULL, -- Cсылка на таблицу районов и округов
	css_org_id int4 NOT NULL, -- Cсылка на ЦСО пользователя
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT user_additional_parameters_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE esz.user_additional_parameters IS 'Дополнительные параметры пользователя';

-- Column comments

COMMENT ON COLUMN esz.user_additional_parameters.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.user_additional_parameters.user_id IS 'Cсылка на таблицу пользователей';
COMMENT ON COLUMN esz.user_additional_parameters.territory_entity_id IS 'Cсылка на таблицу районов и округов';
COMMENT ON COLUMN esz.user_additional_parameters.css_org_id IS 'Cсылка на ЦСО пользователя';
COMMENT ON COLUMN esz.user_additional_parameters.is_archive IS 'Признак архивности';


-- esz.user_manual definition

-- Drop table

-- DROP TABLE esz.user_manual;

CREATE TABLE esz.user_manual (
	id serial4 NOT NULL, -- Первичный ключ
	link varchar(1000) NULL, -- Путь к файлу в файловом хранилище
	file_user_name varchar(100) NULL, -- Название документа отображаемое пользователям
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	extend_entity_guid uuid DEFAULT gen_random_uuid() NOT NULL, -- Уникальный идентификатор сущности
	CONSTRAINT user_manual_pkey PRIMARY KEY (id)
);
CREATE INDEX ind_user_manual_extend_entity_guid ON esz.user_manual USING btree (extend_entity_guid);
COMMENT ON TABLE esz.user_manual IS 'Информации по файлам и ссылкам на их местоположение на жестком диске, содержащих инструкции по работе пользователей с Системой';

-- Column comments

COMMENT ON COLUMN esz.user_manual.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.user_manual.link IS 'Путь к файлу в файловом хранилище';
COMMENT ON COLUMN esz.user_manual.file_user_name IS 'Название документа отображаемое пользователям';
COMMENT ON COLUMN esz.user_manual.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.user_manual.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.user_manual.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.user_manual.extend_entity_guid IS 'Уникальный идентификатор сущности';


-- esz.working_calendar definition

-- Drop table

-- DROP TABLE esz.working_calendar;

CREATE TABLE esz.working_calendar (
	calendar_date timestamp(0) NOT NULL, -- Дата праздника или перенесенного рабочего дня
	date_create timestamp(0) NULL, -- Дата создания записи
	is_working bool DEFAULT false NOT NULL, -- Признак рабочего дня (0 - нерабочий день, 1 - рабочий день)
	CONSTRAINT working_calendar_pkey PRIMARY KEY (calendar_date)
);
COMMENT ON TABLE esz.working_calendar IS 'Календарь рабочих дней';

-- Column comments

COMMENT ON COLUMN esz.working_calendar.calendar_date IS 'Дата праздника или перенесенного рабочего дня';
COMMENT ON COLUMN esz.working_calendar.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.working_calendar.is_working IS 'Признак рабочего дня (0 - нерабочий день, 1 - рабочий день)';


-- esz.advertisement definition

-- Drop table

-- DROP TABLE esz.advertisement;

CREATE TABLE esz.advertisement (
	id serial4 NOT NULL, -- Первичный ключ
	topic varchar(255) NULL, -- Заголовок сообщения
	"text" text NULL, -- Текст сообщения
	plain_text text NULL, -- Текст сообщения без форматирования
	code varchar(12) NOT NULL, -- Код объявления в формате "К-<уникальный идентификатор записи объявления>"
	publication_status_id int4 NULL, -- Состояние публикации
	order_of_publication_id int4 NULL, -- Определяет порядок публикации
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	publication_date timestamp(0) NULL, -- Дата публикации
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	extend_entity_guid uuid DEFAULT gen_random_uuid() NOT NULL, -- Уникальный идентификатор сущности
	CONSTRAINT advertisement_pkey PRIMARY KEY (id),
	CONSTRAINT fk_advertisement_publication_status_id FOREIGN KEY (publication_status_id) REFERENCES esz.publication_status(id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX fk_advertisement_publication_status_id ON esz.advertisement USING btree (publication_status_id);
CREATE INDEX ind_advertisement_extend_entity_guid ON esz.advertisement USING btree (extend_entity_guid);
CREATE INDEX topic ON esz.advertisement USING gin (to_tsvector('russian'::regconfig, (((((COALESCE(topic, ''::character varying))::text || ' '::text) || COALESCE(plain_text, ''::text)) || ' '::text) || (code)::text)));
COMMENT ON TABLE esz.advertisement IS 'Записи объявлений для главной страницы АИС';

-- Column comments

COMMENT ON COLUMN esz.advertisement.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.advertisement.topic IS 'Заголовок сообщения';
COMMENT ON COLUMN esz.advertisement."text" IS 'Текст сообщения';
COMMENT ON COLUMN esz.advertisement.plain_text IS 'Текст сообщения без форматирования';
COMMENT ON COLUMN esz.advertisement.code IS 'Код объявления в формате "К-<уникальный идентификатор записи объявления>"';
COMMENT ON COLUMN esz.advertisement.publication_status_id IS 'Состояние публикации';
COMMENT ON COLUMN esz.advertisement.order_of_publication_id IS 'Определяет порядок публикации';
COMMENT ON COLUMN esz.advertisement.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.advertisement.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.advertisement.publication_date IS 'Дата публикации';
COMMENT ON COLUMN esz.advertisement.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.advertisement.extend_entity_guid IS 'Уникальный идентификатор сущности';

-- Table Triggers

create trigger t_advertisement before
update
    on
    esz.advertisement for each row execute function esz.insert_current_timestamp();


-- esz.candidate_restriction_type definition

-- Drop table

-- DROP TABLE esz.candidate_restriction_type;

CREATE TABLE esz.candidate_restriction_type (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(500) NULL, -- Наименование
	code varchar(50) NULL, -- Код
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_system_id int4 NULL, -- Идентификатор внешней системы
	external_uid varchar(36) NULL, -- Внешний идентификатор
	external_id varchar(100) NULL, -- Атрибут id из системы NSI3
	CONSTRAINT candidate_restriction_type_pkey PRIMARY KEY (id),
	CONSTRAINT fk_candidate_restriction_type_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_candidate_restriction_type_external_system ON esz.candidate_restriction_type USING btree (external_system_id);
COMMENT ON TABLE esz.candidate_restriction_type IS 'Тип ограничений по приему';

-- Column comments

COMMENT ON COLUMN esz.candidate_restriction_type.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.candidate_restriction_type."name" IS 'Наименование';
COMMENT ON COLUMN esz.candidate_restriction_type.code IS 'Код';
COMMENT ON COLUMN esz.candidate_restriction_type.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.candidate_restriction_type.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.candidate_restriction_type.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.candidate_restriction_type.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.candidate_restriction_type.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.candidate_restriction_type.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.candidate_restriction_type.external_id IS 'Атрибут id из системы NSI3';


-- esz.class_letter definition

-- Drop table

-- DROP TABLE esz.class_letter;

CREATE TABLE esz.class_letter (
	id serial4 NOT NULL, -- Первичный ключ
	letter_name varchar(255) NULL, -- Литера класса обучения
	is_archive bool NOT NULL, -- Признак архивности
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения
	external_system_id int4 NULL, -- Идентификатор внешней системы
	external_uid varchar(36) NULL, -- Внешний идентификатор
	CONSTRAINT class_letter_pkey PRIMARY KEY (id),
	CONSTRAINT fk_class_letter_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_class_letter_external_system ON esz.class_letter USING btree (external_system_id);
CREATE INDEX ind_class_letter_letter_name ON esz.class_letter USING btree (letter_name);
COMMENT ON TABLE esz.class_letter IS 'Буква класса';

-- Column comments

COMMENT ON COLUMN esz.class_letter.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.class_letter.letter_name IS 'Литера класса обучения';
COMMENT ON COLUMN esz.class_letter.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.class_letter.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.class_letter.date_change IS 'Дата последнего изменения';
COMMENT ON COLUMN esz.class_letter.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.class_letter.external_uid IS 'Внешний идентификатор';


-- esz.class_parallel definition

-- Drop table

-- DROP TABLE esz.class_parallel;

CREATE TABLE esz.class_parallel (
	id serial4 NOT NULL, -- Первичный ключ
	parallel_name varchar(255) NULL, -- Название параллели
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения
	external_system_id int4 NULL, -- Идентификатор внешней системы
	external_uid varchar(36) NULL, -- Внешний идентификатор
	external_id varchar(100) NULL, -- Атрибут id из системы NSI3
	CONSTRAINT class_parallel_pkey PRIMARY KEY (id),
	CONSTRAINT fk_class_parallel_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_class_parallel_external_system ON esz.class_parallel USING btree (external_system_id);
COMMENT ON TABLE esz.class_parallel IS 'Параллель класса';

-- Column comments

COMMENT ON COLUMN esz.class_parallel.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.class_parallel.parallel_name IS 'Название параллели';
COMMENT ON COLUMN esz.class_parallel.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.class_parallel.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.class_parallel.date_change IS 'Дата последнего изменения';
COMMENT ON COLUMN esz.class_parallel.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.class_parallel.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.class_parallel.external_id IS 'Атрибут id из системы NSI3';


-- esz.contract definition

-- Drop table

-- DROP TABLE esz.contract;

CREATE TABLE esz.contract (
	id serial4 NOT NULL, -- Первичный ключ
	contract_number varchar(100) NULL, -- Номер договора
	"comment" varchar(800) NULL, -- Комментарий к файлу
	rtshed_link varchar(800) NULL, -- Ссылка на файл договора в РЦХЭД
	external_system_id int4 NULL, -- Ссылка на внешнюю систему
	contract_status_id int4 NULL, -- Идентификатор статуса договора
	external_uid varchar(36) NULL, -- Уникальный идентификатор во внешней системе
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности записи
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего обновления записи
	request_id int4 NULL, -- Ссылка на Request
	contract_status_date timestamp(0) NULL, -- Дата подписания договора
	contract_decline_reason_id int4 NULL, -- Причина отклонения договора
	rtshed_uid uuid NULL, -- Uid файла договора в РЦХЭД
	rtshed_sig_link varchar(800) NULL, -- Ссылка на файл электронной подписи в РЦХЭД
	rtshed_sig_uid uuid NULL, -- Uid файла электронной подписи в РЦХЭД
	contract_status_change_date timestamp(0) NULL, -- Дата изменения статуса (подписания/расторжения/аннулирования) договора
	CONSTRAINT contract_pkey PRIMARY KEY (id),
	CONSTRAINT fk_contract_contract_decline_reason FOREIGN KEY (contract_decline_reason_id) REFERENCES esz.contract_decline_reason(id) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT fk_contract_contract_status FOREIGN KEY (contract_status_id) REFERENCES esz.contract_status(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_contract_contract_decline_reason ON esz.contract USING btree (contract_decline_reason_id);
CREATE INDEX fk_contract_contract_status ON esz.contract USING btree (contract_status_id);
CREATE INDEX ind_contract_contract_number ON esz.contract USING btree (contract_number);
CREATE INDEX ind_contract_request_id ON esz.contract USING btree (request_id);
CREATE INDEX ind_file_rtshed_file_hash ON esz.contract USING btree (external_uid);
COMMENT ON TABLE esz.contract IS 'Сведения по файлам, отправляемые в РЦХЭД';

-- Column comments

COMMENT ON COLUMN esz.contract.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.contract.contract_number IS 'Номер договора';
COMMENT ON COLUMN esz.contract."comment" IS 'Комментарий к файлу';
COMMENT ON COLUMN esz.contract.rtshed_link IS 'Ссылка на файл договора в РЦХЭД';
COMMENT ON COLUMN esz.contract.external_system_id IS 'Ссылка на внешнюю систему';
COMMENT ON COLUMN esz.contract.contract_status_id IS 'Идентификатор статуса договора';
COMMENT ON COLUMN esz.contract.external_uid IS 'Уникальный идентификатор во внешней системе';
COMMENT ON COLUMN esz.contract.is_archive IS 'Признак архивности записи';
COMMENT ON COLUMN esz.contract.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.contract.date_change IS 'Дата последнего обновления записи';
COMMENT ON COLUMN esz.contract.request_id IS 'Ссылка на Request';
COMMENT ON COLUMN esz.contract.contract_status_date IS 'Дата подписания договора';
COMMENT ON COLUMN esz.contract.contract_decline_reason_id IS 'Причина отклонения договора';
COMMENT ON COLUMN esz.contract.rtshed_uid IS 'Uid файла договора в РЦХЭД';
COMMENT ON COLUMN esz.contract.rtshed_sig_link IS 'Ссылка на файл электронной подписи в РЦХЭД';
COMMENT ON COLUMN esz.contract.rtshed_sig_uid IS 'Uid файла электронной подписи в РЦХЭД';
COMMENT ON COLUMN esz.contract.contract_status_change_date IS 'Дата изменения статуса (подписания/расторжения/аннулирования) договора';

-- Table Triggers

create trigger t_contract before
update
    on
    esz.contract for each row execute function esz.insert_current_timestamp();


-- esz.document_type definition

-- Drop table

-- DROP TABLE esz.document_type;

CREATE TABLE esz.document_type (
	id serial4 NOT NULL, -- Уникальный идентификатор
	"name" varchar(1000) NULL, -- Полное наименование
	for_personal_data bool NULL, -- Документ с персональными данными
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	code_odopm int4 NULL, -- Код ОДОПМ
	external_system_id int4 NULL, -- Идентификатор внешней системы
	external_uid varchar(36) NULL, -- Внешний идентификатор
	external_id varchar(100) NULL, -- Атрибут id из системы NSI3
	CONSTRAINT document_type_pkey PRIMARY KEY (id),
	CONSTRAINT fk_document_type_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_document_type_external_system ON esz.document_type USING btree (external_system_id);
COMMENT ON TABLE esz.document_type IS 'Справочник типов документов персональныз данных';

-- Column comments

COMMENT ON COLUMN esz.document_type.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.document_type."name" IS 'Полное наименование';
COMMENT ON COLUMN esz.document_type.for_personal_data IS 'Документ с персональными данными';
COMMENT ON COLUMN esz.document_type.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.document_type.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.document_type.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.document_type.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.document_type.code_odopm IS 'Код ОДОПМ';
COMMENT ON COLUMN esz.document_type.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.document_type.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.document_type.external_id IS 'Атрибут id из системы NSI3';


-- esz.education_type definition

-- Drop table

-- DROP TABLE esz.education_type;

CREATE TABLE esz.education_type (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(150) NOT NULL, -- Наименование
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid int4 NULL, -- Идентификатор во внешней системе
	external_system_id int4 NULL, -- Идентификатор внешней системы
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата последнего изменения
	CONSTRAINT education_type_pkey PRIMARY KEY (id),
	CONSTRAINT fk_education_type_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_education_type_external_system ON esz.education_type USING btree (external_system_id);
COMMENT ON TABLE esz.education_type IS 'Вид образования';

-- Column comments

COMMENT ON COLUMN esz.education_type.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.education_type."name" IS 'Наименование';
COMMENT ON COLUMN esz.education_type.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.education_type.external_uid IS 'Идентификатор во внешней системе';
COMMENT ON COLUMN esz.education_type.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.education_type.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.education_type.date_change IS 'Дата последнего изменения';


-- esz.external_system_response_type definition

-- Drop table

-- DROP TABLE esz.external_system_response_type;

CREATE TABLE esz.external_system_response_type (
	id serial4 NOT NULL, -- Первичный ключ
	response_type_name varchar(200) NULL, -- Название статуса
	external_system_id int4 NOT NULL, -- Ссылка на тип внемшней системы
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	days_to_expire int4 NULL, -- Период истечения срока актуальности статусов, в днях
	CONSTRAINT external_system_response_type_pkey PRIMARY KEY (id),
	CONSTRAINT fk_ext_sys_resp_type_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX fk_ext_sys_resp_type_external_system ON esz.external_system_response_type USING btree (external_system_id);
COMMENT ON TABLE esz.external_system_response_type IS 'Типы ответов от внешних систем';

-- Column comments

COMMENT ON COLUMN esz.external_system_response_type.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.external_system_response_type.response_type_name IS 'Название статуса';
COMMENT ON COLUMN esz.external_system_response_type.external_system_id IS 'Ссылка на тип внемшней системы';
COMMENT ON COLUMN esz.external_system_response_type.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.external_system_response_type.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.external_system_response_type.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.external_system_response_type.days_to_expire IS 'Период истечения срока актуальности статусов, в днях';

-- Table Triggers

create trigger t_external_system_response_type before
update
    on
    esz.external_system_response_type for each row execute function esz.insert_current_timestamp();


-- esz.faq definition

-- Drop table

-- DROP TABLE esz.faq;

CREATE TABLE esz.faq (
	id serial4 NOT NULL, -- Идентификатор записи
	question varchar(3000) NULL, -- Вопрос
	answer varchar(3000) NULL, -- Ответ
	question_type_id int4 NOT NULL, -- Идентификатор категории вопроса
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего редактирования записи
	is_archive bool NOT NULL, -- Признак архивности
	answer_text varchar(3000) NULL, -- Ответ без разметки
	extend_entity_guid uuid DEFAULT gen_random_uuid() NOT NULL, -- Уникальный идентификатор сущности
	CONSTRAINT faq_pkey PRIMARY KEY (id),
	CONSTRAINT fk_faq_question_type FOREIGN KEY (question_type_id) REFERENCES esz.question_type(id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX fk_faq_question_type ON esz.faq USING btree (question_type_id);
CREATE INDEX ind_faq_extend_entity_guid ON esz.faq USING btree (extend_entity_guid);
CREATE INDEX question ON esz.faq USING gin (to_tsvector('russian'::regconfig, (((COALESCE(question, ''::character varying))::text || ' '::text) || (COALESCE(answer, ''::character varying))::text)));
COMMENT ON TABLE esz.faq IS 'таблица записей часто задаваемых вопросов и ответов на них';

-- Column comments

COMMENT ON COLUMN esz.faq.id IS 'Идентификатор записи';
COMMENT ON COLUMN esz.faq.question IS 'Вопрос';
COMMENT ON COLUMN esz.faq.answer IS 'Ответ';
COMMENT ON COLUMN esz.faq.question_type_id IS 'Идентификатор категории вопроса';
COMMENT ON COLUMN esz.faq.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.faq.date_change IS 'Дата последнего редактирования записи';
COMMENT ON COLUMN esz.faq.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.faq.answer_text IS 'Ответ без разметки';
COMMENT ON COLUMN esz.faq.extend_entity_guid IS 'Уникальный идентификатор сущности';


-- esz.favorite_object definition

-- Drop table

-- DROP TABLE esz.favorite_object;

CREATE TABLE esz.favorite_object (
	id serial4 NOT NULL, -- Первичный ключ
	"comment" varchar(1000) NULL, -- Задаваемое пользователем описание (комментарий)
	user_id int4 NULL, -- Идентификатор пользователя, добавившего объект в избранное
	entity_id int4 NULL, -- Идентификатор объекта добавленного в избранное
	entity_type_id int4 NULL, -- Тип объекта. Типы определены в таблице EntityType
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT favorite_object_pkey PRIMARY KEY (id),
	CONSTRAINT fk_favorite_object_entity_type FOREIGN KEY (entity_type_id) REFERENCES esz.entity_type(id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX comment ON esz.favorite_object USING gin (to_tsvector('russian'::regconfig, (comment)::text));
CREATE INDEX fk_favorite_object_entity_type ON esz.favorite_object USING btree (entity_type_id);
COMMENT ON TABLE esz.favorite_object IS 'Объекты, добавленные в "Избранное"';

-- Column comments

COMMENT ON COLUMN esz.favorite_object.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.favorite_object."comment" IS 'Задаваемое пользователем описание (комментарий)';
COMMENT ON COLUMN esz.favorite_object.user_id IS 'Идентификатор пользователя, добавившего объект в избранное';
COMMENT ON COLUMN esz.favorite_object.entity_id IS 'Идентификатор объекта добавленного в избранное';
COMMENT ON COLUMN esz.favorite_object.entity_type_id IS 'Тип объекта. Типы определены в таблице EntityType';
COMMENT ON COLUMN esz.favorite_object.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.favorite_object.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.favorite_object.is_archive IS 'Признак архивности';


-- esz.feedback definition

-- Drop table

-- DROP TABLE esz.feedback;

CREATE TABLE esz.feedback (
	id serial4 NOT NULL, -- Первичный ключ
	request_id int4 NOT NULL, -- Идентификатор заявления в ЕСЗ
	feedback_owner_type_id int4 NOT NULL, -- Тип пользователя, оставившего отзыв
	contingent_guid uuid NOT NULL, -- Идентификатор пользователя (оставившего отзыв) в МЭШ.Контингент
	rating int4 NOT NULL, -- Рейтинг от 1 до 5
	"text" varchar(1000) NULL, -- Текст отзыва
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT feedback_pkey PRIMARY KEY (id),
	CONSTRAINT fk_feedback_owner_type FOREIGN KEY (feedback_owner_type_id) REFERENCES esz.feedback_owner_type(id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX fk_feedback_owner_type ON esz.feedback USING btree (feedback_owner_type_id);
CREATE INDEX idx_feedback_search ON esz.feedback USING btree (request_id, contingent_guid);
COMMENT ON TABLE esz.feedback IS 'Отзывы на услуги от Цифрового репетитора';

-- Column comments

COMMENT ON COLUMN esz.feedback.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.feedback.request_id IS 'Идентификатор заявления в ЕСЗ';
COMMENT ON COLUMN esz.feedback.feedback_owner_type_id IS 'Тип пользователя, оставившего отзыв';
COMMENT ON COLUMN esz.feedback.contingent_guid IS 'Идентификатор пользователя (оставившего отзыв) в МЭШ.Контингент';
COMMENT ON COLUMN esz.feedback.rating IS 'Рейтинг от 1 до 5';
COMMENT ON COLUMN esz.feedback."text" IS 'Текст отзыва';
COMMENT ON COLUMN esz.feedback.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.feedback.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.feedback.is_archive IS 'Признак архивности';

-- Table Triggers

create trigger t_feedback before
update
    on
    esz.feedback for each row execute function esz.insert_current_timestamp();


-- esz.filter_access_action_rel definition

-- Drop table

-- DROP TABLE esz.filter_access_action_rel;

CREATE TABLE esz.filter_access_action_rel (
	filter_id int4 NOT NULL, -- Идентификатор фильтра
	access_action_id int4 NOT NULL, -- Идентификатор стандартного действия пользователя при работе с объектами
	access_object_id int4 NOT NULL, -- Идентификатор объекта (экранной формы), в отношении которого пользователь может стандартные действия
	CONSTRAINT filter_access_action_rel_pkey PRIMARY KEY (filter_id, access_action_id, access_object_id),
	CONSTRAINT fk_filter_filter_access_action_rel FOREIGN KEY (filter_id) REFERENCES esz."filter"(id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX fk_filter_filter_access_action_rel ON esz.filter_access_action_rel USING btree (filter_id);
COMMENT ON TABLE esz.filter_access_action_rel IS 'Промежуточная таблица для множественных связей таблицы Filter со стандартными правами доступа пользователей к объекам (экранные формы)';

-- Column comments

COMMENT ON COLUMN esz.filter_access_action_rel.filter_id IS 'Идентификатор фильтра';
COMMENT ON COLUMN esz.filter_access_action_rel.access_action_id IS 'Идентификатор стандартного действия пользователя при работе с объектами';
COMMENT ON COLUMN esz.filter_access_action_rel.access_object_id IS 'Идентификатор объекта (экранной формы), в отношении которого пользователь может стандартные действия';


-- esz.filter_general_access_rel definition

-- Drop table

-- DROP TABLE esz.filter_general_access_rel;

CREATE TABLE esz.filter_general_access_rel (
	filter_id int4 NOT NULL, -- Идентификатор фильтра
	general_access_id int4 NOT NULL, -- Идентификатор общего правва, не привязанного к объекту
	CONSTRAINT filter_general_access_rel_pkey PRIMARY KEY (filter_id, general_access_id),
	CONSTRAINT fk_filter_filter_general_access_rel FOREIGN KEY (filter_id) REFERENCES esz."filter"(id) ON DELETE CASCADE ON UPDATE CASCADE
);
COMMENT ON TABLE esz.filter_general_access_rel IS 'Промежуточная таблица для множественных связей таблицы Filter с общими правами доступа';

-- Column comments

COMMENT ON COLUMN esz.filter_general_access_rel.filter_id IS 'Идентификатор фильтра';
COMMENT ON COLUMN esz.filter_general_access_rel.general_access_id IS 'Идентификатор общего правва, не привязанного к объекту';


-- esz.filter_role_rel definition

-- Drop table

-- DROP TABLE esz.filter_role_rel;

CREATE TABLE esz.filter_role_rel (
	role_id int4 NOT NULL, -- Идентификатор роли
	filter_id int4 NOT NULL, -- Идентификатор фильта
	CONSTRAINT filter_role_rel_pkey PRIMARY KEY (role_id, filter_id),
	CONSTRAINT fk_filter_filter_role_rel FOREIGN KEY (filter_id) REFERENCES esz."filter"(id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX fk_filter_filter_role_rel ON esz.filter_role_rel USING btree (filter_id);
COMMENT ON TABLE esz.filter_role_rel IS 'Промежуточная таблица для множественных связей таблицы Filter со справочником ролей';

-- Column comments

COMMENT ON COLUMN esz.filter_role_rel.role_id IS 'Идентификатор роли';
COMMENT ON COLUMN esz.filter_role_rel.filter_id IS 'Идентификатор фильта';


-- esz.general_classificator_eku definition

-- Drop table

-- DROP TABLE esz.general_classificator_eku;

CREATE TABLE esz.general_classificator_eku (
	id serial4 NOT NULL, -- Уникальный идентификатор
	parent_id int4 NULL, -- Уникальный идентификатор
	code varchar(200) NULL, -- Код
	"name" varchar(1000) NULL, -- Полное наименование
	description varchar(1000) NULL, -- Описание
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(100) NULL, -- Внешний идентификатор
	classificator_status_id int4 NULL, -- Идентификатор статуса
	external_system_id int4 NULL, -- Идентификатор внешней системы
	extend_entity_guid uuid DEFAULT gen_random_uuid() NOT NULL, -- Уникальный идентификатор сущности
	CONSTRAINT general_classificator_eku_pkey PRIMARY KEY (id),
	CONSTRAINT fk_general_classificator_eku_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT fk_general_classifier_parent_child FOREIGN KEY (parent_id) REFERENCES esz.general_classificator_eku(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_general_classificator_eku_external_system ON esz.general_classificator_eku USING btree (external_system_id);
CREATE INDEX ind_general_classificator_eku_extend_entity_guid ON esz.general_classificator_eku USING btree (extend_entity_guid);
CREATE INDEX ind_general_classificator_eku_name ON esz.general_classificator_eku USING btree (name);
CREATE INDEX ind_general_classificator_eku_tree ON esz.general_classificator_eku USING btree (parent_id);
COMMENT ON TABLE esz.general_classificator_eku IS 'Классификатор направлений дополнительного образования';

-- Column comments

COMMENT ON COLUMN esz.general_classificator_eku.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.general_classificator_eku.parent_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.general_classificator_eku.code IS 'Код';
COMMENT ON COLUMN esz.general_classificator_eku."name" IS 'Полное наименование';
COMMENT ON COLUMN esz.general_classificator_eku.description IS 'Описание';
COMMENT ON COLUMN esz.general_classificator_eku.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.general_classificator_eku.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.general_classificator_eku.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.general_classificator_eku.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.general_classificator_eku.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.general_classificator_eku.classificator_status_id IS 'Идентификатор статуса';
COMMENT ON COLUMN esz.general_classificator_eku.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.general_classificator_eku.extend_entity_guid IS 'Уникальный идентификатор сущности';


-- esz.logging_type definition

-- Drop table

-- DROP TABLE esz.logging_type;

CREATE TABLE esz.logging_type (
	id serial4 NOT NULL, -- Уникальный идентификатор
	"name" varchar(1000) NULL, -- Полное наименование
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(100) NULL, -- Внешний идентификатор
	is_logging_on bool DEFAULT true NULL, -- Признак логирования
	external_system_id int4 NULL, -- Ссылка на внешнюю систему
	CONSTRAINT logging_type_pkey PRIMARY KEY (id),
	CONSTRAINT fk_logging_type_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_logging_type_external_system ON esz.logging_type USING btree (external_system_id);
COMMENT ON TABLE esz.logging_type IS 'Типы операций для логирования';

-- Column comments

COMMENT ON COLUMN esz.logging_type.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.logging_type."name" IS 'Полное наименование';
COMMENT ON COLUMN esz.logging_type.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.logging_type.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.logging_type.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.logging_type.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.logging_type.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.logging_type.is_logging_on IS 'Признак логирования';
COMMENT ON COLUMN esz.logging_type.external_system_id IS 'Ссылка на внешнюю систему';


-- esz.menu_settings definition

-- Drop table

-- DROP TABLE esz.menu_settings;

CREATE TABLE esz.menu_settings (
	id serial4 NOT NULL, -- Идентификатор записи
	menu_name varchar(800) NULL, -- Название пункта меню
	menu_link varchar(800) NULL, -- Ссылка пункта меню
	parent_id int4 NULL, -- Идентификатор родительского элемента
	object_position int4 NULL, -- Порядковый номер
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего редактирования записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT menu_settings_pkey PRIMARY KEY (id),
	CONSTRAINT fk_menu_settings FOREIGN KEY (parent_id) REFERENCES esz.menu_settings(id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX fk_menu_settings ON esz.menu_settings USING btree (parent_id);
COMMENT ON TABLE esz.menu_settings IS 'таблица ранжирования пунктов главного меню';

-- Column comments

COMMENT ON COLUMN esz.menu_settings.id IS 'Идентификатор записи';
COMMENT ON COLUMN esz.menu_settings.menu_name IS 'Название пункта меню';
COMMENT ON COLUMN esz.menu_settings.menu_link IS 'Ссылка пункта меню';
COMMENT ON COLUMN esz.menu_settings.parent_id IS 'Идентификатор родительского элемента';
COMMENT ON COLUMN esz.menu_settings.object_position IS 'Порядковый номер';
COMMENT ON COLUMN esz.menu_settings.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.menu_settings.date_change IS 'Дата последнего редактирования записи';
COMMENT ON COLUMN esz.menu_settings.is_archive IS 'Признак архивности';


-- esz.metro_line definition

-- Drop table

-- DROP TABLE esz.metro_line;

CREATE TABLE esz.metro_line (
	id serial4 NOT NULL, -- Уникальный идентификатор
	line_code varchar(3) NULL, -- Уникальный код линии московского метрополитена, состоящий из 3 (трёх) десятичных разрядов. Кодовый диапазон: 401-450
	"name" varchar(1000) NULL, -- Полное нормативное наименование линии московского метрополитена на русском языке.
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(100) NULL, -- Внешний идентификатор
	external_system_id int4 NULL, -- Идентификатор внешней системы
	external_id int4 NULL, -- Атрибут id из системы NSI3
	CONSTRAINT metro_line_pkey PRIMARY KEY (id),
	CONSTRAINT fk_metro_line_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_metro_line_external_system ON esz.metro_line USING btree (external_system_id);
COMMENT ON TABLE esz.metro_line IS 'Справочник линий московского метрополитена
';

-- Column comments

COMMENT ON COLUMN esz.metro_line.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.metro_line.line_code IS 'Уникальный код линии московского метрополитена, состоящий из 3 (трёх) десятичных разрядов. Кодовый диапазон: 401-450';
COMMENT ON COLUMN esz.metro_line."name" IS 'Полное нормативное наименование линии московского метрополитена на русском языке.';
COMMENT ON COLUMN esz.metro_line.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.metro_line.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.metro_line.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.metro_line.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.metro_line.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.metro_line.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.metro_line.external_id IS 'Атрибут id из системы NSI3';


-- esz.metro_station definition

-- Drop table

-- DROP TABLE esz.metro_station;

CREATE TABLE esz.metro_station (
	id serial4 NOT NULL, -- Уникальный идентификатор
	metro_line_id int4 NULL, -- Уникальный идентификатор
	code varchar(6) NULL, -- Уникальный код станции метро (вестибюля станции метро), состоящий из 6 (шести) десятичных разрядов. Кодовый диапазон: 400001-420000. Код вида XXXXX0 означает, что в данной позиции Справочника представлена станция. Код вида XXXXXY, где Y?0, означает, что в
	"name" varchar(1000) NULL, -- Полное наименование станции метро (вестибюля станции метро).
	status bool NULL, -- Статус объекта учета: «true» – действующий; «false» – строящийся.
	is_it_vestibule bool NULL, -- Признак, позволяющий определить (в дополнении к соответствующей информации, закодированной в поле MStationCode) тип объекта учета: «true» – вестибюль; «false» – станция.
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(100) NULL, -- Внешний идентификатор
	ekis_id varchar(50) NULL, -- Идентификатор в EKIS (устарел)
	external_system_id int4 NULL, -- Идентификатор внешней системы
	latitude varchar(36) NULL, -- Ширина
	longitude varchar(36) NULL, -- Долгота
	external_id varchar(100) NULL, -- Атрибут id из системы NSI3
	CONSTRAINT metro_station_pkey PRIMARY KEY (id),
	CONSTRAINT fk_m_line_code FOREIGN KEY (metro_line_id) REFERENCES esz.metro_line(id) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT fk_metro_station_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_m_line_code ON esz.metro_station USING btree (metro_line_id);
CREATE INDEX fk_metro_station_external_system ON esz.metro_station USING btree (external_system_id);
CREATE INDEX metro_station_code_idx ON esz.metro_station USING btree (code);
COMMENT ON TABLE esz.metro_station IS 'Справочник станций и вестибюлей московского метрополитена';

-- Column comments

COMMENT ON COLUMN esz.metro_station.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.metro_station.metro_line_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.metro_station.code IS 'Уникальный код станции метро (вестибюля станции метро), состоящий из 6 (шести) десятичных разрядов. Кодовый диапазон: 400001-420000. Код вида XXXXX0 означает, что в данной позиции Справочника представлена станция. Код вида XXXXXY, где Y?0, означает, что в';
COMMENT ON COLUMN esz.metro_station."name" IS 'Полное наименование станции метро (вестибюля станции метро).';
COMMENT ON COLUMN esz.metro_station.status IS 'Статус объекта учета: «true» – действующий; «false» – строящийся.';
COMMENT ON COLUMN esz.metro_station.is_it_vestibule IS 'Признак, позволяющий определить (в дополнении к соответствующей информации, закодированной в поле MStationCode) тип объекта учета: «true» – вестибюль; «false» – станция.';
COMMENT ON COLUMN esz.metro_station.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.metro_station.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.metro_station.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.metro_station.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.metro_station.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.metro_station.ekis_id IS 'Идентификатор в EKIS (устарел)';
COMMENT ON COLUMN esz.metro_station.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.metro_station.latitude IS 'Ширина';
COMMENT ON COLUMN esz.metro_station.longitude IS 'Долгота';
COMMENT ON COLUMN esz.metro_station.external_id IS 'Атрибут id из системы NSI3';


-- esz.moscow_registration definition

-- Drop table

-- DROP TABLE esz.moscow_registration;

CREATE TABLE esz.moscow_registration (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(100) NULL, -- Наименование
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_system_id int4 NULL, -- Идентификатор внешней системы
	external_uid varchar(36) NULL, -- Внешний идентификатор
	CONSTRAINT moscow_registration_pkey PRIMARY KEY (id),
	CONSTRAINT fk_moscow_registration_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_moscow_registration_external_system ON esz.moscow_registration USING btree (external_system_id);
COMMENT ON TABLE esz.moscow_registration IS 'Тип регистрации в г. Москве (по месту жительства, по месту п';

-- Column comments

COMMENT ON COLUMN esz.moscow_registration.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.moscow_registration."name" IS 'Наименование';
COMMENT ON COLUMN esz.moscow_registration.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.moscow_registration.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.moscow_registration.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.moscow_registration.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.moscow_registration.external_uid IS 'Внешний идентификатор';


-- esz.organization_status definition

-- Drop table

-- DROP TABLE esz.organization_status;

CREATE TABLE esz.organization_status (
	id int4 NOT NULL, -- Уникальный идентификатор
	"name" varchar(150) NOT NULL, -- Наименование
	external_uid varchar(100) NOT NULL, -- Ключ во внешней системе
	external_system_id int4 NULL, -- Ссылка на внешнюю систему
	is_archive bool DEFAULT false NOT NULL, -- Признак архивной записи
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	CONSTRAINT organization_status_pkey PRIMARY KEY (id),
	CONSTRAINT fk_organization_status_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_organization_status_external_system ON esz.organization_status USING btree (external_system_id);
COMMENT ON TABLE esz.organization_status IS 'Статус организации';

-- Column comments

COMMENT ON COLUMN esz.organization_status.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization_status."name" IS 'Наименование';
COMMENT ON COLUMN esz.organization_status.external_uid IS 'Ключ во внешней системе';
COMMENT ON COLUMN esz.organization_status.external_system_id IS 'Ссылка на внешнюю систему';
COMMENT ON COLUMN esz.organization_status.is_archive IS 'Признак архивной записи';
COMMENT ON COLUMN esz.organization_status.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.organization_status.date_change IS 'Дата изменения';

-- Table Triggers

create trigger t_organization_status before
update
    on
    esz.organization_status for each row execute function esz.insert_current_timestamp();


-- esz.organization_type_financing definition

-- Drop table

-- DROP TABLE esz.organization_type_financing;

CREATE TABLE esz.organization_type_financing (
	id serial4 NOT NULL, -- Первичный ключ
	type_financing_name varchar(150) NULL, -- Название типа финансирования
	external_system_id int4 NULL, -- Ссылка на внешнюю систему
	external_uid varchar(100) NULL, -- Ключ во внешней системе
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	CONSTRAINT organization_type_financing_pkey PRIMARY KEY (id),
	CONSTRAINT fk_organization_type_financing_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_organization_type_financing_external_system ON esz.organization_type_financing USING btree (external_system_id);
COMMENT ON TABLE esz.organization_type_financing IS 'Типы финансирования организаций';

-- Column comments

COMMENT ON COLUMN esz.organization_type_financing.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.organization_type_financing.type_financing_name IS 'Название типа финансирования';
COMMENT ON COLUMN esz.organization_type_financing.external_system_id IS 'Ссылка на внешнюю систему';
COMMENT ON COLUMN esz.organization_type_financing.external_uid IS 'Ключ во внешней системе';
COMMENT ON COLUMN esz.organization_type_financing.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.organization_type_financing.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.organization_type_financing.date_change IS 'Дата изменения записи';

-- Table Triggers

create trigger t_organization_type_financing before
update
    on
    esz.organization_type_financing for each row execute function esz.insert_current_timestamp();


-- esz.person definition

-- Drop table

-- DROP TABLE esz.person;

CREATE TABLE esz.person (
	id serial4 NOT NULL, -- Идентификатор
	first_name varchar(200) NULL, -- Имя
	last_name varchar(200) NULL, -- Фамилия
	middle_name varchar(200) NULL, -- Отчество
	birth_date timestamp(0) NULL, -- Дата рождения
	phone varchar(50) NULL, -- Телефон
	email varchar(200) NULL, -- Email
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	external_system_id int4 NULL, -- Ссылка на внешнюю систему
	external_uid varchar(100) NULL, -- Ключ во внешней системе
	is_contact_person bool NULL, -- Является контактным лицом
	extend_entity_guid uuid DEFAULT gen_random_uuid() NOT NULL, -- Уникальный идентификатор
	CONSTRAINT person_pkey PRIMARY KEY (id),
	CONSTRAINT fk_person_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_person_external_system ON esz.person USING btree (external_system_id);
CREATE INDEX ind_person_afio ON esz.person USING btree (last_name, first_name, middle_name, external_system_id);
CREATE INDEX ind_person_external_uid ON esz.person USING btree (external_uid);
COMMENT ON TABLE esz.person IS 'Персона';

-- Column comments

COMMENT ON COLUMN esz.person.id IS 'Идентификатор';
COMMENT ON COLUMN esz.person.first_name IS 'Имя';
COMMENT ON COLUMN esz.person.last_name IS 'Фамилия';
COMMENT ON COLUMN esz.person.middle_name IS 'Отчество';
COMMENT ON COLUMN esz.person.birth_date IS 'Дата рождения';
COMMENT ON COLUMN esz.person.phone IS 'Телефон';
COMMENT ON COLUMN esz.person.email IS 'Email';
COMMENT ON COLUMN esz.person.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.person.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.person.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.person.external_system_id IS 'Ссылка на внешнюю систему';
COMMENT ON COLUMN esz.person.external_uid IS 'Ключ во внешней системе';
COMMENT ON COLUMN esz.person.is_contact_person IS 'Является контактным лицом';
COMMENT ON COLUMN esz.person.extend_entity_guid IS 'Уникальный идентификатор';


-- esz.privilege definition

-- Drop table

-- DROP TABLE esz.privilege;

CREATE TABLE esz.privilege (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	rmsp_uid varchar(36) NULL, -- Внешний ключ
	privilege_category_id int4 NULL, -- Уникальный идентификатор категории
	privilege_start_date timestamp(0) NULL, -- Дата начала действия льготы
	privilege_end_date timestamp(0) NULL, -- Дата окончания действия льготы, если null - бессрочно
	date_create timestamp(0) NULL, -- Дата создания записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивной записи
	verification_date timestamp(0) NULL, -- Дата последней проверки в МЭШ.Льготники
	request_id int4 NULL, -- Уникальный идентификатор заявления
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	CONSTRAINT privilege_pkey PRIMARY KEY (id),
	CONSTRAINT fk_privilege_privilege_category FOREIGN KEY (privilege_category_id) REFERENCES esz.privilege_category(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_privilege_privilege_category ON esz.privilege USING btree (privilege_category_id);
CREATE INDEX ind_privilege_request_id ON esz.privilege USING btree (request_id);
COMMENT ON TABLE esz.privilege IS 'Льготы';

-- Column comments

COMMENT ON COLUMN esz.privilege.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.privilege.rmsp_uid IS 'Внешний ключ';
COMMENT ON COLUMN esz.privilege.privilege_category_id IS 'Уникальный идентификатор категории';
COMMENT ON COLUMN esz.privilege.privilege_start_date IS 'Дата начала действия льготы';
COMMENT ON COLUMN esz.privilege.privilege_end_date IS 'Дата окончания действия льготы, если null - бессрочно';
COMMENT ON COLUMN esz.privilege.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.privilege.is_archive IS 'Признак архивной записи';
COMMENT ON COLUMN esz.privilege.verification_date IS 'Дата последней проверки в МЭШ.Льготники';
COMMENT ON COLUMN esz.privilege.request_id IS 'Уникальный идентификатор заявления';
COMMENT ON COLUMN esz.privilege.date_change IS 'Дата последнего изменения записи';

-- Table Triggers

create trigger t_privilege before
update
    on
    esz.privilege for each row execute function esz.insert_current_timestamp();


-- esz.registry_office definition

-- Drop table

-- DROP TABLE esz.registry_office;

CREATE TABLE esz.registry_office (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(1000) NULL, -- Название органа ЗАГС
	code varchar(250) NULL, -- Код органа ЗАГС
	is_archive bool DEFAULT false NOT NULL, -- Признак архивной записи
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	external_system_id int4 NULL, -- Идентификатор внешней системы в таблице esz.ExrternalSystem
	external_uid varchar(36) NULL, -- Атрибут global_id из сервиса НСИ
	CONSTRAINT registry_office_pkey PRIMARY KEY (id),
	CONSTRAINT fk_registry_office_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_registry_office_external_system ON esz.registry_office USING btree (external_system_id);
COMMENT ON TABLE esz.registry_office IS 'Сведения об органах ЗАГС';

-- Column comments

COMMENT ON COLUMN esz.registry_office.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.registry_office."name" IS 'Название органа ЗАГС';
COMMENT ON COLUMN esz.registry_office.code IS 'Код органа ЗАГС';
COMMENT ON COLUMN esz.registry_office.is_archive IS 'Признак архивной записи';
COMMENT ON COLUMN esz.registry_office.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.registry_office.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.registry_office.external_system_id IS 'Идентификатор внешней системы в таблице esz.ExrternalSystem';
COMMENT ON COLUMN esz.registry_office.external_uid IS 'Атрибут global_id из сервиса НСИ';


-- esz.request_apply_reason definition

-- Drop table

-- DROP TABLE esz.request_apply_reason;

CREATE TABLE esz.request_apply_reason (
	id serial4 NOT NULL, -- Идентификатор записи
	"name" varchar(200) NULL, -- Наименование
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего редактирования записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(100) NULL, -- Внешний идентификатор
	external_id varchar(100) NULL, -- Атрибут id из системы NSI3
	external_system_id int4 NULL, -- Ссылка на тип внемшней системы
	CONSTRAINT request_apply_reason_pkey PRIMARY KEY (id),
	CONSTRAINT fk_request_apply_reason_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_request_apply_reason_external_system ON esz.request_apply_reason USING btree (external_system_id);
COMMENT ON TABLE esz.request_apply_reason IS 'Причина принятия заявления';

-- Column comments

COMMENT ON COLUMN esz.request_apply_reason.id IS 'Идентификатор записи';
COMMENT ON COLUMN esz.request_apply_reason."name" IS 'Наименование';
COMMENT ON COLUMN esz.request_apply_reason.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.request_apply_reason.date_change IS 'Дата последнего редактирования записи';
COMMENT ON COLUMN esz.request_apply_reason.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.request_apply_reason.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.request_apply_reason.external_id IS 'Атрибут id из системы NSI3';
COMMENT ON COLUMN esz.request_apply_reason.external_system_id IS 'Ссылка на тип внемшней системы';


-- esz.request_status definition

-- Drop table

-- DROP TABLE esz.request_status;

CREATE TABLE esz.request_status (
	id serial4 NOT NULL, -- Уникальный идентификатор
	"name" varchar(1000) NULL, -- Полное наименование
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(100) NULL, -- Глобальный идентификатор НСИ
	external_id varchar(100) NULL, -- Идентификатор в системе - источнике
	external_system_id int4 NULL, -- Идентификатор системы из справочника ExternalSystem
	CONSTRAINT request_status_pkey PRIMARY KEY (id),
	CONSTRAINT fk_request_status_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_request_status_external_system ON esz.request_status USING btree (external_system_id);
CREATE INDEX ind_request_status_external_uid ON esz.request_status USING btree (external_uid);
COMMENT ON TABLE esz.request_status IS 'Справочник статусов заявки';

-- Column comments

COMMENT ON COLUMN esz.request_status.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.request_status."name" IS 'Полное наименование';
COMMENT ON COLUMN esz.request_status.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.request_status.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.request_status.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.request_status.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.request_status.external_uid IS 'Глобальный идентификатор НСИ';
COMMENT ON COLUMN esz.request_status.external_id IS 'Идентификатор в системе - источнике';
COMMENT ON COLUMN esz.request_status.external_system_id IS 'Идентификатор системы из справочника ExternalSystem';


-- esz.service_status definition

-- Drop table

-- DROP TABLE esz.service_status;

CREATE TABLE esz.service_status (
	id serial4 NOT NULL, -- Уникальный идентификатор
	"name" varchar(1000) NULL, -- Наименование статуса
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	type_union_catalog_services_id int4 NULL, -- Уникальный идентификатор
	CONSTRAINT service_status_pkey PRIMARY KEY (id),
	CONSTRAINT fk_service_status_type FOREIGN KEY (type_union_catalog_services_id) REFERENCES esz.type_union_catalog_services(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_service_status_type ON esz.service_status USING btree (type_union_catalog_services_id);
COMMENT ON TABLE esz.service_status IS 'Статус услуги';

-- Column comments

COMMENT ON COLUMN esz.service_status.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.service_status."name" IS 'Наименование статуса';
COMMENT ON COLUMN esz.service_status.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.service_status.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.service_status.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.service_status.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.service_status.type_union_catalog_services_id IS 'Уникальный идентификатор';


-- esz.sex definition

-- Drop table

-- DROP TABLE esz.sex;

CREATE TABLE esz.sex (
	id serial4 NOT NULL, -- Уникальный идентификатор
	"name" varchar(1000) NULL, -- Полное наименование
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(100) NULL, -- Внешний идентификатор
	external_system_id int4 NULL, -- Идентификатор внешней системы
	external_id varchar(100) NULL, -- Id во внешней системе
	CONSTRAINT sex_pkey PRIMARY KEY (id),
	CONSTRAINT fk_sex_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_sex_external_system ON esz.sex USING btree (external_system_id);
COMMENT ON TABLE esz.sex IS 'Справочник гендерной принадлежности субъекта услуги';

-- Column comments

COMMENT ON COLUMN esz.sex.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.sex."name" IS 'Полное наименование';
COMMENT ON COLUMN esz.sex.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.sex.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.sex.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.sex.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.sex.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.sex.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.sex.external_id IS 'Id во внешней системе';


-- esz.signing_type definition

-- Drop table

-- DROP TABLE esz.signing_type;

CREATE TABLE esz.signing_type (
	id serial4 NOT NULL, -- Уникальный идентификатор
	"name" varchar(1000) NULL, -- Полное наименование
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(100) NULL, -- Внешний идентификатор
	external_system_id int4 NULL, -- Ссылка на внешнюю систему
	CONSTRAINT signing_type_pkey PRIMARY KEY (id),
	CONSTRAINT fk_signing_type_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_signing_type_external_system ON esz.signing_type USING btree (external_system_id);
COMMENT ON TABLE esz.signing_type IS 'Тип подписи';

-- Column comments

COMMENT ON COLUMN esz.signing_type.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.signing_type."name" IS 'Полное наименование';
COMMENT ON COLUMN esz.signing_type.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.signing_type.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.signing_type.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.signing_type.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.signing_type.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.signing_type.external_system_id IS 'Ссылка на внешнюю систему';


-- esz.sphinx_ranker_weight definition

-- Drop table

-- DROP TABLE esz.sphinx_ranker_weight;

CREATE TABLE esz.sphinx_ranker_weight (
	id serial4 NOT NULL, -- Первичный ключ
	sphinx_ranker_id int4 NOT NULL, -- Ссылка на SphinxRanker
	field_name varchar(255) NULL, -- Название поля в индексе
	field_weight int4 DEFAULT 10 NOT NULL, -- Вес поля
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) DEFAULT now() NOT NULL, -- Дата последнего изменения записи
	CONSTRAINT sphinx_ranker_weight_pkey PRIMARY KEY (id),
	CONSTRAINT fk_sphinx_ranker_sphinx_ranker_weight FOREIGN KEY (sphinx_ranker_id) REFERENCES esz.sphinx_ranker(id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX fk_sphinx_ranker_sphinx_ranker_weight ON esz.sphinx_ranker_weight USING btree (sphinx_ranker_id);
COMMENT ON TABLE esz.sphinx_ranker_weight IS 'Веса полей в ранкере';

-- Column comments

COMMENT ON COLUMN esz.sphinx_ranker_weight.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.sphinx_ranker_weight.sphinx_ranker_id IS 'Ссылка на SphinxRanker';
COMMENT ON COLUMN esz.sphinx_ranker_weight.field_name IS 'Название поля в индексе';
COMMENT ON COLUMN esz.sphinx_ranker_weight.field_weight IS 'Вес поля';
COMMENT ON COLUMN esz.sphinx_ranker_weight.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.sphinx_ranker_weight.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.sphinx_ranker_weight.date_change IS 'Дата последнего изменения записи';

-- Table Triggers

create trigger t_sphinx_ranker_weight before
update
    on
    esz.sphinx_ranker_weight for each row execute function esz.insert_current_timestamp();


-- esz.territory_entity definition

-- Drop table

-- DROP TABLE esz.territory_entity;

CREATE TABLE esz.territory_entity (
	id serial4 NOT NULL, -- Уникальный идентификатор
	territory_entity_id int4 NULL, -- Уникальный идентификатор
	ter_entity_code varchar(4) NULL, -- Уникальный код территориальной единицы (района / поселения или административного округа) города Москвы, состоящий из 4 (четырёх) десятичных разрядов.¶            Формула структуры кодового обозначения имеет вид:¶            XXYY, где:¶            -XX – по
	ter_entity_name varchar(500) NULL, -- Полное нормативное наименование территориальной единицы на русском языке.
	is_ao bool NULL, -- Дополнительный признак, указывающий на то, территориальная единица какого типа содержится в данной позиции Справочника: «true» - административный округ, «false» - район / поселение.
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(100) NULL, -- Внешний идентификатор
	short_name varchar(10) NULL, -- Краткое наименование
	external_system_id int4 NULL, -- Идентификатор внешней системы
	external_id int4 NULL, -- Атрибут id из системы NSI3
	CONSTRAINT territory_entity_pkey PRIMARY KEY (id),
	CONSTRAINT fk_ter_entity_code FOREIGN KEY (territory_entity_id) REFERENCES esz.territory_entity(id) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT fk_territory_entity_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_ter_entity_code ON esz.territory_entity USING btree (territory_entity_id);
CREATE INDEX fk_territory_entity_external_system ON esz.territory_entity USING btree (external_system_id);
COMMENT ON TABLE esz.territory_entity IS 'Справочник территориальных единиц города Москв';

-- Column comments

COMMENT ON COLUMN esz.territory_entity.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.territory_entity.territory_entity_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.territory_entity.ter_entity_code IS 'Уникальный код территориальной единицы (района / поселения или административного округа) города Москвы, состоящий из 4 (четырёх) десятичных разрядов.
            Формула структуры кодового обозначения имеет вид:
            XXYY, где:
            -XX – по';
COMMENT ON COLUMN esz.territory_entity.ter_entity_name IS 'Полное нормативное наименование территориальной единицы на русском языке.';
COMMENT ON COLUMN esz.territory_entity.is_ao IS 'Дополнительный признак, указывающий на то, территориальная единица какого типа содержится в данной позиции Справочника: «true» - административный округ, «false» - район / поселение.';
COMMENT ON COLUMN esz.territory_entity.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.territory_entity.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.territory_entity.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.territory_entity.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.territory_entity.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.territory_entity.short_name IS 'Краткое наименование';
COMMENT ON COLUMN esz.territory_entity.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.territory_entity.external_id IS 'Атрибут id из системы NSI3';


-- esz.type_representation definition

-- Drop table

-- DROP TABLE esz.type_representation;

CREATE TABLE esz.type_representation (
	id serial4 NOT NULL, -- Первичный ключ
	"name" varchar(70) NULL, -- Название типа представительства
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения
	external_system_id int4 NULL, -- Идентификатор внешней системы
	external_uid varchar(36) NULL, -- Внешний идентификатор
	external_id varchar(100) NULL, -- Атрибут id из системы NSI3
	CONSTRAINT type_representation_pkey PRIMARY KEY (id),
	CONSTRAINT fk_type_representation_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_type_representation_external_system ON esz.type_representation USING btree (external_system_id);
COMMENT ON TABLE esz.type_representation IS 'Тип представителя';

-- Column comments

COMMENT ON COLUMN esz.type_representation.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.type_representation."name" IS 'Название типа представительства';
COMMENT ON COLUMN esz.type_representation.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.type_representation.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.type_representation.date_change IS 'Дата последнего изменения';
COMMENT ON COLUMN esz.type_representation.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.type_representation.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.type_representation.external_id IS 'Атрибут id из системы NSI3';


-- esz.validation_state definition

-- Drop table

-- DROP TABLE esz.validation_state;

CREATE TABLE esz.validation_state (
	id serial4 NOT NULL, -- Первичный ключ
	"name" varchar(100) DEFAULT NULL::character varying NULL, -- Наименование статуса подтверждения
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(36) DEFAULT NULL::character varying NULL, -- Идентификатор сущности во внешней системе
	external_system_id int4 NULL, -- Идентификатор внешней системы в таблице esz.external_system
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	external_id varchar(100) DEFAULT NULL::character varying NULL, -- Идентификатор в системе NSI3
	CONSTRAINT validation_state_pkey PRIMARY KEY (id),
	CONSTRAINT fk_validation_state_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id)
);
COMMENT ON TABLE esz.validation_state IS 'Справочник статусов подтверждения';

-- Column comments

COMMENT ON COLUMN esz.validation_state.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.validation_state."name" IS 'Наименование статуса подтверждения';
COMMENT ON COLUMN esz.validation_state.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.validation_state.external_uid IS 'Идентификатор сущности во внешней системе';
COMMENT ON COLUMN esz.validation_state.external_system_id IS 'Идентификатор внешней системы в таблице esz.external_system';
COMMENT ON COLUMN esz.validation_state.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.validation_state.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.validation_state.external_id IS 'Идентификатор в системе NSI3';


-- esz.vedomstvo definition

-- Drop table

-- DROP TABLE esz.vedomstvo;

CREATE TABLE esz.vedomstvo (
	id serial4 NOT NULL, -- Уникальный идентификатор
	ex_body_code varchar(4) NULL, -- Уникальный код органа исполнительной власти города Москвы, состоящий из 4 (четырёх) десятичных разрядов и полностью соответствующий Общемосковскому классификатору органов исполнительной власти города Москвы (ОМК ОИВ).
	ex_body_full_name varchar(1000) NULL, -- Полное нормативное наименование органа исполнительной власти города Москвы на русском языке.
	ex_body_short_name varchar(200) NULL, -- Сокращенное наименование органа исполнительной власти города Москвы на русском языке.
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(100) NULL, -- Внешний идентификатор
	department_code varchar(36) NULL, -- Код департамента для МПГУ
	external_system_id int4 NULL, -- Идентификатор внешней системы
	CONSTRAINT vedomstvo_pkey PRIMARY KEY (id),
	CONSTRAINT fk_vedomstvo_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_vedomstvo_external_system ON esz.vedomstvo USING btree (external_system_id);
CREATE INDEX fts_ex_body_short_name ON esz.vedomstvo USING gin (to_tsvector('russian'::regconfig, (ex_body_short_name)::text));
COMMENT ON TABLE esz.vedomstvo IS 'Справочник органов исполнительной власти города Москвы';

-- Column comments

COMMENT ON COLUMN esz.vedomstvo.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.vedomstvo.ex_body_code IS 'Уникальный код органа исполнительной власти города Москвы, состоящий из 4 (четырёх) десятичных разрядов и полностью соответствующий Общемосковскому классификатору органов исполнительной власти города Москвы (ОМК ОИВ).';
COMMENT ON COLUMN esz.vedomstvo.ex_body_full_name IS 'Полное нормативное наименование органа исполнительной власти города Москвы на русском языке.';
COMMENT ON COLUMN esz.vedomstvo.ex_body_short_name IS 'Сокращенное наименование органа исполнительной власти города Москвы на русском языке.';
COMMENT ON COLUMN esz.vedomstvo.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.vedomstvo.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.vedomstvo.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.vedomstvo.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.vedomstvo.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.vedomstvo.department_code IS 'Код департамента для МПГУ';
COMMENT ON COLUMN esz.vedomstvo.external_system_id IS 'Идентификатор внешней системы';


-- esz.vedomstvo_founder definition

-- Drop table

-- DROP TABLE esz.vedomstvo_founder;

CREATE TABLE esz.vedomstvo_founder (
	id serial4 NOT NULL, -- Идентификатор
	hierarchy_name varchar(200) NULL, -- Содержимое поля Heirarchy в Organization
	creator_name varchar(200) NULL, -- Содержимое поля Creator в Organization
	vedomstvo_id int4 NOT NULL, -- Ссылка на департамент
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	CONSTRAINT vedomstvo_founder_pkey PRIMARY KEY (id),
	CONSTRAINT fk_vedomstvo_vedomstvo_founder FOREIGN KEY (vedomstvo_id) REFERENCES esz.vedomstvo(id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX fk_vedomstvo_vedomstvo_founder ON esz.vedomstvo_founder USING btree (vedomstvo_id);
COMMENT ON TABLE esz.vedomstvo_founder IS 'Сопоставления организаций с департаментами';

-- Column comments

COMMENT ON COLUMN esz.vedomstvo_founder.id IS 'Идентификатор';
COMMENT ON COLUMN esz.vedomstvo_founder.hierarchy_name IS 'Содержимое поля Heirarchy в Organization';
COMMENT ON COLUMN esz.vedomstvo_founder.creator_name IS 'Содержимое поля Creator в Organization';
COMMENT ON COLUMN esz.vedomstvo_founder.vedomstvo_id IS 'Ссылка на департамент';
COMMENT ON COLUMN esz.vedomstvo_founder.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.vedomstvo_founder.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.vedomstvo_founder.date_change IS 'Дата изменения';

-- Table Triggers

create trigger t_vedomstvo_founder before
update
    on
    esz.vedomstvo_founder for each row execute function esz.insert_current_timestamp();


-- esz.year_of_training definition

-- Drop table

-- DROP TABLE esz.year_of_training;

CREATE TABLE esz.year_of_training (
	id serial4 NOT NULL, -- Уникальный идентификатор
	"name" varchar(1000) NULL, -- Наименование
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(100) NULL, -- Внешний идентификатор
	code varchar(500) NULL, -- Код года обучения
	external_system_id int4 NULL, -- Идентификатор внешней системы
	external_id varchar(100) NULL, -- Атрибут id из системы NSI3
	date_start timestamp(0) NOT NULL, -- Время и дата начала учебного года
	date_end timestamp(0) NOT NULL, -- Время и дата окончания учебного года
	CONSTRAINT year_of_training_pkey PRIMARY KEY (id),
	CONSTRAINT fk_year_of_training_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_year_of_training_external_system ON esz.year_of_training USING btree (external_system_id);
COMMENT ON TABLE esz.year_of_training IS 'Справочник годов обучения';

-- Column comments

COMMENT ON COLUMN esz.year_of_training.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.year_of_training."name" IS 'Наименование';
COMMENT ON COLUMN esz.year_of_training.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.year_of_training.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.year_of_training.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.year_of_training.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.year_of_training.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.year_of_training.code IS 'Код года обучения';
COMMENT ON COLUMN esz.year_of_training.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.year_of_training.external_id IS 'Атрибут id из системы NSI3';
COMMENT ON COLUMN esz.year_of_training.date_start IS 'Время и дата начала учебного года';
COMMENT ON COLUMN esz.year_of_training.date_end IS 'Время и дата окончания учебного года';


-- esz.address definition

-- Drop table

-- DROP TABLE esz.address;

CREATE TABLE esz.address (
	id serial4 NOT NULL, -- Уникальный идентификатор
	territory_entity_id int4 NULL, -- Уникальный идентификатор
	full_address varchar(500) NULL, -- Адрес строкой
	name_city varchar(200) NULL, -- Наименование субъекта РФ
	code_city varchar(200) NULL, -- Код субъекта РФ
	name_settlement varchar(200) NULL, -- Наименование поселения
	code_settlement varchar(200) NULL, -- Код поселения
	name_village varchar(200) NULL, -- Наименование населенного пункта
	code_village varchar(200) NULL, -- Код населенного пункта
	name_street varchar(200) NULL, -- Наименование улицы
	ownership varchar(100) NULL, -- Номер владения
	building varchar(100) NULL, -- Номер здания
	housing varchar(100) NULL, -- Номер корпуса
	"structure" varchar(100) NULL, -- Номер строения
	facilities varchar(100) NULL, -- Номер сооружения
	unom varchar(20) NULL, -- Уникальный номер адреса в справочнике БТИ
	longitude numeric(38, 13) NULL, -- Долгота и широта (в десятичных градусах) точки, описывающей географическое местоположение здания (сооружения), в котором находится пункт. Система координат проекции: Moscow Coordinate System; проекция: Gauss_Kruger; центральный меридиан: 37,49830000; нача
	latitude numeric(38, 13) NULL, -- Долгота и широта (в десятичных градусах) точки, описывающей географическое местоположение здания (сооружения), в котором находится пункт. Система координат проекции: Moscow Coordinate System; проекция: Gauss_Kruger; центральный меридиан: 37,49830000; нача
	code_county varchar(200) NULL, -- Код мунициального округа
	name_county varchar(200) NULL, -- Название муниципального округа
	code_district varchar(200) NULL, -- Код муниципального района
	name_district varchar(200) NULL, -- Название муниципального района
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивной записи
	unad varchar(200) NULL, -- UNAD
	bti bool NULL, -- Код БТИ
	short_address varchar(300) NULL, -- Краткий адрес
	need_reindex int2 DEFAULT 1 NOT NULL, -- Признак переиндексации
	external_system_id int4 NULL, -- Идентификатор внешней системы
	external_uid varchar(36) NULL, -- Внешний идентификатор
	is_moscow_region bool NULL, -- Московский или не московский регион
	fias_house_guid uuid NULL, -- Guid адреса в системе Fias для немосковских адресов
	is_manual bool DEFAULT false NOT NULL, -- Адрес внесен вручную
	code_area varchar(200) NULL, -- Код района (территориальное деление)
	name_area varchar(200) NULL, -- Название района (территориальное деление)
	CONSTRAINT address_pkey PRIMARY KEY (id),
	CONSTRAINT fk_address_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT fk_terr_address FOREIGN KEY (territory_entity_id) REFERENCES esz.territory_entity(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX building_num ON esz.address USING btree (building);
CREATE INDEX fk_address_external_system ON esz.address USING btree (external_system_id);
CREATE INDEX fk_terr_address ON esz.address USING btree (territory_entity_id);
CREATE INDEX ind_dc_addr ON esz.address USING btree (date_change);
CREATE INDEX ind_entity_id ON esz.address USING btree (entity_id);
CREATE INDEX ind_unom ON esz.address USING btree (unom);
COMMENT ON TABLE esz.address IS 'Адрес';

-- Column comments

COMMENT ON COLUMN esz.address.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.address.territory_entity_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.address.full_address IS 'Адрес строкой';
COMMENT ON COLUMN esz.address.name_city IS 'Наименование субъекта РФ';
COMMENT ON COLUMN esz.address.code_city IS 'Код субъекта РФ';
COMMENT ON COLUMN esz.address.name_settlement IS 'Наименование поселения';
COMMENT ON COLUMN esz.address.code_settlement IS 'Код поселения';
COMMENT ON COLUMN esz.address.name_village IS 'Наименование населенного пункта';
COMMENT ON COLUMN esz.address.code_village IS 'Код населенного пункта';
COMMENT ON COLUMN esz.address.name_street IS 'Наименование улицы';
COMMENT ON COLUMN esz.address.ownership IS 'Номер владения';
COMMENT ON COLUMN esz.address.building IS 'Номер здания';
COMMENT ON COLUMN esz.address.housing IS 'Номер корпуса';
COMMENT ON COLUMN esz.address."structure" IS 'Номер строения';
COMMENT ON COLUMN esz.address.facilities IS 'Номер сооружения';
COMMENT ON COLUMN esz.address.unom IS 'Уникальный номер адреса в справочнике БТИ';
COMMENT ON COLUMN esz.address.longitude IS 'Долгота и широта (в десятичных градусах) точки, описывающей географическое местоположение здания (сооружения), в котором находится пункт. Система координат проекции: Moscow Coordinate System; проекция: Gauss_Kruger; центральный меридиан: 37,49830000; нача';
COMMENT ON COLUMN esz.address.latitude IS 'Долгота и широта (в десятичных градусах) точки, описывающей географическое местоположение здания (сооружения), в котором находится пункт. Система координат проекции: Moscow Coordinate System; проекция: Gauss_Kruger; центральный меридиан: 37,49830000; нача';
COMMENT ON COLUMN esz.address.code_county IS 'Код мунициального округа';
COMMENT ON COLUMN esz.address.name_county IS 'Название муниципального округа';
COMMENT ON COLUMN esz.address.code_district IS 'Код муниципального района';
COMMENT ON COLUMN esz.address.name_district IS 'Название муниципального района';
COMMENT ON COLUMN esz.address.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.address.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.address.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.address.is_archive IS 'Признак архивной записи';
COMMENT ON COLUMN esz.address.unad IS 'UNAD';
COMMENT ON COLUMN esz.address.bti IS 'Код БТИ';
COMMENT ON COLUMN esz.address.short_address IS 'Краткий адрес';
COMMENT ON COLUMN esz.address.need_reindex IS 'Признак переиндексации';
COMMENT ON COLUMN esz.address.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.address.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.address.is_moscow_region IS 'Московский или не московский регион';
COMMENT ON COLUMN esz.address.fias_house_guid IS 'Guid адреса в системе Fias для немосковских адресов';
COMMENT ON COLUMN esz.address.is_manual IS 'Адрес внесен вручную';
COMMENT ON COLUMN esz.address.code_area IS 'Код района (территориальное деление)';
COMMENT ON COLUMN esz.address.name_area IS 'Название района (территориальное деление)';


-- esz.classificator_eku definition

-- Drop table

-- DROP TABLE esz.classificator_eku;

CREATE TABLE esz.classificator_eku (
	id serial4 NOT NULL, -- Уникальный идентификатор
	general_classificator_eku_id int4 NULL, -- Уникальный идентификатор
	vedomstvo_id int4 NULL, -- Уникальный идентификатор
	parent_id int4 NULL, -- Уникальный идентификатор
	code varchar(20) NULL, -- Код услуги в каталоге
	"name" varchar(200) NULL, -- Полное наименование
	description varchar(200) NULL, -- Описание услуги
	rule_service varchar(20) NULL, -- Порядок предоставления услуги (Порядок зачисления на обучение)
	alt_start int4 NULL, -- Начальный возраст субъекта услуги
	alt_end int4 NULL, -- Конечный возраст субъекта услуги
	test_service bool NULL, -- Наличие предварительных испытаний
	tours_number int4 NULL, -- Количество туров предварительных испытаний
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(100) NULL, -- Внешний идентификатор
	classificator_status_id int4 NULL, -- Идентификатор статуса
	education_type_id int4 DEFAULT 1 NOT NULL, -- Идентификатор вида образования
	is_special_eku bool DEFAULT false NOT NULL, -- Спец признак для РБНДО активного долголетия, указывающий, что эти ветки не могут быть выбраны в анкете
	external_system_id int4 NULL, -- Идентификатор внешней системы
	extend_entity_guid uuid DEFAULT gen_random_uuid() NOT NULL, -- Уникальный идентификатор сущности
	change_parent_id int4 NULL, -- Специальная колонка для копирования
	CONSTRAINT classificator_eku_pkey PRIMARY KEY (id),
	CONSTRAINT fk_classificator_eku_education_type FOREIGN KEY (education_type_id) REFERENCES esz.education_type(id) ON UPDATE CASCADE,
	CONSTRAINT fk_classificator_eku_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT fk_general_classificator_rel FOREIGN KEY (general_classificator_eku_id) REFERENCES esz.general_classificator_eku(id) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT fk_organization_to_classificator_eku FOREIGN KEY (vedomstvo_id) REFERENCES esz.vedomstvo(id) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT fk_parrent_classificator FOREIGN KEY (parent_id) REFERENCES esz.classificator_eku(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_classificator_eku_education_type ON esz.classificator_eku USING btree (education_type_id);
CREATE INDEX fk_classificator_eku_external_system ON esz.classificator_eku USING btree (external_system_id);
CREATE INDEX fk_organization_to_classificator_eku ON esz.classificator_eku USING btree (vedomstvo_id);
CREATE INDEX ind_classificator_eku_extend_entity_guid ON esz.classificator_eku USING btree (extend_entity_guid);
CREATE INDEX ind_classificator_eku_name ON esz.classificator_eku USING btree (name);
CREATE INDEX ind_classificator_eku_tree ON esz.classificator_eku USING btree (parent_id);
CREATE INDEX ind_cls_eku_vedomstvo_id ON esz.classificator_eku USING btree (name, vedomstvo_id);
CREATE INDEX ind_gc ON esz.classificator_eku USING btree (general_classificator_eku_id);
COMMENT ON TABLE esz.classificator_eku IS 'Реестр направлений дополнительного образования';

-- Column comments

COMMENT ON COLUMN esz.classificator_eku.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.classificator_eku.general_classificator_eku_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.classificator_eku.vedomstvo_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.classificator_eku.parent_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.classificator_eku.code IS 'Код услуги в каталоге';
COMMENT ON COLUMN esz.classificator_eku."name" IS 'Полное наименование';
COMMENT ON COLUMN esz.classificator_eku.description IS 'Описание услуги';
COMMENT ON COLUMN esz.classificator_eku.rule_service IS 'Порядок предоставления услуги (Порядок зачисления на обучение)';
COMMENT ON COLUMN esz.classificator_eku.alt_start IS 'Начальный возраст субъекта услуги';
COMMENT ON COLUMN esz.classificator_eku.alt_end IS 'Конечный возраст субъекта услуги';
COMMENT ON COLUMN esz.classificator_eku.test_service IS 'Наличие предварительных испытаний';
COMMENT ON COLUMN esz.classificator_eku.tours_number IS 'Количество туров предварительных испытаний';
COMMENT ON COLUMN esz.classificator_eku.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.classificator_eku.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.classificator_eku.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.classificator_eku.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.classificator_eku.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.classificator_eku.classificator_status_id IS 'Идентификатор статуса';
COMMENT ON COLUMN esz.classificator_eku.education_type_id IS 'Идентификатор вида образования';
COMMENT ON COLUMN esz.classificator_eku.is_special_eku IS 'Спец признак для РБНДО активного долголетия, указывающий, что эти ветки не могут быть выбраны в анкете';
COMMENT ON COLUMN esz.classificator_eku.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.classificator_eku.extend_entity_guid IS 'Уникальный идентификатор сущности';
COMMENT ON COLUMN esz.classificator_eku.change_parent_id IS 'Специальная колонка для копирования';


-- esz.classificator_eku_programm_level_rel definition

-- Drop table

-- DROP TABLE esz.classificator_eku_programm_level_rel;

CREATE TABLE esz.classificator_eku_programm_level_rel (
	classificator_eku_id int4 NOT NULL, -- Уникальный идентификатор классификатора
	programm_level_id int4 NOT NULL, -- Уникальный идентификатор уровня обучения
	CONSTRAINT classificator_eku_programm_level_rel_pkey PRIMARY KEY (classificator_eku_id, programm_level_id),
	CONSTRAINT fk_classificator_eku_programm_level_rel FOREIGN KEY (classificator_eku_id) REFERENCES esz.classificator_eku(id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_classificator_eku_programm_level_rel2 FOREIGN KEY (programm_level_id) REFERENCES esz.programm_level(id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX ind_class_eku_prog_lev_rel_programm_level_id ON esz.classificator_eku_programm_level_rel USING btree (programm_level_id);
COMMENT ON TABLE esz.classificator_eku_programm_level_rel IS 'Связь таблиц classificator_eku и programm_level';

-- Column comments

COMMENT ON COLUMN esz.classificator_eku_programm_level_rel.classificator_eku_id IS 'Уникальный идентификатор классификатора';
COMMENT ON COLUMN esz.classificator_eku_programm_level_rel.programm_level_id IS 'Уникальный идентификатор уровня обучения';


-- esz.discipline definition

-- Drop table

-- DROP TABLE esz.discipline;

CREATE TABLE esz.discipline (
	id serial4 NOT NULL, -- Идентификатор
	discipline_id int4 NULL, -- Идентификатор
	code varchar(30) NULL, -- Код
	"name" varchar(500) NULL, -- Наименование
	description varchar(1000) NULL, -- Описание
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	vedomstvo_id int4 NULL, -- Идентификатор департамента
	CONSTRAINT discipline_pkey PRIMARY KEY (id),
	CONSTRAINT fk_discipline_vedomstvo_rel FOREIGN KEY (vedomstvo_id) REFERENCES esz.vedomstvo(id) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT fk_parent_discipline FOREIGN KEY (discipline_id) REFERENCES esz.discipline(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_discipline_vedomstvo_rel ON esz.discipline USING btree (vedomstvo_id);
CREATE INDEX fk_parent_discipline ON esz.discipline USING btree (discipline_id);
COMMENT ON TABLE esz.discipline IS 'Классификатор учебных дисциплин';

-- Column comments

COMMENT ON COLUMN esz.discipline.id IS 'Идентификатор';
COMMENT ON COLUMN esz.discipline.discipline_id IS 'Идентификатор';
COMMENT ON COLUMN esz.discipline.code IS 'Код';
COMMENT ON COLUMN esz.discipline."name" IS 'Наименование';
COMMENT ON COLUMN esz.discipline.description IS 'Описание';
COMMENT ON COLUMN esz.discipline.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.discipline.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.discipline.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.discipline.vedomstvo_id IS 'Идентификатор департамента';


-- esz.external_system_response_status definition

-- Drop table

-- DROP TABLE esz.external_system_response_status;

CREATE TABLE esz.external_system_response_status (
	id serial4 NOT NULL, -- Первичный ключ
	status_code int4 NOT NULL, -- Код статуса
	status_name varchar(500) NULL, -- Название статуса
	status_name_admin varchar(500) NULL, -- Название статуса для администратора
	description varchar(500) NULL, -- Описание статуса
	external_system_response_type_id int4 NOT NULL, -- Тип ответов внешней системы (указывается какая система и какой вид статуса)
	is_error_status bool DEFAULT false NOT NULL, -- Статус ошибочного состояния
	is_success_status bool DEFAULT false NOT NULL, -- Статус успешного состояния
	can_resend_message bool DEFAULT false NOT NULL, -- Можно/нужно отправлять сообщения заново, если установлен этот статус
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	CONSTRAINT external_system_response_status_pkey PRIMARY KEY (id),
	CONSTRAINT fk_ext_sys_resp_stat_ext_sys_resp_type FOREIGN KEY (external_system_response_type_id) REFERENCES esz.external_system_response_type(id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX fk_ext_sys_resp_stat_ext_sys_resp_type ON esz.external_system_response_status USING btree (external_system_response_type_id);
COMMENT ON TABLE esz.external_system_response_status IS 'Статусы интеграции с внешними системами';

-- Column comments

COMMENT ON COLUMN esz.external_system_response_status.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.external_system_response_status.status_code IS 'Код статуса';
COMMENT ON COLUMN esz.external_system_response_status.status_name IS 'Название статуса';
COMMENT ON COLUMN esz.external_system_response_status.status_name_admin IS 'Название статуса для администратора';
COMMENT ON COLUMN esz.external_system_response_status.description IS 'Описание статуса';
COMMENT ON COLUMN esz.external_system_response_status.external_system_response_type_id IS 'Тип ответов внешней системы (указывается какая система и какой вид статуса)';
COMMENT ON COLUMN esz.external_system_response_status.is_error_status IS 'Статус ошибочного состояния';
COMMENT ON COLUMN esz.external_system_response_status.is_success_status IS 'Статус успешного состояния';
COMMENT ON COLUMN esz.external_system_response_status.can_resend_message IS 'Можно/нужно отправлять сообщения заново, если установлен этот статус';
COMMENT ON COLUMN esz.external_system_response_status.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.external_system_response_status.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.external_system_response_status.date_change IS 'Дата последнего изменения записи';

-- Table Triggers

create trigger t_external_system_response_status before
update
    on
    esz.external_system_response_status for each row execute function esz.insert_current_timestamp();


-- esz.filter_vedomstvo_rel definition

-- Drop table

-- DROP TABLE esz.filter_vedomstvo_rel;

CREATE TABLE esz.filter_vedomstvo_rel (
	vedomstvo_id int4 NOT NULL, -- Идентификатор ведомства
	filter_id int4 NOT NULL, -- Идентификатор фильтра
	CONSTRAINT filter_vedomstvo_rel_pkey PRIMARY KEY (vedomstvo_id, filter_id),
	CONSTRAINT fk_filter_vedomstvo_rel FOREIGN KEY (vedomstvo_id) REFERENCES esz.vedomstvo(id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_filter_vedomstvo_rel2 FOREIGN KEY (filter_id) REFERENCES esz."filter"(id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX fk_filter_vedomstvo_rel2 ON esz.filter_vedomstvo_rel USING btree (filter_id);
COMMENT ON TABLE esz.filter_vedomstvo_rel IS 'Промежуточная таблица для множественных связей таблицы Filter со справочником ведомств';

-- Column comments

COMMENT ON COLUMN esz.filter_vedomstvo_rel.vedomstvo_id IS 'Идентификатор ведомства';
COMMENT ON COLUMN esz.filter_vedomstvo_rel.filter_id IS 'Идентификатор фильтра';


-- esz.items_work definition

-- Drop table

-- DROP TABLE esz.items_work;

CREATE TABLE esz.items_work (
	id serial4 NOT NULL, -- Уникальный идентификатор
	address_id int4 NULL, -- Уникальный идентификатор
	code varchar(12) NULL, -- Уникальный код зарегистрированного пункта работы с заявителями, состоящий из 12 (двенадцати) десятичных разрядов. Примечание: первые два разряда кода для Москвы всегда равны «45».
	full_name text NULL, -- Полное наименование ведомства или городской организации с указанием названия территориального / функционального отделения (филиала, представительства и т.п.), на площадке размещения которого (которой) развернут пункт.
	person_phone varchar(200) NULL, -- Контактный телефон ответственного сотрудника пункта
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(100) NULL, -- Внешний идентификатор
	is_default_items_work bool DEFAULT false NOT NULL, -- Место приема документов добавлено автоматически с помощью галочки на форме
	short_name varchar(500) NULL, -- Сокращенное наименование ведомства или городской организации с указанием названия территориального / функционального отделения (филиала, представительства и т.п.), на площадке размещения которого (которой) развернут пункт.
	external_system_id int4 NULL, -- Ссылка на внешнюю систему
	CONSTRAINT items_work_pkey PRIMARY KEY (id),
	CONSTRAINT fk_address_items_work FOREIGN KEY (address_id) REFERENCES esz.address(id) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT fk_items_work_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_items_work_external_system ON esz.items_work USING btree (external_system_id);
CREATE INDEX ind_items_work_addr ON esz.items_work USING btree (address_id);
COMMENT ON TABLE esz.items_work IS 'Пункты работы с заявителями';

-- Column comments

COMMENT ON COLUMN esz.items_work.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.items_work.address_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.items_work.code IS 'Уникальный код зарегистрированного пункта работы с заявителями, состоящий из 12 (двенадцати) десятичных разрядов. Примечание: первые два разряда кода для Москвы всегда равны «45».';
COMMENT ON COLUMN esz.items_work.full_name IS 'Полное наименование ведомства или городской организации с указанием названия территориального / функционального отделения (филиала, представительства и т.п.), на площадке размещения которого (которой) развернут пункт.';
COMMENT ON COLUMN esz.items_work.person_phone IS 'Контактный телефон ответственного сотрудника пункта';
COMMENT ON COLUMN esz.items_work.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.items_work.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.items_work.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.items_work.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.items_work.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.items_work.is_default_items_work IS 'Место приема документов добавлено автоматически с помощью галочки на форме';
COMMENT ON COLUMN esz.items_work.short_name IS 'Сокращенное наименование ведомства или городской организации с указанием названия территориального / функционального отделения (филиала, представительства и т.п.), на площадке размещения которого (которой) развернут пункт.';
COMMENT ON COLUMN esz.items_work.external_system_id IS 'Ссылка на внешнюю систему';


-- esz.metro_station_address definition

-- Drop table

-- DROP TABLE esz.metro_station_address;

CREATE TABLE esz.metro_station_address (
	metro_station_id int4 NOT NULL, -- Уникальный идентификатор
	address_id int4 NOT NULL, -- Уникальный идентификатор
	CONSTRAINT metro_station_address_pkey PRIMARY KEY (metro_station_id, address_id),
	CONSTRAINT fk_metro_station_address FOREIGN KEY (metro_station_id) REFERENCES esz.metro_station(id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_metro_station_address2 FOREIGN KEY (address_id) REFERENCES esz.address(id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX fk_metro_station_address ON esz.metro_station_address USING btree (metro_station_id);
CREATE INDEX fk_metro_station_address2 ON esz.metro_station_address USING btree (address_id);
COMMENT ON TABLE esz.metro_station_address IS 'Связь ближайших станций метро с адресами';

-- Column comments

COMMENT ON COLUMN esz.metro_station_address.metro_station_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.metro_station_address.address_id IS 'Уникальный идентификатор';


-- esz.person_discipline_rel definition

-- Drop table

-- DROP TABLE esz.person_discipline_rel;

CREATE TABLE esz.person_discipline_rel (
	discipline_id int4 NOT NULL, -- Ссылка на дисциплину
	person_id int4 NOT NULL, -- Ссылка на учителя
	CONSTRAINT person_discipline_rel_pkey PRIMARY KEY (discipline_id, person_id),
	CONSTRAINT fk_person_discipline_rel FOREIGN KEY (discipline_id) REFERENCES esz.discipline(id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_person_discipline_rel2 FOREIGN KEY (person_id) REFERENCES esz.person(id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX fk_person_discipline_rel2 ON esz.person_discipline_rel USING btree (person_id);
COMMENT ON TABLE esz.person_discipline_rel IS 'Связь преподавателей и дисциплин';

-- Column comments

COMMENT ON COLUMN esz.person_discipline_rel.discipline_id IS 'Ссылка на дисциплину';
COMMENT ON COLUMN esz.person_discipline_rel.person_id IS 'Ссылка на учителя';


-- esz.personal_address definition

-- Drop table

-- DROP TABLE esz.personal_address;

CREATE TABLE esz.personal_address (
	id serial4 NOT NULL, -- Первичный ключ
	street_name varchar(200) NULL, -- Название улицы
	room_number varchar(20) NULL, -- Номер квартиры/офиса
	house_number varchar(20) NULL, -- Номер дома
	housing_number varchar(20) NULL, -- Номер корпуса
	ownership_number varchar(20) NULL, -- Номер владения
	building_number varchar(20) NULL, -- Номер строения/здания
	is_reg_address bool DEFAULT false NOT NULL, -- Адрес регистрации/фактического проживания
	personal_request_data_id int4 NULL, -- Ссылка на данные заявителя из анкеты-заявления
	territory_entity_id int4 NULL, -- Ссылка на TerritoryEntity (район)
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	pupil_id int4 NULL, -- Ссылка на личное дело ученика/пенсионера
	unom varchar(20) NULL, -- Идентификатор адреса БТИ (УНОМ)
	CONSTRAINT personal_address_pkey PRIMARY KEY (id),
	CONSTRAINT fk_territory_entity_personal_address FOREIGN KEY (territory_entity_id) REFERENCES esz.territory_entity(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_territory_entity_personal_address ON esz.personal_address USING btree (territory_entity_id);
CREATE INDEX ind_pa_personal_request_data_id ON esz.personal_address USING btree (personal_request_data_id);
CREATE INDEX ind_pa_pupil_id ON esz.personal_address USING btree (pupil_id);
COMMENT ON TABLE esz.personal_address IS 'Список персональных адресов';

-- Column comments

COMMENT ON COLUMN esz.personal_address.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.personal_address.street_name IS 'Название улицы';
COMMENT ON COLUMN esz.personal_address.room_number IS 'Номер квартиры/офиса';
COMMENT ON COLUMN esz.personal_address.house_number IS 'Номер дома';
COMMENT ON COLUMN esz.personal_address.housing_number IS 'Номер корпуса';
COMMENT ON COLUMN esz.personal_address.ownership_number IS 'Номер владения';
COMMENT ON COLUMN esz.personal_address.building_number IS 'Номер строения/здания';
COMMENT ON COLUMN esz.personal_address.is_reg_address IS 'Адрес регистрации/фактического проживания';
COMMENT ON COLUMN esz.personal_address.personal_request_data_id IS 'Ссылка на данные заявителя из анкеты-заявления';
COMMENT ON COLUMN esz.personal_address.territory_entity_id IS 'Ссылка на TerritoryEntity (район)';
COMMENT ON COLUMN esz.personal_address.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.personal_address.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.personal_address.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.personal_address.pupil_id IS 'Ссылка на личное дело ученика/пенсионера';
COMMENT ON COLUMN esz.personal_address.unom IS 'Идентификатор адреса БТИ (УНОМ)';


-- esz.programm_module definition

-- Drop table

-- DROP TABLE esz.programm_module;

CREATE TABLE esz.programm_module (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	"name" varchar(250) NULL, -- Наименование
	union_catalog_services_id int4 NULL, -- Уникальный идентификатор услуги
	description text NULL, -- Описание
	document_type_id int4 NULL, -- Уникальный идентификатор типа документа
	document_template_id int4 NULL, -- Уникальный идентификатор шаблона документов
	learn_hours int4 NULL, -- Количество часов
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	address_id int4 NULL, -- Идентификатор адреса
	person_id int4 NULL, -- Ссылка на преподавателя
	CONSTRAINT programm_module_pkey PRIMARY KEY (id),
	CONSTRAINT fk_programm_module_address_rel FOREIGN KEY (address_id) REFERENCES esz.address(id) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT fk_programm_module_person_rel FOREIGN KEY (person_id) REFERENCES esz.person(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_programm_module_address_rel ON esz.programm_module USING btree (address_id);
CREATE INDEX fk_programm_module_person_rel ON esz.programm_module USING btree (person_id);
CREATE INDEX ind_programm_module_union_catalog_services_id ON esz.programm_module USING btree (union_catalog_services_id);
COMMENT ON TABLE esz.programm_module IS 'Программный модуль';

-- Column comments

COMMENT ON COLUMN esz.programm_module.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.programm_module."name" IS 'Наименование';
COMMENT ON COLUMN esz.programm_module.union_catalog_services_id IS 'Уникальный идентификатор услуги';
COMMENT ON COLUMN esz.programm_module.description IS 'Описание';
COMMENT ON COLUMN esz.programm_module.document_type_id IS 'Уникальный идентификатор типа документа';
COMMENT ON COLUMN esz.programm_module.document_template_id IS 'Уникальный идентификатор шаблона документов';
COMMENT ON COLUMN esz.programm_module.learn_hours IS 'Количество часов';
COMMENT ON COLUMN esz.programm_module.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.programm_module.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.programm_module.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.programm_module.address_id IS 'Идентификатор адреса';
COMMENT ON COLUMN esz.programm_module.person_id IS 'Ссылка на преподавателя';


-- esz.pupil definition

-- Drop table

-- DROP TABLE esz.pupil;

CREATE TABLE esz.pupil (
	id serial4 NOT NULL, -- Идентификатор
	code varchar(30) NULL, -- Код
	first_name varchar(200) NULL, -- Имя
	last_name varchar(200) NULL, -- Фамилия
	middle_name varchar(200) NULL, -- Отчество
	birth_date timestamp(0) NULL, -- Дата рождения
	contingent_guid uuid NULL, -- Идентификатор в реестре контингента
	entity_id varchar(36) NULL, -- Идентификатор сущности
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	sex_id int4 NULL, -- Идентификатор пола
	fact_address_id int4 NULL, -- Идентификатор фактического адреса
	patronage bool NULL, -- Попечительство
	reg_address_id int4 NULL, -- Идентификатор адреса регистрации
	school_name varchar(500) NULL, -- Название школы
	external_uid varchar(50) NULL, -- Внешний идентификатор
	need_reindex int2 DEFAULT 0 NOT NULL, -- Признак переиндексации
	snils int8 NULL, -- СНИЛС
	is_pensioner bool DEFAULT false NOT NULL, -- Это пенсионер
	cell_phone varchar(50) NULL, -- Мобильный телефон
	home_phone varchar(50) NULL, -- Домашний телефон
	email varchar(50) NULL, -- Почтовый адрес
	moscow_social_card_number varchar(50) NULL, -- Номер социальной карты москвича
	emission_series varchar(50) NULL, -- Серия социальной карты москвича
	contingent_link_type_id int4 DEFAULT 3 NOT NULL, -- Вид связи с реестром контингента
	contingent_check_date timestamp(0) NULL, -- Штамп времени последней сверки с Реестром контингента
	external_system_id int4 NULL, -- Идентификатор внешней системы
	extend_entity_guid uuid DEFAULT gen_random_uuid() NOT NULL, -- Уникальный идентификатор
	CONSTRAINT pupil_pkey PRIMARY KEY (id),
	CONSTRAINT fk_pupil_contingent_link_type FOREIGN KEY (contingent_link_type_id) REFERENCES esz.contingent_link_type(id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_pupil_external_system_rel FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT fk_pupil_fact_address FOREIGN KEY (fact_address_id) REFERENCES esz.address(id) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT fk_pupil_reg_address FOREIGN KEY (reg_address_id) REFERENCES esz.address(id) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT fk_pupil_sex_rel FOREIGN KEY (sex_id) REFERENCES esz.sex(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_pupil_contingent_link_type ON esz.pupil USING btree (contingent_link_type_id);
CREATE INDEX fk_pupil_external_system_rel ON esz.pupil USING btree (external_system_id);
CREATE INDEX fk_pupil_sex_rel ON esz.pupil USING btree (sex_id);
CREATE INDEX fts_pupil_first_name ON esz.pupil USING gin (to_tsvector('russian'::regconfig, (first_name)::text));
CREATE INDEX fts_pupil_last_name ON esz.pupil USING gin (to_tsvector('russian'::regconfig, (last_name)::text));
CREATE INDEX fts_pupil_middle_name ON esz.pupil USING gin (to_tsvector('russian'::regconfig, (middle_name)::text));
CREATE INDEX ind_addr_fact ON esz.pupil USING btree (fact_address_id);
CREATE INDEX ind_addr_reg ON esz.pupil USING btree (reg_address_id);
CREATE INDEX ind_date_create ON esz.pupil USING btree (date_create);
CREATE INDEX ind_pupil_contingent_guid ON esz.pupil USING btree (contingent_guid);
CREATE INDEX ind_pupil_external_system_external_uid ON esz.pupil USING btree (external_uid);
CREATE INDEX ind_pupil_last_name_first_name_birth_date ON esz.pupil USING btree (last_name, first_name, birth_date);
CREATE INDEX ind_pupil_need_reguid_contingent_check_date ON esz.pupil USING btree (contingent_check_date);
CREATE INDEX ind_pupil_snils ON esz.pupil USING btree (snils);
CREATE INDEX pupil_name_ix ON esz.pupil USING btree (last_name, middle_name, first_name);
CREATE INDEX pupil_need_reindex_idx ON esz.pupil USING btree (need_reindex) WHERE (need_reindex = ANY (ARRAY[1, 3]));
CREATE INDEX uk_pupil_extend_entity_guid ON esz.pupil USING btree (extend_entity_guid);
COMMENT ON TABLE esz.pupil IS 'Ученики';

-- Column comments

COMMENT ON COLUMN esz.pupil.id IS 'Идентификатор';
COMMENT ON COLUMN esz.pupil.code IS 'Код';
COMMENT ON COLUMN esz.pupil.first_name IS 'Имя';
COMMENT ON COLUMN esz.pupil.last_name IS 'Фамилия';
COMMENT ON COLUMN esz.pupil.middle_name IS 'Отчество';
COMMENT ON COLUMN esz.pupil.birth_date IS 'Дата рождения';
COMMENT ON COLUMN esz.pupil.contingent_guid IS 'Идентификатор в реестре контингента';
COMMENT ON COLUMN esz.pupil.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.pupil.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.pupil.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.pupil.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.pupil.sex_id IS 'Идентификатор пола';
COMMENT ON COLUMN esz.pupil.fact_address_id IS 'Идентификатор фактического адреса';
COMMENT ON COLUMN esz.pupil.patronage IS 'Попечительство';
COMMENT ON COLUMN esz.pupil.reg_address_id IS 'Идентификатор адреса регистрации';
COMMENT ON COLUMN esz.pupil.school_name IS 'Название школы';
COMMENT ON COLUMN esz.pupil.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.pupil.need_reindex IS 'Признак переиндексации';
COMMENT ON COLUMN esz.pupil.snils IS 'СНИЛС';
COMMENT ON COLUMN esz.pupil.is_pensioner IS 'Это пенсионер';
COMMENT ON COLUMN esz.pupil.cell_phone IS 'Мобильный телефон';
COMMENT ON COLUMN esz.pupil.home_phone IS 'Домашний телефон';
COMMENT ON COLUMN esz.pupil.email IS 'Почтовый адрес';
COMMENT ON COLUMN esz.pupil.moscow_social_card_number IS 'Номер социальной карты москвича';
COMMENT ON COLUMN esz.pupil.emission_series IS 'Серия социальной карты москвича';
COMMENT ON COLUMN esz.pupil.contingent_link_type_id IS 'Вид связи с реестром контингента';
COMMENT ON COLUMN esz.pupil.contingent_check_date IS 'Штамп времени последней сверки с Реестром контингента';
COMMENT ON COLUMN esz.pupil.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.pupil.extend_entity_guid IS 'Уникальный идентификатор';


-- esz.pupil_decline_reason_vedomstvo_rel definition

-- Drop table

-- DROP TABLE esz.pupil_decline_reason_vedomstvo_rel;

CREATE TABLE esz.pupil_decline_reason_vedomstvo_rel (
	vedomstvo_id int4 NOT NULL, -- Идентификатор департамента
	reason_id int4 NOT NULL, -- Уникальный идентификатор причины
	CONSTRAINT pupil_decline_reason_vedomstvo_rel_pkey PRIMARY KEY (vedomstvo_id, reason_id),
	CONSTRAINT fk_pupil_decline_reason_vedomstvo_rel FOREIGN KEY (reason_id) REFERENCES esz.pupil_decline_reason(id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_pupil_decline_reason_vedomstvo_rel2 FOREIGN KEY (vedomstvo_id) REFERENCES esz.vedomstvo(id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX fk_pupil_decline_reason_vedomstvo_rel ON esz.pupil_decline_reason_vedomstvo_rel USING btree (reason_id);
COMMENT ON TABLE esz.pupil_decline_reason_vedomstvo_rel IS 'Связь справочника причин отчисления учеников с ведомствами';

-- Column comments

COMMENT ON COLUMN esz.pupil_decline_reason_vedomstvo_rel.vedomstvo_id IS 'Идентификатор департамента';
COMMENT ON COLUMN esz.pupil_decline_reason_vedomstvo_rel.reason_id IS 'Уникальный идентификатор причины';


-- esz.pupil_document definition

-- Drop table

-- DROP TABLE esz.pupil_document;

CREATE TABLE esz.pupil_document (
	id serial4 NOT NULL, -- Уникальный идентификатор
	document_type_id int4 NULL, -- Ссылка на справочник "Типы документов"
	doc_series varchar(100) NULL, -- Серия документа
	doc_number varchar(100) NULL, -- Номер документа
	doc_date timestamp(0) NULL, -- Дата выдачи документа
	doc_issuer varchar(1000) NULL, -- Орган выдачи документа
	doc_issuer_code varchar(100) NULL, -- Код органа выдачи документа
	type_issue_place_id int4 NULL, -- Ссылка на место выдачи документа
	pupil_id int4 NOT NULL, -- Ссылка на обучающегося
	external_uid varchar(100) NULL, -- Внешний идентификатор
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	date_create timestamp(0) DEFAULT now() NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	short_number varchar(100) NULL, -- Короткий номер актовой записи о рождении в ЕГР ЗАГС
	CONSTRAINT pupil_document_pkey PRIMARY KEY (id),
	CONSTRAINT fk_pupil_document_document_type FOREIGN KEY (document_type_id) REFERENCES esz.document_type(id) ON DELETE RESTRICT ON UPDATE CASCADE,
	CONSTRAINT fk_pupil_document_pupil FOREIGN KEY (pupil_id) REFERENCES esz.pupil(id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_pupil_document_type_issue_place FOREIGN KEY (type_issue_place_id) REFERENCES esz.type_issue_place(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_pupil_document_document_type ON esz.pupil_document USING btree (document_type_id);
CREATE INDEX fk_pupil_document_type_issue_place ON esz.pupil_document USING btree (type_issue_place_id);
CREATE INDEX ind_pupil_id ON esz.pupil_document USING btree (pupil_id);
COMMENT ON TABLE esz.pupil_document IS 'Документы обучающихся';

-- Column comments

COMMENT ON COLUMN esz.pupil_document.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.pupil_document.document_type_id IS 'Ссылка на справочник "Типы документов"';
COMMENT ON COLUMN esz.pupil_document.doc_series IS 'Серия документа';
COMMENT ON COLUMN esz.pupil_document.doc_number IS 'Номер документа';
COMMENT ON COLUMN esz.pupil_document.doc_date IS 'Дата выдачи документа';
COMMENT ON COLUMN esz.pupil_document.doc_issuer IS 'Орган выдачи документа';
COMMENT ON COLUMN esz.pupil_document.doc_issuer_code IS 'Код органа выдачи документа';
COMMENT ON COLUMN esz.pupil_document.type_issue_place_id IS 'Ссылка на место выдачи документа';
COMMENT ON COLUMN esz.pupil_document.pupil_id IS 'Ссылка на обучающегося';
COMMENT ON COLUMN esz.pupil_document.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.pupil_document.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.pupil_document.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.pupil_document.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.pupil_document.short_number IS 'Короткий номер актовой записи о рождении в ЕГР ЗАГС';


-- esz.pupil_personal_rel definition

-- Drop table

-- DROP TABLE esz.pupil_personal_rel;

CREATE TABLE esz.pupil_personal_rel (
	personal_request_data_id int4 NOT NULL, -- Уникальный идентификатор
	pupil_id int4 NOT NULL, -- Идентификатор
	CONSTRAINT pupil_personal_rel_pkey PRIMARY KEY (personal_request_data_id, pupil_id),
	CONSTRAINT fk_pupil_personal_rel2 FOREIGN KEY (pupil_id) REFERENCES esz.pupil(id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX ind_pers_rel ON esz.pupil_personal_rel USING btree (personal_request_data_id);
CREATE INDEX ind_pupl_sear ON esz.pupil_personal_rel USING btree (pupil_id);
COMMENT ON TABLE esz.pupil_personal_rel IS 'Связь учеников и их представителей';

-- Column comments

COMMENT ON COLUMN esz.pupil_personal_rel.personal_request_data_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.pupil_personal_rel.pupil_id IS 'Идентификатор';


-- esz.sport_objects definition

-- Drop table

-- DROP TABLE esz.sport_objects;

CREATE TABLE esz.sport_objects (
	id serial4 NOT NULL, -- Уникальный идентификатор
	address_id int4 NULL, -- Уникальный идентификатор
	"name" varchar(1000) NULL, -- Наименование объектов
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(100) NULL, -- Внешний идентификатор
	external_system_id int4 NULL, -- Ссылка на внешнюю систему
	CONSTRAINT sport_objects_pkey PRIMARY KEY (id),
	CONSTRAINT fk_sport_object_address FOREIGN KEY (address_id) REFERENCES esz.address(id) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT fk_sport_objects_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_sport_objects_external_system ON esz.sport_objects USING btree (external_system_id);
CREATE INDEX ind_sport_objects_addr ON esz.sport_objects USING btree (address_id);
COMMENT ON TABLE esz.sport_objects IS 'Спортивные объекты';

-- Column comments

COMMENT ON COLUMN esz.sport_objects.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.sport_objects.address_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.sport_objects."name" IS 'Наименование объектов';
COMMENT ON COLUMN esz.sport_objects.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.sport_objects.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.sport_objects.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.sport_objects.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.sport_objects.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.sport_objects.external_system_id IS 'Ссылка на внешнюю систему';


-- esz.types_providing_services definition

-- Drop table

-- DROP TABLE esz.types_providing_services;

CREATE TABLE esz.types_providing_services (
	id serial4 NOT NULL, -- Уникальный идентификатор
	"name" varchar(1000) NULL, -- Полное наименование
	code varchar(3) NULL, -- Уникальный код типа организации, состоящий из 3 (трёх) десятичных разрядов.
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	vedomstvo_id int4 NULL, -- Идентификатор департамента
	external_system_id int4 NULL, -- Идентификатор внешней системы
	external_uid varchar(36) NULL, -- Внешний идентификатор
	CONSTRAINT types_providing_services_pkey PRIMARY KEY (id),
	CONSTRAINT fk_org_type_vedomstvo_rel FOREIGN KEY (vedomstvo_id) REFERENCES esz.vedomstvo(id) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT fk_types_providing_services_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_org_type_vedomstvo_rel ON esz.types_providing_services USING btree (vedomstvo_id);
CREATE INDEX fk_types_providing_services_external_system ON esz.types_providing_services USING btree (external_system_id);
COMMENT ON TABLE esz.types_providing_services IS 'Справочник типов организаций оказания услуг';

-- Column comments

COMMENT ON COLUMN esz.types_providing_services.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.types_providing_services."name" IS 'Полное наименование';
COMMENT ON COLUMN esz.types_providing_services.code IS 'Уникальный код типа организации, состоящий из 3 (трёх) десятичных разрядов.';
COMMENT ON COLUMN esz.types_providing_services.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.types_providing_services.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.types_providing_services.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.types_providing_services.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.types_providing_services.vedomstvo_id IS 'Идентификатор департамента';
COMMENT ON COLUMN esz.types_providing_services.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.types_providing_services.external_uid IS 'Внешний идентификатор';


-- esz.external_system_response definition

-- Drop table

-- DROP TABLE esz.external_system_response;

CREATE TABLE esz.external_system_response (
	id serial4 NOT NULL, -- Первичный ключ
	extend_entity_guid uuid DEFAULT gen_random_uuid() NOT NULL, -- Ссылка на сущность
	response_status_id int4 NOT NULL, -- Статус ответа
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	ext_request_id uuid NULL, -- Идентификатор запроса отправляемый или получаемый от внешней системы
	date_expire timestamp(0) NULL, -- Дата истечения актуальности записи
	CONSTRAINT external_system_response_pkey PRIMARY KEY (id),
	CONSTRAINT fk_ext_sys_resp_ext_sys_resp_status FOREIGN KEY (response_status_id) REFERENCES esz.external_system_response_status(id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX fk_ext_sys_resp_ext_sys_resp_status ON esz.external_system_response USING btree (response_status_id);
CREATE INDEX ind_ext_request_id ON esz.external_system_response USING btree (ext_request_id);
CREATE INDEX uk_external_system_response_extend_entity_guid ON esz.external_system_response USING btree (extend_entity_guid);
COMMENT ON TABLE esz.external_system_response IS 'Статусы ответов по запросам к внешним системам';

-- Column comments

COMMENT ON COLUMN esz.external_system_response.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.external_system_response.extend_entity_guid IS 'Ссылка на сущность';
COMMENT ON COLUMN esz.external_system_response.response_status_id IS 'Статус ответа';
COMMENT ON COLUMN esz.external_system_response.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.external_system_response.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.external_system_response.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.external_system_response.ext_request_id IS 'Идентификатор запроса отправляемый или получаемый от внешней системы';
COMMENT ON COLUMN esz.external_system_response.date_expire IS 'Дата истечения актуальности записи';

-- Table Triggers

create trigger t_external_system_response before
update
    on
    esz.external_system_response for each row execute function esz.insert_current_timestamp();


-- esz.place_service definition

-- Drop table

-- DROP TABLE esz.place_service;

CREATE TABLE esz.place_service (
	id serial4 NOT NULL, -- Уникальный идентификатор
	items_work_id int4 NULL, -- Уникальный идентификатор
	sport_objects_id int4 NULL, -- Уникальный идентификатор
	address_id int4 NULL, -- Уникальный идентификатор
	"name" varchar(1000) NULL, -- Наименование места оказания услуги
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(100) NULL, -- Внешний идентификатор
	pool bool NULL, -- Бассейн (устарело)
	pool_lanes int4 NULL, -- Количество дорожек (устарело)
	pool_length numeric(10) NULL, -- Длина дорожек (устарело)
	pool_depth_min numeric(10) NULL, -- Минимальная глубина (устарело)
	pool_depth_max numeric(10) NULL, -- Максимальная глубина (устарело)
	pool_volume numeric(10) NULL, -- Вместимость (устарело)
	pool_board_min numeric(10) NULL, -- Минимальная высота трамплина (устарело)
	pool_board_max numeric(10) NULL, -- Максимальная высота трамплина (устарело)
	pool_diving varchar(300) NULL, -- Секция подводного плавания (устарело)
	pool_diving_phone varchar(50) NULL, -- Телефон секции подводного плавания (устарело)
	pool_for_children bool NULL, -- Бассейн для детей (устарело)
	pool_trener bool NULL, -- Тренер по плаванию (устарело)
	is_default_place_service bool DEFAULT false NOT NULL, -- Является местом предоставления, добавленным автоматически, при установке галочки "Является местом предоставления"
	external_system_id int4 NULL, -- Ссылка на внешнюю систему
	extend_entity_guid uuid DEFAULT gen_random_uuid() NOT NULL, -- Уникальный идентификатор сущности
	CONSTRAINT place_service_pkey PRIMARY KEY (id),
	CONSTRAINT fk_place_service_address_rel FOREIGN KEY (address_id) REFERENCES esz.address(id) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT fk_place_service_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT fk_places_address FOREIGN KEY (items_work_id) REFERENCES esz.items_work(id) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT fk_sport_object_places FOREIGN KEY (sport_objects_id) REFERENCES esz.sport_objects(id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX fk_place_service_external_system ON esz.place_service USING btree (external_system_id);
CREATE INDEX fk_places_address ON esz.place_service USING btree (items_work_id);
CREATE INDEX fk_sport_object_places ON esz.place_service USING btree (sport_objects_id);
CREATE INDEX ind_place_service_addr ON esz.place_service USING btree (address_id);
CREATE INDEX ind_place_service_extend_entity_guid ON esz.place_service USING btree (extend_entity_guid);
COMMENT ON TABLE esz.place_service IS 'Место предоставления услуги';

-- Column comments

COMMENT ON COLUMN esz.place_service.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.place_service.items_work_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.place_service.sport_objects_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.place_service.address_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.place_service."name" IS 'Наименование места оказания услуги';
COMMENT ON COLUMN esz.place_service.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.place_service.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.place_service.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.place_service.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.place_service.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.place_service.pool IS 'Бассейн (устарело)';
COMMENT ON COLUMN esz.place_service.pool_lanes IS 'Количество дорожек (устарело)';
COMMENT ON COLUMN esz.place_service.pool_length IS 'Длина дорожек (устарело)';
COMMENT ON COLUMN esz.place_service.pool_depth_min IS 'Минимальная глубина (устарело)';
COMMENT ON COLUMN esz.place_service.pool_depth_max IS 'Максимальная глубина (устарело)';
COMMENT ON COLUMN esz.place_service.pool_volume IS 'Вместимость (устарело)';
COMMENT ON COLUMN esz.place_service.pool_board_min IS 'Минимальная высота трамплина (устарело)';
COMMENT ON COLUMN esz.place_service.pool_board_max IS 'Максимальная высота трамплина (устарело)';
COMMENT ON COLUMN esz.place_service.pool_diving IS 'Секция подводного плавания (устарело)';
COMMENT ON COLUMN esz.place_service.pool_diving_phone IS 'Телефон секции подводного плавания (устарело)';
COMMENT ON COLUMN esz.place_service.pool_for_children IS 'Бассейн для детей (устарело)';
COMMENT ON COLUMN esz.place_service.pool_trener IS 'Тренер по плаванию (устарело)';
COMMENT ON COLUMN esz.place_service.is_default_place_service IS 'Является местом предоставления, добавленным автоматически, при установке галочки "Является местом предоставления"';
COMMENT ON COLUMN esz.place_service.external_system_id IS 'Ссылка на внешнюю систему';
COMMENT ON COLUMN esz.place_service.extend_entity_guid IS 'Уникальный идентификатор сущности';


-- esz.additional_agreement definition

-- Drop table

-- DROP TABLE esz.additional_agreement;

CREATE TABLE esz.additional_agreement (
	id serial4 NOT NULL, -- Первичный ключ
	union_catalog_services_id int4 NOT NULL, -- Ссылка на услугу
	agreement_number varchar(100) NULL, -- Номер дополнительного соглашения
	agreement_date timestamp(0) DEFAULT now() NOT NULL, -- Дата дополнительного соглашения
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	CONSTRAINT additional_agreement_pkey PRIMARY KEY (id)
);
CREATE INDEX ind_additional_agreement_union_catalog_services ON esz.additional_agreement USING btree (union_catalog_services_id);
COMMENT ON TABLE esz.additional_agreement IS 'Список дополнительных соглашений к услуге АД';

-- Column comments

COMMENT ON COLUMN esz.additional_agreement.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.additional_agreement.union_catalog_services_id IS 'Ссылка на услугу';
COMMENT ON COLUMN esz.additional_agreement.agreement_number IS 'Номер дополнительного соглашения';
COMMENT ON COLUMN esz.additional_agreement.agreement_date IS 'Дата дополнительного соглашения';
COMMENT ON COLUMN esz.additional_agreement.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.additional_agreement.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.additional_agreement.date_change IS 'Дата изменения записи';


-- esz.admission_plan definition

-- Drop table

-- DROP TABLE esz.admission_plan;

CREATE TABLE esz.admission_plan (
	id serial4 NOT NULL, -- Уникальный идентификатор
	year_of_training_id int4 NULL, -- Уникальный идентификатор
	union_catalog_services_id int4 NULL, -- Уникальный идентификатор
	organization_id int4 NULL, -- Уникальный идентификатор
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(100) NULL, -- Внешний идентификатор
	year_of_study int4 NULL, -- Год обучения
	volume int4 NULL, -- Объем
	reserve int4 NULL, -- Резерв
	external_system_id int4 NULL, -- Ссылка на внешнюю систему
	CONSTRAINT admission_plan_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_admission_plan_external_system ON esz.admission_plan USING btree (external_system_id);
CREATE INDEX fk_organization_admission_plan_rel ON esz.admission_plan USING btree (organization_id);
CREATE INDEX ind_ucs_id ON esz.admission_plan USING btree (union_catalog_services_id, organization_id);
CREATE INDEX ind_year_of_training ON esz.admission_plan USING btree (year_of_training_id);
COMMENT ON TABLE esz.admission_plan IS 'План приема';

-- Column comments

COMMENT ON COLUMN esz.admission_plan.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.admission_plan.year_of_training_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.admission_plan.union_catalog_services_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.admission_plan.organization_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.admission_plan.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.admission_plan.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.admission_plan.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.admission_plan.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.admission_plan.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.admission_plan.year_of_study IS 'Год обучения';
COMMENT ON COLUMN esz.admission_plan.volume IS 'Объем';
COMMENT ON COLUMN esz.admission_plan.reserve IS 'Резерв';
COMMENT ON COLUMN esz.admission_plan.external_system_id IS 'Ссылка на внешнюю систему';


-- esz.catalogue_restrictions_type_rel definition

-- Drop table

-- DROP TABLE esz.catalogue_restrictions_type_rel;

CREATE TABLE esz.catalogue_restrictions_type_rel (
	union_catalog_services_id int4 NOT NULL, -- Уникальный идентификатор
	candidate_restriction_type_id int4 NOT NULL, -- Уникальный идентификатор ограничения
	CONSTRAINT catalogue_restrictions_type_rel_pkey PRIMARY KEY (union_catalog_services_id, candidate_restriction_type_id)
);
CREATE INDEX fk_catalogue_restrictions_union_catalog_service2 ON esz.catalogue_restrictions_type_rel USING btree (candidate_restriction_type_id);
COMMENT ON TABLE esz.catalogue_restrictions_type_rel IS 'Ссылка на вид ограничений';

-- Column comments

COMMENT ON COLUMN esz.catalogue_restrictions_type_rel.union_catalog_services_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.catalogue_restrictions_type_rel.candidate_restriction_type_id IS 'Уникальный идентификатор ограничения';


-- esz.class_name definition

-- Drop table

-- DROP TABLE esz.class_name;

CREATE TABLE esz.class_name (
	id serial4 NOT NULL, -- Первичный ключ
	full_class_name varchar(1024) NULL, -- Название класса
	academic_year varchar(40) NULL, -- Год обучения (как в источнике)
	age_group varchar(20) NULL, -- Возрастная группа (как в источнике)
	external_uid varchar(255) NULL, -- Id во внешнем источнике
	organization_id int4 NOT NULL, -- Id организации ЕСЗ
	is_archive bool DEFAULT false NOT NULL, -- Отметка архивности
	class_parallel_id int4 NULL, -- Параллель класса
	class_letter_id int4 NULL, -- Литера класса
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения
	CONSTRAINT class_name_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_class_name_class_letter ON esz.class_name USING btree (class_letter_id);
CREATE INDEX fk_class_name_class_parallel ON esz.class_name USING btree (class_parallel_id);
CREATE INDEX idx_class_name_full_class_name_organization_id ON esz.class_name USING btree (full_class_name, organization_id);
CREATE INDEX idx_class_name_organization_id ON esz.class_name USING btree (organization_id);
COMMENT ON TABLE esz.class_name IS 'Название класса';

-- Column comments

COMMENT ON COLUMN esz.class_name.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.class_name.full_class_name IS 'Название класса';
COMMENT ON COLUMN esz.class_name.academic_year IS 'Год обучения (как в источнике)';
COMMENT ON COLUMN esz.class_name.age_group IS 'Возрастная группа (как в источнике)';
COMMENT ON COLUMN esz.class_name.external_uid IS 'Id во внешнем источнике';
COMMENT ON COLUMN esz.class_name.organization_id IS 'Id организации ЕСЗ';
COMMENT ON COLUMN esz.class_name.is_archive IS 'Отметка архивности';
COMMENT ON COLUMN esz.class_name.class_parallel_id IS 'Параллель класса';
COMMENT ON COLUMN esz.class_name.class_letter_id IS 'Литера класса';
COMMENT ON COLUMN esz.class_name.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.class_name.date_change IS 'Дата последнего изменения';


-- esz.classificator_eku_edit definition

-- Drop table

-- DROP TABLE esz.classificator_eku_edit;

CREATE TABLE esz.classificator_eku_edit (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	user_id int4 NOT NULL, -- Автор изменений
	vedomstvo_id int4 NOT NULL, -- Департамент, чей РБНДО редактируется
	education_type_id int4 NOT NULL, -- Вид образования
	status_id int2 DEFAULT 0 NOT NULL, -- Состояние сессии редактирования
	is_archive bool DEFAULT false NOT NULL, -- Пометка архивности
	date_create timestamp(0) NOT NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	file_data_id int4 NULL, -- Идентификатор файла
	CONSTRAINT classificator_eku_edit_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_classificator_eku_edit_education_type ON esz.classificator_eku_edit USING btree (education_type_id);
CREATE INDEX fk_classificator_eku_edit_user ON esz.classificator_eku_edit USING btree (user_id);
CREATE INDEX fk_classificator_eku_edit_vedomstvo ON esz.classificator_eku_edit USING btree (vedomstvo_id);
COMMENT ON TABLE esz.classificator_eku_edit IS 'Используется для хранения параметров сессии редактирования РБНДО таких как Автор, Департамент, Дата, Вид обучения';

-- Column comments

COMMENT ON COLUMN esz.classificator_eku_edit.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.classificator_eku_edit.user_id IS 'Автор изменений';
COMMENT ON COLUMN esz.classificator_eku_edit.vedomstvo_id IS 'Департамент, чей РБНДО редактируется';
COMMENT ON COLUMN esz.classificator_eku_edit.education_type_id IS 'Вид образования';
COMMENT ON COLUMN esz.classificator_eku_edit.status_id IS 'Состояние сессии редактирования';
COMMENT ON COLUMN esz.classificator_eku_edit.is_archive IS 'Пометка архивности';
COMMENT ON COLUMN esz.classificator_eku_edit.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.classificator_eku_edit.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.classificator_eku_edit.file_data_id IS 'Идентификатор файла';


-- esz.classificator_eku_edit_action definition

-- Drop table

-- DROP TABLE esz.classificator_eku_edit_action;

CREATE TABLE esz.classificator_eku_edit_action (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	edit_id int4 NOT NULL, -- Ссылка на сессию редактирования
	item_id varchar(20) NOT NULL, -- Редактируемый элемент (Id из ClassificatorEKU для существующего элемента или текст типа j1_1 для нового элемента)
	action_id int4 NOT NULL, -- Вид действия (1 - создание, 2 переименование и т.д.)
	action_order int4 NOT NULL, -- Порядок действия
	"name" varchar(1000) NULL, -- Наименование элемента
	new_name varchar(1000) NULL, -- Новое наименование элемента
	parent_id varchar(20) NULL, -- Родитель
	new_parent_id varchar(20) NULL, -- Новый родитель
	mvk_id int4 NULL, -- Ссылка на МВК
	new_mvk_id int4 NULL, -- Новая ссылка на МВК
	code varchar(1000) NULL, -- Код РБНДО
	new_code varchar(1000) NULL, -- Новый код РБНДО
	CONSTRAINT classificator_eku_edit_action_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_classificator_eku_edit_action_rel ON esz.classificator_eku_edit_action USING btree (edit_id);
COMMENT ON TABLE esz.classificator_eku_edit_action IS 'Используется для хранения выполненных действий по редактированию РБНДО в рамках сессии редактирования из ClassificatorEKUEdit';

-- Column comments

COMMENT ON COLUMN esz.classificator_eku_edit_action.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.classificator_eku_edit_action.edit_id IS 'Ссылка на сессию редактирования';
COMMENT ON COLUMN esz.classificator_eku_edit_action.item_id IS 'Редактируемый элемент (Id из ClassificatorEKU для существующего элемента или текст типа j1_1 для нового элемента)';
COMMENT ON COLUMN esz.classificator_eku_edit_action.action_id IS 'Вид действия (1 - создание, 2 переименование и т.д.)';
COMMENT ON COLUMN esz.classificator_eku_edit_action.action_order IS 'Порядок действия';
COMMENT ON COLUMN esz.classificator_eku_edit_action."name" IS 'Наименование элемента';
COMMENT ON COLUMN esz.classificator_eku_edit_action.new_name IS 'Новое наименование элемента';
COMMENT ON COLUMN esz.classificator_eku_edit_action.parent_id IS 'Родитель';
COMMENT ON COLUMN esz.classificator_eku_edit_action.new_parent_id IS 'Новый родитель';
COMMENT ON COLUMN esz.classificator_eku_edit_action.mvk_id IS 'Ссылка на МВК';
COMMENT ON COLUMN esz.classificator_eku_edit_action.new_mvk_id IS 'Новая ссылка на МВК';
COMMENT ON COLUMN esz.classificator_eku_edit_action.code IS 'Код РБНДО';
COMMENT ON COLUMN esz.classificator_eku_edit_action.new_code IS 'Новый код РБНДО';


-- esz.classificator_eku_edit_prog definition

-- Drop table

-- DROP TABLE esz.classificator_eku_edit_prog;

CREATE TABLE esz.classificator_eku_edit_prog (
	action_id int4 NOT NULL, -- Ссылка на действие
	is_old bool NOT NULL, -- Старое или новое значение (0- старое, 1- новое)
	prog_level_id int4 NOT NULL, -- Ссылка на esz.ProgrammLevel
	CONSTRAINT classificator_eku_edit_prog_pkey PRIMARY KEY (is_old, action_id, prog_level_id)
);
CREATE INDEX fk_classificator_eku_edit_action ON esz.classificator_eku_edit_prog USING btree (action_id);
COMMENT ON TABLE esz.classificator_eku_edit_prog IS 'Используется для хранения изменений в связях РБНДО с уровнями программы (Профессий с квалификациями)';

-- Column comments

COMMENT ON COLUMN esz.classificator_eku_edit_prog.action_id IS 'Ссылка на действие';
COMMENT ON COLUMN esz.classificator_eku_edit_prog.is_old IS 'Старое или новое значение (0- старое, 1- новое)';
COMMENT ON COLUMN esz.classificator_eku_edit_prog.prog_level_id IS 'Ссылка на esz.ProgrammLevel';


-- esz.classificator_eku_limit definition

-- Drop table

-- DROP TABLE esz.classificator_eku_limit;

CREATE TABLE esz.classificator_eku_limit (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	classificator_eku_id int4 NOT NULL, -- Уникальный идентификатор классификатора
	education_type_id int4 NOT NULL, -- Уникальный идентификатор типа обучения
	organization_id int4 NOT NULL, -- Уникальный идентификатор организации
	limit_volume int4 NULL, -- Количество бюджетных мест (лимит) по профессии
	is_archive bool DEFAULT false NOT NULL, -- Признак архивной записи
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата обновления
	year_of_training_id int4 NOT NULL, -- Уникальный идентификатор года обучения
	CONSTRAINT classificator_eku_limit_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_classificator_eku_limit_education_type ON esz.classificator_eku_limit USING btree (education_type_id);
CREATE INDEX fk_classificator_eku_limit_organization ON esz.classificator_eku_limit USING btree (organization_id);
CREATE INDEX fk_classificator_eku_limit_year_of_training ON esz.classificator_eku_limit USING btree (year_of_training_id);
CREATE INDEX ind_classificator_eku_limit_refs ON esz.classificator_eku_limit USING btree (classificator_eku_id, education_type_id, organization_id, year_of_training_id);
COMMENT ON TABLE esz.classificator_eku_limit IS 'Параметры ограничения бесплатных мест для зачисления для типа образования "Профессиональное образование"';

-- Column comments

COMMENT ON COLUMN esz.classificator_eku_limit.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.classificator_eku_limit.classificator_eku_id IS 'Уникальный идентификатор классификатора';
COMMENT ON COLUMN esz.classificator_eku_limit.education_type_id IS 'Уникальный идентификатор типа обучения';
COMMENT ON COLUMN esz.classificator_eku_limit.organization_id IS 'Уникальный идентификатор организации';
COMMENT ON COLUMN esz.classificator_eku_limit.limit_volume IS 'Количество бюджетных мест (лимит) по профессии';
COMMENT ON COLUMN esz.classificator_eku_limit.is_archive IS 'Признак архивной записи';
COMMENT ON COLUMN esz.classificator_eku_limit.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.classificator_eku_limit.date_change IS 'Дата обновления';
COMMENT ON COLUMN esz.classificator_eku_limit.year_of_training_id IS 'Уникальный идентификатор года обучения';


-- esz.classificator_to_organization_rel definition

-- Drop table

-- DROP TABLE esz.classificator_to_organization_rel;

CREATE TABLE esz.classificator_to_organization_rel (
	classificator_eku_id int4 NOT NULL, -- Уникальный идентификатор классификатора
	organization_id int4 NOT NULL, -- Уникальный идентификатор организации
	education_type_id int4 NOT NULL, -- Уникальный идентификатор типа обучения
	vedomstvo_id int4 NOT NULL, -- Уникальный идентификатор ведомства
	date_create timestamp(0) NOT NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата обновления
	doc_start timestamp(0) NULL, -- Дата начала действия договора
	doc_end timestamp(0) NULL, -- Дата окончания действия договора
	is_archive bool DEFAULT false NOT NULL, -- Признак архивной записи
	CONSTRAINT classificator_to_organization_rel_pkey PRIMARY KEY (classificator_eku_id, organization_id)
);
CREATE INDEX fk_organization_classificator_to_org ON esz.classificator_to_organization_rel USING btree (organization_id);
COMMENT ON TABLE esz.classificator_to_organization_rel IS 'Связь ограничений по РБНДО для организации';

-- Column comments

COMMENT ON COLUMN esz.classificator_to_organization_rel.classificator_eku_id IS 'Уникальный идентификатор классификатора';
COMMENT ON COLUMN esz.classificator_to_organization_rel.organization_id IS 'Уникальный идентификатор организации';
COMMENT ON COLUMN esz.classificator_to_organization_rel.education_type_id IS 'Уникальный идентификатор типа обучения';
COMMENT ON COLUMN esz.classificator_to_organization_rel.vedomstvo_id IS 'Уникальный идентификатор ведомства';
COMMENT ON COLUMN esz.classificator_to_organization_rel.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.classificator_to_organization_rel.date_change IS 'Дата обновления';
COMMENT ON COLUMN esz.classificator_to_organization_rel.doc_start IS 'Дата начала действия договора';
COMMENT ON COLUMN esz.classificator_to_organization_rel.doc_end IS 'Дата окончания действия договора';
COMMENT ON COLUMN esz.classificator_to_organization_rel.is_archive IS 'Признак архивной записи';


-- esz.errors definition

-- Drop table

-- DROP TABLE esz.errors;

CREATE TABLE esz.errors (
	id serial4 NOT NULL, -- Первичный ключ
	user_id int4 NULL, -- Идентификатор пользователя в ЕСЗ
	user_login varchar(500) NULL, -- Логин пользователя в ЕСЗ
	guid uuid NULL, -- Уникальный идентификатор ошибки
	"timestamp" int4 NULL, -- Время генерации подписи в формате Unix timestamp
	message text NULL, -- Текст ошибки
	stack_trace text NULL, -- Stack trace ошибки
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT errors_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_errors_user ON esz.errors USING btree (user_id);
COMMENT ON TABLE esz.errors IS 'Информация об ошибках, вызываемых действиями пользователей ЕСЗ';

-- Column comments

COMMENT ON COLUMN esz.errors.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.errors.user_id IS 'Идентификатор пользователя в ЕСЗ';
COMMENT ON COLUMN esz.errors.user_login IS 'Логин пользователя в ЕСЗ';
COMMENT ON COLUMN esz.errors.guid IS 'Уникальный идентификатор ошибки';
COMMENT ON COLUMN esz.errors."timestamp" IS 'Время генерации подписи в формате Unix timestamp';
COMMENT ON COLUMN esz.errors.message IS 'Текст ошибки';
COMMENT ON COLUMN esz.errors.stack_trace IS 'Stack trace ошибки';
COMMENT ON COLUMN esz.errors.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.errors.date_change IS 'Дата последнего изменения записи';
COMMENT ON COLUMN esz.errors.is_archive IS 'Признак архивности';


-- esz.filter_organization_rel definition

-- Drop table

-- DROP TABLE esz.filter_organization_rel;

CREATE TABLE esz.filter_organization_rel (
	organization_id int4 NOT NULL, -- Итентификатор организации
	filter_id int4 NOT NULL, -- Идентификатор фильтра
	CONSTRAINT filter_organization_rel_pkey PRIMARY KEY (organization_id, filter_id)
);
CREATE INDEX fk_filter_organization_rel2 ON esz.filter_organization_rel USING btree (filter_id);
COMMENT ON TABLE esz.filter_organization_rel IS 'Промежуточная таблица для множественных связей таблицы Filter со справочником организаций';

-- Column comments

COMMENT ON COLUMN esz.filter_organization_rel.organization_id IS 'Итентификатор организации';
COMMENT ON COLUMN esz.filter_organization_rel.filter_id IS 'Идентификатор фильтра';


-- esz.logging definition

-- Drop table

-- DROP TABLE esz.logging;

CREATE TABLE esz.logging (
	id serial4 NOT NULL, -- Уникальный идентификатор
	user_id int4 NULL, -- Уникальный идентификатор
	logging_type_id int4 NULL, -- Уникальный идентификатор
	sign_id int4 NULL, -- Уникальный идентификатор
	date_time timestamp(0) NULL, -- Дата операции
	description varchar(4000) NULL, -- Комментарий
	success bool DEFAULT true NULL, -- Признак успешности операции
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	extend_entity_guid uuid NULL, -- Уникальный идентификатор сущности
	CONSTRAINT logging_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_sign_to_log_rel ON esz.logging USING btree (sign_id);
CREATE INDEX ind_logging_date ON esz.logging USING btree (date_time);
CREATE INDEX ind_logging_extend_entity_guid ON esz.logging USING btree (extend_entity_guid);
CREATE INDEX ind_logging_type ON esz.logging USING btree (logging_type_id);
CREATE INDEX ind_user ON esz.logging USING btree (user_id);
COMMENT ON TABLE esz.logging IS 'Логирование операций';

-- Column comments

COMMENT ON COLUMN esz.logging.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.logging.user_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.logging.logging_type_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.logging.sign_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.logging.date_time IS 'Дата операции';
COMMENT ON COLUMN esz.logging.description IS 'Комментарий';
COMMENT ON COLUMN esz.logging.success IS 'Признак успешности операции';
COMMENT ON COLUMN esz.logging.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.logging.extend_entity_guid IS 'Уникальный идентификатор сущности';


-- esz.mrsd definition

-- Drop table

-- DROP TABLE esz.mrsd;

CREATE TABLE esz.mrsd (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	mrsd_org_id int4 NOT NULL, -- Идентификатор организации МРСД
	date_create timestamp(0) NOT NULL, -- Дата создания записи
	date_change timestamp(0) NOT NULL, -- Дата изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивной записи
	external_uid varchar(100) NULL, -- идентификатор во внешней системе
	CONSTRAINT mrsd_pkey PRIMARY KEY (id)
);
CREATE INDEX mrsd_org_id_indx ON esz.mrsd USING btree (mrsd_org_id);
COMMENT ON TABLE esz.mrsd IS 'МРСД';

-- Column comments

COMMENT ON COLUMN esz.mrsd.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.mrsd.mrsd_org_id IS 'Идентификатор организации МРСД';
COMMENT ON COLUMN esz.mrsd.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.mrsd.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.mrsd.is_archive IS 'Признак архивной записи';
COMMENT ON COLUMN esz.mrsd.external_uid IS 'идентификатор во внешней системе';


-- esz.office_code definition

-- Drop table

-- DROP TABLE esz.office_code;

CREATE TABLE esz.office_code (
	items_work_id int4 NULL, -- Уникальный идентификатор
	union_catalog_services_id int4 NULL, -- Уникальный идентификатор
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	room_number varchar(50) NULL, -- Номер комнаты для приема документов
	CONSTRAINT office_code_pkey PRIMARY KEY (id)
);
CREATE INDEX ind_iw ON esz.office_code USING btree (items_work_id);
CREATE INDEX ind_office_code_ucs ON esz.office_code USING btree (union_catalog_services_id);
COMMENT ON TABLE esz.office_code IS 'Связь услуги и пункта с расписанием';

-- Column comments

COMMENT ON COLUMN esz.office_code.items_work_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.office_code.union_catalog_services_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.office_code.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.office_code.room_number IS 'Номер комнаты для приема документов';


-- esz.organization definition

-- Drop table

-- DROP TABLE esz.organization;

CREATE TABLE esz.organization (
	id serial4 NOT NULL, -- Уникальный идентификатор
	vedomstvo_id int4 NOT NULL, -- Уникальный идентификатор
	types_providing_services_id int4 NOT NULL, -- Уникальный идентификатор
	address_id int4 NULL, -- Уникальный идентификатор
	code varchar(6) NULL, -- Уникальный код организации оказания услуг, состоящий из 6 (шести) десятичных разрядов.
	full_name varchar(1000) NOT NULL, -- Полное наименование организации оказания услуг.
	short_name varchar(500) NOT NULL, -- Сокращенное наименование организации оказания услуг
	description text NULL, -- Описание
	inn varchar(12) NOT NULL, -- ИНН¶            
	kpp varchar(9) NOT NULL, -- КПП
	ogrn varchar(20) NOT NULL, -- ОГРН
	is_it_gov bool NULL, -- Признак, указывающий на организационно-правовую форму организации оказания услуг: «true» - государственная (муниципальный, субъекта РФ); «false» - негосударственная.
	person varchar(200) NULL, -- Фамилия, имя и отчество руководителя организации оказания услуг на русском языке.
	person_position varchar(200) NULL, -- Наименование должности руководителя организации оказания услуг на русском языке.
	phone text NULL, -- Контактный телефон организации оказания услуг. 
	email varchar(500) NULL, -- Адрес электронной почты. 
	www varchar(500) NULL, -- Адрес интернет-сайта организации оказания услуг. 
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивной записи
	ekis_ids varchar(100) NULL, -- Идентификатор в EKIS (устарел)
	is_items_work bool NULL, -- Признак того, что адрес организации является местом приема документов
	is_place_service bool NULL, -- Признак того, что адрес организации является местом предоставления услуг
	okato varchar(50) NULL, -- ОКАТО
	organization_id int4 NULL, -- Уникальный идентификатор организации
	ekis_guid varchar(50) NULL, -- Глобальный идентификатор в EKIS (устарел)
	external_uid varchar(100) NULL, -- Внешний идентификатор
	organization_status_id int4 NULL, -- Статус организации
	"hierarchy" varchar(1000) NULL, -- Отраслевое подчинение
	creator varchar(1000) NULL, -- Учредитель
	ekis_type2015 varchar(500) NULL, -- Тип в EKIS (устарел)
	mrsd_id int4 NULL, -- Уникальный идентификатор межрайонного совета директоров
	is_css_organization bool DEFAULT false NOT NULL, -- Организация является центром социального обслуживания
	is_dspp_organization bool DEFAULT false NOT NULL, -- Организация относится к управлению социальной защиты населения
	dtszn_code int4 NULL, -- Код ДТСЗН, непонятно для чего
	head_organization_id int4 NULL, -- Ссылка на головную организацию
	is_day_care_group_publicated bool DEFAULT false NOT NULL, -- Организация является источником услуг для портала Mos.ru
	external_system_id int4 NULL, -- Идентификатор внешней системы
	is_test bool DEFAULT false NOT NULL, -- Признак тестовой организации
	organization_type_financing_id int4 NULL, -- Ссылка на тип финансирования организации
	extend_entity_guid uuid DEFAULT gen_random_uuid() NOT NULL, -- Уникальный идентификатор сущности
	legal_form_id int4 NULL, -- Организационно-правовая форма
	CONSTRAINT organization_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_mrsd_organization ON esz.organization USING btree (mrsd_id);
CREATE INDEX fk_organization_external_system ON esz.organization USING btree (external_system_id);
CREATE INDEX fk_organization_head_organization ON esz.organization USING btree (head_organization_id);
CREATE INDEX fk_organization_rel ON esz.organization USING btree (organization_id);
CREATE INDEX fk_organization_type_financing ON esz.organization USING btree (organization_type_financing_id);
CREATE INDEX fk_sch_type_code ON esz.organization USING btree (types_providing_services_id);
CREATE INDEX fk_status_id ON esz.organization USING btree (organization_status_id);
CREATE INDEX fts_short_name ON esz.organization USING gin (to_tsvector('russian'::regconfig, (short_name)::text));
CREATE INDEX idx_organization_dogm8_report3456 ON esz.organization USING btree (types_providing_services_id, vedomstvo_id) WHERE (NOT is_archive);
CREATE INDEX ind_address ON esz.organization USING btree (address_id);
CREATE INDEX ind_ekis_guid ON esz.organization USING btree (ekis_guid);
CREATE INDEX ind_ext ON esz.organization USING btree (ekis_ids);
CREATE INDEX ind_organization_extend_entity_guid ON esz.organization USING btree (extend_entity_guid);
CREATE INDEX ind_organization_external_uid ON esz.organization USING btree (external_uid);
CREATE INDEX ind_organization_vedomstvo_id ON esz.organization USING btree (vedomstvo_id);
COMMENT ON TABLE esz.organization IS 'Организации оказания услуг';

-- Column comments

COMMENT ON COLUMN esz.organization.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization.vedomstvo_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization.types_providing_services_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization.address_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization.code IS 'Уникальный код организации оказания услуг, состоящий из 6 (шести) десятичных разрядов.';
COMMENT ON COLUMN esz.organization.full_name IS 'Полное наименование организации оказания услуг.';
COMMENT ON COLUMN esz.organization.short_name IS 'Сокращенное наименование организации оказания услуг';
COMMENT ON COLUMN esz.organization.description IS 'Описание';
COMMENT ON COLUMN esz.organization.inn IS 'ИНН
            ';
COMMENT ON COLUMN esz.organization.kpp IS 'КПП';
COMMENT ON COLUMN esz.organization.ogrn IS 'ОГРН';
COMMENT ON COLUMN esz.organization.is_it_gov IS 'Признак, указывающий на организационно-правовую форму организации оказания услуг: «true» - государственная (муниципальный, субъекта РФ); «false» - негосударственная.';
COMMENT ON COLUMN esz.organization.person IS 'Фамилия, имя и отчество руководителя организации оказания услуг на русском языке.';
COMMENT ON COLUMN esz.organization.person_position IS 'Наименование должности руководителя организации оказания услуг на русском языке.';
COMMENT ON COLUMN esz.organization.phone IS 'Контактный телефон организации оказания услуг. ';
COMMENT ON COLUMN esz.organization.email IS 'Адрес электронной почты. ';
COMMENT ON COLUMN esz.organization.www IS 'Адрес интернет-сайта организации оказания услуг. ';
COMMENT ON COLUMN esz.organization.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.organization.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.organization.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.organization.is_archive IS 'Признак архивной записи';
COMMENT ON COLUMN esz.organization.ekis_ids IS 'Идентификатор в EKIS (устарел)';
COMMENT ON COLUMN esz.organization.is_items_work IS 'Признак того, что адрес организации является местом приема документов';
COMMENT ON COLUMN esz.organization.is_place_service IS 'Признак того, что адрес организации является местом предоставления услуг';
COMMENT ON COLUMN esz.organization.okato IS 'ОКАТО';
COMMENT ON COLUMN esz.organization.organization_id IS 'Уникальный идентификатор организации';
COMMENT ON COLUMN esz.organization.ekis_guid IS 'Глобальный идентификатор в EKIS (устарел)';
COMMENT ON COLUMN esz.organization.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.organization.organization_status_id IS 'Статус организации';
COMMENT ON COLUMN esz.organization."hierarchy" IS 'Отраслевое подчинение';
COMMENT ON COLUMN esz.organization.creator IS 'Учредитель';
COMMENT ON COLUMN esz.organization.ekis_type2015 IS 'Тип в EKIS (устарел)';
COMMENT ON COLUMN esz.organization.mrsd_id IS 'Уникальный идентификатор межрайонного совета директоров';
COMMENT ON COLUMN esz.organization.is_css_organization IS 'Организация является центром социального обслуживания';
COMMENT ON COLUMN esz.organization.is_dspp_organization IS 'Организация относится к управлению социальной защиты населения';
COMMENT ON COLUMN esz.organization.dtszn_code IS 'Код ДТСЗН, непонятно для чего';
COMMENT ON COLUMN esz.organization.head_organization_id IS 'Ссылка на головную организацию';
COMMENT ON COLUMN esz.organization.is_day_care_group_publicated IS 'Организация является источником услуг для портала Mos.ru';
COMMENT ON COLUMN esz.organization.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.organization.is_test IS 'Признак тестовой организации';
COMMENT ON COLUMN esz.organization.organization_type_financing_id IS 'Ссылка на тип финансирования организации';
COMMENT ON COLUMN esz.organization.extend_entity_guid IS 'Уникальный идентификатор сущности';
COMMENT ON COLUMN esz.organization.legal_form_id IS 'Организационно-правовая форма';


-- esz.organization_address_rel definition

-- Drop table

-- DROP TABLE esz.organization_address_rel;

CREATE TABLE esz.organization_address_rel (
	organization_id int4 NOT NULL, -- Ссылка на организацию
	address_id int4 NOT NULL, -- Ссылка на адрес
	CONSTRAINT organization_address_rel_pkey PRIMARY KEY (organization_id, address_id)
);
CREATE INDEX fk_organization_address_rel2 ON esz.organization_address_rel USING btree (address_id);
COMMENT ON TABLE esz.organization_address_rel IS 'Связь организации с адресами';

-- Column comments

COMMENT ON COLUMN esz.organization_address_rel.organization_id IS 'Ссылка на организацию';
COMMENT ON COLUMN esz.organization_address_rel.address_id IS 'Ссылка на адрес';


-- esz.organization_building_resource definition

-- Drop table

-- DROP TABLE esz.organization_building_resource;

CREATE TABLE esz.organization_building_resource (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	place_service_id int4 NULL, -- Уникальный идентификатор
	organization_id int4 NULL, -- Уникальный идентификатор
	"name" varchar(200) NULL, -- Наименование
	description varchar(500) NULL, -- Описание
	capacity int4 NULL, -- Вместимость
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	address_id int4 NULL, -- Идентификатор адреса
	work_time_from varchar(9) NULL, -- Время начала работы
	work_time_to varchar(5) NULL, -- Время окончания работы
	CONSTRAINT organization_building_resource_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_org_resource_place_rel ON esz.organization_building_resource USING btree (place_service_id);
CREATE INDEX fk_res_org_rel ON esz.organization_building_resource USING btree (organization_id);
CREATE INDEX ind_organization_building_resource_addr ON esz.organization_building_resource USING btree (address_id);
COMMENT ON TABLE esz.organization_building_resource IS 'Ресурсы учреждения';

-- Column comments

COMMENT ON COLUMN esz.organization_building_resource.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.organization_building_resource.place_service_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization_building_resource.organization_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization_building_resource."name" IS 'Наименование';
COMMENT ON COLUMN esz.organization_building_resource.description IS 'Описание';
COMMENT ON COLUMN esz.organization_building_resource.capacity IS 'Вместимость';
COMMENT ON COLUMN esz.organization_building_resource.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.organization_building_resource.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.organization_building_resource.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.organization_building_resource.address_id IS 'Идентификатор адреса';
COMMENT ON COLUMN esz.organization_building_resource.work_time_from IS 'Время начала работы';
COMMENT ON COLUMN esz.organization_building_resource.work_time_to IS 'Время окончания работы';


-- esz.organization_class_parallel_rel definition

-- Drop table

-- DROP TABLE esz.organization_class_parallel_rel;

CREATE TABLE esz.organization_class_parallel_rel (
	id serial4 NOT NULL, -- Первичный ключ
	organization_id int4 NULL, -- Идентификатор записи таблицы Organization
	class_parallel_id int4 NULL, -- Идентификатор записи таблицы ClassParallel
	is_use_parallel bool NULL, -- Переключатель использования параллели в текущем учебном году. Если значение 1 - то параллель доступна для зачисления. 0 - недоступна
	external_system_id int4 NULL, -- Идентификатор записи таблицы ExternalSystem
	external_uid varchar(36) NULL, -- Атрибут global_id подкаталога параллелей(parallel_list)
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	CONSTRAINT organization_class_parallel_rel_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_class_parallel_org_rel ON esz.organization_class_parallel_rel USING btree (class_parallel_id);
CREATE INDEX fk_org_class_parallel_rel ON esz.organization_class_parallel_rel USING btree (organization_id);
CREATE INDEX fk_organization_class_parallel_rel_external_system ON esz.organization_class_parallel_rel USING btree (external_system_id);
COMMENT ON TABLE esz.organization_class_parallel_rel IS 'В данную таблицу будут разбираться данные из НСИ3 в части подкаталога параллелей';

-- Column comments

COMMENT ON COLUMN esz.organization_class_parallel_rel.id IS 'Первичный ключ';
COMMENT ON COLUMN esz.organization_class_parallel_rel.organization_id IS 'Идентификатор записи таблицы Organization';
COMMENT ON COLUMN esz.organization_class_parallel_rel.class_parallel_id IS 'Идентификатор записи таблицы ClassParallel';
COMMENT ON COLUMN esz.organization_class_parallel_rel.is_use_parallel IS 'Переключатель использования параллели в текущем учебном году. Если значение 1 - то параллель доступна для зачисления. 0 - недоступна';
COMMENT ON COLUMN esz.organization_class_parallel_rel.external_system_id IS 'Идентификатор записи таблицы ExternalSystem';
COMMENT ON COLUMN esz.organization_class_parallel_rel.external_uid IS 'Атрибут global_id подкаталога параллелей(parallel_list)';
COMMENT ON COLUMN esz.organization_class_parallel_rel.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.organization_class_parallel_rel.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.organization_class_parallel_rel.date_change IS 'Дата изменения записи';

-- Table Triggers

create trigger t_organization_class_parallel_rel before
update
    on
    esz.organization_class_parallel_rel for each row execute function esz.insert_current_timestamp();


-- esz.organization_history definition

-- Drop table

-- DROP TABLE esz.organization_history;

CREATE TABLE esz.organization_history (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	source_id int4 NULL, -- Идентификатор организации источника
	result_id int4 NULL, -- Идентификатор организации приемника
	organization_history_type_id int4 NULL, -- Уникальный идентификатор
	organization_id int4 NULL, -- Уникальный идентификатор
	linked_ou_id int4 NULL, -- Идентификатор образовательного учреждения
	event_code int4 NULL, -- Код события
	event_type varchar(3000) NULL, -- Тип события
	author_code int4 NULL, -- Код автора изменений
	author_name varchar(3000) NULL, -- Автор изменений
	event_date timestamp(0) NULL, -- Дата события
	"comment" varchar(800) NULL, -- Комментарий
	parent_org_ekis_id int4 NULL, -- Родительский код ЕКИС организации (код ЕКИС организации, над которой осуществляется событие)
	org_ekis_id int4 NULL, -- Дочерний код ЕКИС организации (код ЕКИС организации- приемника данных)
	event_id int4 NULL, -- Идентификатор события
	external_uid int4 NULL, -- Идентификатор во внешней системе
	external_system_id int4 NULL, -- Ссылка на внешнюю систему
	CONSTRAINT organization_history_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_ind_type_history ON esz.organization_history USING btree (organization_history_type_id);
CREATE INDEX fk_organization_history_external_system ON esz.organization_history USING btree (external_system_id);
CREATE INDEX ind_organization_history_external_uid ON esz.organization_history USING btree (external_uid);
CREATE INDEX ind_result_event ON esz.organization_history USING btree (result_id);
CREATE INDEX ind_source_event ON esz.organization_history USING btree (source_id);
CREATE INDEX indlinked_ou ON esz.organization_history USING btree (linked_ou_id);
CREATE INDEX link_history ON esz.organization_history USING btree (organization_id);
COMMENT ON TABLE esz.organization_history IS 'Организации оказания услуг история';

-- Column comments

COMMENT ON COLUMN esz.organization_history.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.organization_history.source_id IS 'Идентификатор организации источника';
COMMENT ON COLUMN esz.organization_history.result_id IS 'Идентификатор организации приемника';
COMMENT ON COLUMN esz.organization_history.organization_history_type_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization_history.organization_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization_history.linked_ou_id IS 'Идентификатор образовательного учреждения';
COMMENT ON COLUMN esz.organization_history.event_code IS 'Код события';
COMMENT ON COLUMN esz.organization_history.event_type IS 'Тип события';
COMMENT ON COLUMN esz.organization_history.author_code IS 'Код автора изменений';
COMMENT ON COLUMN esz.organization_history.author_name IS 'Автор изменений';
COMMENT ON COLUMN esz.organization_history.event_date IS 'Дата события';
COMMENT ON COLUMN esz.organization_history."comment" IS 'Комментарий';
COMMENT ON COLUMN esz.organization_history.parent_org_ekis_id IS 'Родительский код ЕКИС организации (код ЕКИС организации, над которой осуществляется событие)';
COMMENT ON COLUMN esz.organization_history.org_ekis_id IS 'Дочерний код ЕКИС организации (код ЕКИС организации- приемника данных)';
COMMENT ON COLUMN esz.organization_history.event_id IS 'Идентификатор события';
COMMENT ON COLUMN esz.organization_history.external_uid IS 'Идентификатор во внешней системе';
COMMENT ON COLUMN esz.organization_history.external_system_id IS 'Ссылка на внешнюю систему';


-- esz.organization_program definition

-- Drop table

-- DROP TABLE esz.organization_program;

CREATE TABLE esz.organization_program (
	id serial4 NOT NULL, -- Уникальный идентификатор
	organization_id int4 NULL, -- Уникальный идентификатор
	prog_level_id int4 NULL, -- prog_level_id
	prog_id int4 NULL, -- prog_id
	prog_level_name varchar(1000) NULL, -- prog_level_name
	prog_name varchar(1000) NULL, -- prog_name
	napr varchar(1000) NULL, -- napr
	eo_id int4 NULL, -- eo_id
	CONSTRAINT organization_program_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_fk_link_org_program ON esz.organization_program USING btree (organization_id);
COMMENT ON TABLE esz.organization_program IS 'Организация. Образовательные программы';

-- Column comments

COMMENT ON COLUMN esz.organization_program.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization_program.organization_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization_program.prog_level_id IS 'prog_level_id';
COMMENT ON COLUMN esz.organization_program.prog_id IS 'prog_id';
COMMENT ON COLUMN esz.organization_program.prog_level_name IS 'prog_level_name';
COMMENT ON COLUMN esz.organization_program.prog_name IS 'prog_name';
COMMENT ON COLUMN esz.organization_program.napr IS 'napr';
COMMENT ON COLUMN esz.organization_program.eo_id IS 'eo_id';


-- esz.organization_to_items_work definition

-- Drop table

-- DROP TABLE esz.organization_to_items_work;

CREATE TABLE esz.organization_to_items_work (
	organization_id int4 NOT NULL, -- Уникальный идентификатор
	items_work_id int4 NOT NULL, -- Уникальный идентификатор
	CONSTRAINT organization_to_items_work_pkey PRIMARY KEY (organization_id, items_work_id)
);
CREATE INDEX fk_organization_to_items_work2 ON esz.organization_to_items_work USING btree (items_work_id);
COMMENT ON TABLE esz.organization_to_items_work IS 'Связь организации с пунктами работы с заявителями';

-- Column comments

COMMENT ON COLUMN esz.organization_to_items_work.organization_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization_to_items_work.items_work_id IS 'Уникальный идентификатор';


-- esz.organization_to_place definition

-- Drop table

-- DROP TABLE esz.organization_to_place;

CREATE TABLE esz.organization_to_place (
	organization_id int4 NOT NULL, -- Уникальный идентификатор
	place_service_id int4 NOT NULL, -- Уникальный идентификатор
	CONSTRAINT organization_to_place_pkey PRIMARY KEY (organization_id, place_service_id)
);
CREATE INDEX fk_organization_to_place2 ON esz.organization_to_place USING btree (place_service_id);
COMMENT ON TABLE esz.organization_to_place IS 'Свзяь организация с местом предоставления услуги';

-- Column comments

COMMENT ON COLUMN esz.organization_to_place.organization_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.organization_to_place.place_service_id IS 'Уникальный идентификатор';


-- esz.person_position_organization_rel definition

-- Drop table

-- DROP TABLE esz.person_position_organization_rel;

CREATE TABLE esz.person_position_organization_rel (
	person_id int4 NOT NULL, -- Ссылка на персоны
	person_position_id int4 NOT NULL, -- Ссылка на должности
	organization_id int4 NOT NULL, -- Ссылка на организации
	start_date timestamp(0) NULL, -- Дата начала работы
	finish_date timestamp(0) NULL, -- Дата окончания работы
	is_archive bool DEFAULT false NOT NULL, -- Признак архивной записи
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	CONSTRAINT person_position_organization_rel_pkey PRIMARY KEY (person_id, person_position_id, organization_id)
);
CREATE INDEX fk_organization_person_position_organization_rel ON esz.person_position_organization_rel USING btree (organization_id);
CREATE INDEX fk_person_position_person_position_organization_rel ON esz.person_position_organization_rel USING btree (person_position_id);
COMMENT ON TABLE esz.person_position_organization_rel IS 'Связь персоны с должностью и организацией';

-- Column comments

COMMENT ON COLUMN esz.person_position_organization_rel.person_id IS 'Ссылка на персоны';
COMMENT ON COLUMN esz.person_position_organization_rel.person_position_id IS 'Ссылка на должности';
COMMENT ON COLUMN esz.person_position_organization_rel.organization_id IS 'Ссылка на организации';
COMMENT ON COLUMN esz.person_position_organization_rel.start_date IS 'Дата начала работы';
COMMENT ON COLUMN esz.person_position_organization_rel.finish_date IS 'Дата окончания работы';
COMMENT ON COLUMN esz.person_position_organization_rel.is_archive IS 'Признак архивной записи';
COMMENT ON COLUMN esz.person_position_organization_rel.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.person_position_organization_rel.date_change IS 'Дата изменения записи';


-- esz.photo definition

-- Drop table

-- DROP TABLE esz.photo;

CREATE TABLE esz.photo (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	organization_id int4 NULL, -- Уникальный идентификатор
	"name" varchar(200) NULL, -- Наименование
	description varchar(500) NULL, -- Описание
	source_file_name varchar(512) NULL, -- Наименование источника файла
	file_path varchar(500) NULL, -- Путь к файлу
	width int4 NULL, -- Ширина
	height int4 NULL, -- Высота
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	union_catalog_services_id int4 NULL, -- Идентификатор услуги, к которой относится фотография
	sort_order int4 NULL, -- Порядковый номер фотографии на странице
	photo_size int4 NULL, -- Размер (вес) фотографии, Мб
	photo_date_change timestamp(0) NULL, -- Дата и время изменения файла (свойство файла, а не записи)
	CONSTRAINT photo_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_photo_union_catalog_services ON esz.photo USING btree (union_catalog_services_id);
CREATE INDEX ind_photo_organization_id ON esz.photo USING btree (organization_id);
COMMENT ON INDEX esz.ind_photo_organization_id IS 'Индекс по организации';
COMMENT ON TABLE esz.photo IS 'Фотографии учреждений';

-- Column comments

COMMENT ON COLUMN esz.photo.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.photo.organization_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.photo."name" IS 'Наименование';
COMMENT ON COLUMN esz.photo.description IS 'Описание';
COMMENT ON COLUMN esz.photo.source_file_name IS 'Наименование источника файла';
COMMENT ON COLUMN esz.photo.file_path IS 'Путь к файлу';
COMMENT ON COLUMN esz.photo.width IS 'Ширина';
COMMENT ON COLUMN esz.photo.height IS 'Высота';
COMMENT ON COLUMN esz.photo.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.photo.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.photo.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.photo.union_catalog_services_id IS 'Идентификатор услуги, к которой относится фотография';
COMMENT ON COLUMN esz.photo.sort_order IS 'Порядковый номер фотографии на странице';
COMMENT ON COLUMN esz.photo.photo_size IS 'Размер (вес) фотографии, Мб';
COMMENT ON COLUMN esz.photo.photo_date_change IS 'Дата и время изменения файла (свойство файла, а не записи)';


-- esz.preliminary_request definition

-- Drop table

-- DROP TABLE esz.preliminary_request;

CREATE TABLE esz.preliminary_request (
	id serial4 NOT NULL, -- Уникальный идентификатор записи в БД
	contract_number varchar(100) NOT NULL, -- Идентификатор договора в МЭШ.Договор
	external_uid uuid NULL, -- Идентификатор заявления на портале mos.ru
	external_system_id int4 NOT NULL, -- Идентификатор внешней системы
	contract_id int4 NULL, -- Идентификатор договора
	request_id int4 NULL, -- Идентификатор заявления
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности записи
	received_online bool NULL, -- Договор получен online
	accepted_online bool NULL, -- Договор подписан online
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата последнего изменения записи
	CONSTRAINT preliminary_request_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_preliminary_request_contract ON esz.preliminary_request USING btree (contract_id);
CREATE UNIQUE INDEX ind_preliminary_request_external_uid ON esz.preliminary_request USING btree (external_uid);
CREATE INDEX ind_preliminary_request_request ON esz.preliminary_request USING btree (request_id);
COMMENT ON TABLE esz.preliminary_request IS 'Предварительные проекты электронных договоров по заявлениям с портала mos.ru';

-- Column comments

COMMENT ON COLUMN esz.preliminary_request.id IS 'Уникальный идентификатор записи в БД';
COMMENT ON COLUMN esz.preliminary_request.contract_number IS 'Идентификатор договора в МЭШ.Договор';
COMMENT ON COLUMN esz.preliminary_request.external_uid IS 'Идентификатор заявления на портале mos.ru';
COMMENT ON COLUMN esz.preliminary_request.external_system_id IS 'Идентификатор внешней системы';
COMMENT ON COLUMN esz.preliminary_request.contract_id IS 'Идентификатор договора';
COMMENT ON COLUMN esz.preliminary_request.request_id IS 'Идентификатор заявления';
COMMENT ON COLUMN esz.preliminary_request.is_archive IS 'Признак архивности записи';
COMMENT ON COLUMN esz.preliminary_request.received_online IS 'Договор получен online';
COMMENT ON COLUMN esz.preliminary_request.accepted_online IS 'Договор подписан online';
COMMENT ON COLUMN esz.preliminary_request.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.preliminary_request.date_change IS 'Дата последнего изменения записи';


-- esz.pupil_completion_document definition

-- Drop table

-- DROP TABLE esz.pupil_completion_document;

CREATE TABLE esz.pupil_completion_document (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	document_type_id int4 NULL, -- Уникальный идентификатор типа документа
	doc_number varchar(50) NULL, -- Номер документа
	issue_date timestamp(0) NULL, -- Дата подписания документа
	pupil_id int4 NULL, -- Уникальный идентификатор ученика
	union_catalog_services_id int4 NULL, -- Уникальный идентификатор услуги
	programm_module_id int4 NULL, -- Уникальный идентификатор модуля программы
	organization_id int4 NULL, -- Уникальный идентификатор организации
	reaccept_id int4 NULL, -- Документ с которого был произведен перезачет
	state bool DEFAULT false NOT NULL, -- Признак редактируемости документа
	is_archive bool NOT NULL, -- Признак архивной записи
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	CONSTRAINT pupil_completion_document_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_pupil_completion_document_document_type_rel ON esz.pupil_completion_document USING btree (document_type_id);
CREATE INDEX fk_pupil_completion_document_organization_rel ON esz.pupil_completion_document USING btree (organization_id);
CREATE INDEX fk_pupil_completion_document_programm_module_rel ON esz.pupil_completion_document USING btree (programm_module_id);
CREATE INDEX fk_pupil_completion_document_union_catalog_services_rel ON esz.pupil_completion_document USING btree (union_catalog_services_id);
CREATE INDEX fk_pupil_pupil_completion_document_rel ON esz.pupil_completion_document USING btree (pupil_id);
CREATE INDEX ind_pupil_completion_docs_state_pupil_doc_typ_service_module_or ON esz.pupil_completion_document USING btree (state, pupil_id, document_type_id, union_catalog_services_id, programm_module_id, organization_id);
COMMENT ON TABLE esz.pupil_completion_document IS 'Документ о завершении обучения';

-- Column comments

COMMENT ON COLUMN esz.pupil_completion_document.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.pupil_completion_document.document_type_id IS 'Уникальный идентификатор типа документа';
COMMENT ON COLUMN esz.pupil_completion_document.doc_number IS 'Номер документа';
COMMENT ON COLUMN esz.pupil_completion_document.issue_date IS 'Дата подписания документа';
COMMENT ON COLUMN esz.pupil_completion_document.pupil_id IS 'Уникальный идентификатор ученика';
COMMENT ON COLUMN esz.pupil_completion_document.union_catalog_services_id IS 'Уникальный идентификатор услуги';
COMMENT ON COLUMN esz.pupil_completion_document.programm_module_id IS 'Уникальный идентификатор модуля программы';
COMMENT ON COLUMN esz.pupil_completion_document.organization_id IS 'Уникальный идентификатор организации';
COMMENT ON COLUMN esz.pupil_completion_document.reaccept_id IS 'Документ с которого был произведен перезачет';
COMMENT ON COLUMN esz.pupil_completion_document.state IS 'Признак редактируемости документа';
COMMENT ON COLUMN esz.pupil_completion_document.is_archive IS 'Признак архивной записи';
COMMENT ON COLUMN esz.pupil_completion_document.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.pupil_completion_document.date_change IS 'Дата изменения записи';


-- esz.pupil_completion_document_file_rel definition

-- Drop table

-- DROP TABLE esz.pupil_completion_document_file_rel;

CREATE TABLE esz.pupil_completion_document_file_rel (
	pupil_completion_document_id int4 NOT NULL, -- Ссылка на таблицу с документами учеников, PupilCompletionDocument
	file_data_id int4 NOT NULL, -- Ссылка на файл в базе eszFileStorage, таблица FileData
	CONSTRAINT pupil_completion_document_file_rel_pkey PRIMARY KEY (pupil_completion_document_id, file_data_id)
);
CREATE INDEX fk_pupil_completion_document_file ON esz.pupil_completion_document_file_rel USING btree (pupil_completion_document_id);
COMMENT ON TABLE esz.pupil_completion_document_file_rel IS 'Связь таблиц pupil_completion_document и file';

-- Column comments

COMMENT ON COLUMN esz.pupil_completion_document_file_rel.pupil_completion_document_id IS 'Ссылка на таблицу с документами учеников, PupilCompletionDocument';
COMMENT ON COLUMN esz.pupil_completion_document_file_rel.file_data_id IS 'Ссылка на файл в базе eszFileStorage, таблица FileData';


-- esz.request definition

-- Drop table

-- DROP TABLE esz.request;

CREATE TABLE esz.request (
	id serial4 NOT NULL, -- Уникальный идентификатор
	child_information_id int4 NULL, -- Уникальный идентификатор
	request_status_id int4 NULL, -- Уникальный идентификатор
	applicant_information_id int4 NULL, -- Уникальный идентификатор
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивной записи
	flag_last bool DEFAULT true NOT NULL, -- Признак последней версии
	date_request timestamp(0) NULL, -- Дата заявки
	mark_evalution int4 NULL, -- Оценка испытания
	date_evalution timestamp(0) NULL, -- Дата испытания
	comment_evalution text NULL, -- Комментарий к испытанию
	date_enrollment timestamp(0) NULL, -- Зачисление - дата зачисления
	booking_guid uuid NULL, -- Идентификатор брони
	schedule_of_timetable_id int4 NULL, -- Уникальный идентификатор
	document_type_id int4 NULL, -- Уникальный идентификатор
	request_source_id int4 NULL, -- Уникальный идентификатор источника заявления
	document_type_id2 int4 NULL, -- Уникальный идентификатор
	request_number varchar(50) NULL, -- Номер заявления
	info_accepted bool NULL, -- Данные подтверждены
	enrollment_doc_number text NULL, -- Зачисление - номер документа
	enrollment_doc_date timestamp(0) NULL, -- Зачисление - дата документа
	enrollment_comment text NULL, -- Зачисление - комментарий
	exclude_date timestamp(0) NULL, -- Отчисление - дата отчисления
	exclude_doc_number text NULL, -- Отчисление - номер документа
	exclude_doc_date timestamp(0) NULL, -- Отчисление - дата документа
	exclude_comment text NULL, -- Отчисление - комментарий
	enrollment_decline_comment text NULL, -- Комментарий к отказу в зачислении
	external_uid varchar(100) NULL, -- Внешний идентификатор
	is_evaluation_completed bool NULL, -- Испытания пройдены
	is_enrollment_approved bool NULL, -- Направлен на зачисление
	is_enrolled bool NULL, -- Зачислен
	is_excluded bool NULL, -- Отчислен
	is_enrollment_declined bool NULL, -- Отказ в зачислении
	request_decline_reason_id int4 NULL, -- Идентификатор причины отказа по заявлению
	is_enroll_approve_comment text NULL, -- Зачисление одобрено (после прохождения испытаний)
	union_catalog_services_id int4 NULL, -- Ссылка на услугу
	pupil_id int4 NULL, -- Идентификатор
	need_reindex int2 NOT NULL, -- Признак что нужно обновить индекс
	sso_id varchar(50) NULL, -- Идентификатор заявителя на портале
	multi_id int4 NULL, -- Задвоенные заявления (устарело)
	class_parallel_id int4 DEFAULT 0 NULL, -- Ссылка на параллель класса
	class_letter_id int4 DEFAULT 0 NULL, -- Ссылка на букву класса
	desired_days int2 DEFAULT 0 NOT NULL, -- Желаемые дни посещения ГПД
	school_organization_id int4 NULL, -- Организация-школа, в которой обучается ученик
	status_change_date timestamp(0) NULL, -- Дата последнего изменения статуса
	contingent_link_type_id int4 DEFAULT 3 NOT NULL, -- Вид связи с реестром контингента
	contingent_check_date timestamp(0) NULL, -- Штамп времени последней сверки с Реестром контингента
	contingent_guid uuid NULL, -- Ссылка на соответствующую запись в Реестре контингента
	rmsp_check_status_deleted int4 NULL, -- Атрибут не используется
	privilege_category_id int4 NULL, -- Льготная категория
	extend_entity_guid uuid DEFAULT gen_random_uuid() NOT NULL, -- Уникальный идентификатор сущности
	external_system_id int4 NULL, -- Ссылка на тип внешней системы
	request_apply_reason_id int4 NULL, -- Причина подачи заявления (данный атрибут используется только для ВП)
	mesh_privilege_check_status int4 NULL, -- — статус обращения к сервису Льготники
	is_electronic_accept bool NULL, -- Заявление оформляется электронно
	test_date timestamp(0) NULL, -- Дата тестирования
	applicant_contingent_guid uuid NULL, -- Guid заявителя в МЭШ.Контингент
	service_class_id int4 NULL, -- Идентификатор группы обучения
	need_paper_contract bool NULL, -- Необходимость предоставить Заявителю договор в бумажном виде
	CONSTRAINT request_pkey PRIMARY KEY (id)
);
CREATE INDEX ind_applicant_information_id ON esz.request USING btree (applicant_information_id);
CREATE INDEX ind_child_information_id ON esz.request USING btree (child_information_id);
CREATE INDEX ind_ext_uid ON esz.request USING btree (external_uid, flag_last);
CREATE INDEX ind_pupl_upd ON esz.request USING btree (pupil_id);
CREATE INDEX ind_request_request_status_id ON esz.request USING btree (request_status_id);
CREATE INDEX ind_request_service_class_id ON esz.request USING btree (service_class_id);
CREATE INDEX ind_request_ucs ON esz.request USING btree (union_catalog_services_id);
CREATE INDEX ind_shed ON esz.request USING btree (schedule_of_timetable_id);
CREATE INDEX request_need_reindex_idx ON esz.request USING btree (need_reindex) WHERE (need_reindex = ANY (ARRAY[1, 3]));
CREATE INDEX uk_request_contingent_guid ON esz.request USING btree (contingent_guid);
CREATE INDEX uk_request_extend_entity_guid ON esz.request USING btree (extend_entity_guid);
COMMENT ON TABLE esz.request IS 'Заявки на бронирование';

-- Column comments

COMMENT ON COLUMN esz.request.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.request.child_information_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.request.request_status_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.request.applicant_information_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.request.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.request.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.request.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.request.is_archive IS 'Признак архивной записи';
COMMENT ON COLUMN esz.request.flag_last IS 'Признак последней версии';
COMMENT ON COLUMN esz.request.date_request IS 'Дата заявки';
COMMENT ON COLUMN esz.request.mark_evalution IS 'Оценка испытания';
COMMENT ON COLUMN esz.request.date_evalution IS 'Дата испытания';
COMMENT ON COLUMN esz.request.comment_evalution IS 'Комментарий к испытанию';
COMMENT ON COLUMN esz.request.date_enrollment IS 'Зачисление - дата зачисления';
COMMENT ON COLUMN esz.request.booking_guid IS 'Идентификатор брони';
COMMENT ON COLUMN esz.request.schedule_of_timetable_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.request.document_type_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.request.request_source_id IS 'Уникальный идентификатор источника заявления';
COMMENT ON COLUMN esz.request.document_type_id2 IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.request.request_number IS 'Номер заявления';
COMMENT ON COLUMN esz.request.info_accepted IS 'Данные подтверждены';
COMMENT ON COLUMN esz.request.enrollment_doc_number IS 'Зачисление - номер документа';
COMMENT ON COLUMN esz.request.enrollment_doc_date IS 'Зачисление - дата документа';
COMMENT ON COLUMN esz.request.enrollment_comment IS 'Зачисление - комментарий';
COMMENT ON COLUMN esz.request.exclude_date IS 'Отчисление - дата отчисления';
COMMENT ON COLUMN esz.request.exclude_doc_number IS 'Отчисление - номер документа';
COMMENT ON COLUMN esz.request.exclude_doc_date IS 'Отчисление - дата документа';
COMMENT ON COLUMN esz.request.exclude_comment IS 'Отчисление - комментарий';
COMMENT ON COLUMN esz.request.enrollment_decline_comment IS 'Комментарий к отказу в зачислении';
COMMENT ON COLUMN esz.request.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.request.is_evaluation_completed IS 'Испытания пройдены';
COMMENT ON COLUMN esz.request.is_enrollment_approved IS 'Направлен на зачисление';
COMMENT ON COLUMN esz.request.is_enrolled IS 'Зачислен';
COMMENT ON COLUMN esz.request.is_excluded IS 'Отчислен';
COMMENT ON COLUMN esz.request.is_enrollment_declined IS 'Отказ в зачислении';
COMMENT ON COLUMN esz.request.request_decline_reason_id IS 'Идентификатор причины отказа по заявлению';
COMMENT ON COLUMN esz.request.is_enroll_approve_comment IS 'Зачисление одобрено (после прохождения испытаний)';
COMMENT ON COLUMN esz.request.union_catalog_services_id IS 'Ссылка на услугу';
COMMENT ON COLUMN esz.request.pupil_id IS 'Идентификатор';
COMMENT ON COLUMN esz.request.need_reindex IS 'Признак что нужно обновить индекс';
COMMENT ON COLUMN esz.request.sso_id IS 'Идентификатор заявителя на портале';
COMMENT ON COLUMN esz.request.multi_id IS 'Задвоенные заявления (устарело)';
COMMENT ON COLUMN esz.request.class_parallel_id IS 'Ссылка на параллель класса';
COMMENT ON COLUMN esz.request.class_letter_id IS 'Ссылка на букву класса';
COMMENT ON COLUMN esz.request.desired_days IS 'Желаемые дни посещения ГПД';
COMMENT ON COLUMN esz.request.school_organization_id IS 'Организация-школа, в которой обучается ученик';
COMMENT ON COLUMN esz.request.status_change_date IS 'Дата последнего изменения статуса';
COMMENT ON COLUMN esz.request.contingent_link_type_id IS 'Вид связи с реестром контингента';
COMMENT ON COLUMN esz.request.contingent_check_date IS 'Штамп времени последней сверки с Реестром контингента';
COMMENT ON COLUMN esz.request.contingent_guid IS 'Ссылка на соответствующую запись в Реестре контингента';
COMMENT ON COLUMN esz.request.rmsp_check_status_deleted IS 'Атрибут не используется';
COMMENT ON COLUMN esz.request.privilege_category_id IS 'Льготная категория';
COMMENT ON COLUMN esz.request.extend_entity_guid IS 'Уникальный идентификатор сущности';
COMMENT ON COLUMN esz.request.external_system_id IS 'Ссылка на тип внешней системы';
COMMENT ON COLUMN esz.request.request_apply_reason_id IS 'Причина подачи заявления (данный атрибут используется только для ВП)';
COMMENT ON COLUMN esz.request.mesh_privilege_check_status IS '— статус обращения к сервису Льготники';
COMMENT ON COLUMN esz.request.is_electronic_accept IS 'Заявление оформляется электронно';
COMMENT ON COLUMN esz.request.test_date IS 'Дата тестирования';
COMMENT ON COLUMN esz.request.applicant_contingent_guid IS 'Guid заявителя в МЭШ.Контингент';
COMMENT ON COLUMN esz.request.service_class_id IS 'Идентификатор группы обучения';
COMMENT ON COLUMN esz.request.need_paper_contract IS 'Необходимость предоставить Заявителю договор в бумажном виде';


-- esz.request_scan_document definition

-- Drop table

-- DROP TABLE esz.request_scan_document;

CREATE TABLE esz.request_scan_document (
	id serial4 NOT NULL, -- Уникальный идентификатор записи в БД
	file_name varchar(200) NOT NULL, -- Наименование файла
	file_url varchar(800) NOT NULL, -- Строка, хранящая в себе ссылку на отсканированную копию документа Заявителя
	rtshed_document_type_id int4 NOT NULL, -- Тип документа в ЦХЭД
	request_id int4 NULL, -- Id заявления из таблицы esz.request
	approved bool DEFAULT false NOT NULL, -- Документ был одобрен оператором
	is_archive bool DEFAULT false NOT NULL, -- Признак архивной записи
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата обновления записи
	CONSTRAINT request_scan_document_pkey PRIMARY KEY (id)
);
CREATE INDEX ind_request_scan_document_request_id ON esz.request_scan_document USING btree (request_id);
COMMENT ON TABLE esz.request_scan_document IS 'Ссылки на сканы документов по заявлениям в РЦХЭД';

-- Column comments

COMMENT ON COLUMN esz.request_scan_document.id IS 'Уникальный идентификатор записи в БД';
COMMENT ON COLUMN esz.request_scan_document.file_name IS 'Наименование файла';
COMMENT ON COLUMN esz.request_scan_document.file_url IS 'Строка, хранящая в себе ссылку на отсканированную копию документа Заявителя';
COMMENT ON COLUMN esz.request_scan_document.rtshed_document_type_id IS 'Тип документа в ЦХЭД';
COMMENT ON COLUMN esz.request_scan_document.request_id IS 'Id заявления из таблицы esz.request';
COMMENT ON COLUMN esz.request_scan_document.approved IS 'Документ был одобрен оператором';
COMMENT ON COLUMN esz.request_scan_document.is_archive IS 'Признак архивной записи';
COMMENT ON COLUMN esz.request_scan_document.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.request_scan_document.date_change IS 'Дата обновления записи';


-- esz.schedule_of_classes definition

-- Drop table

-- DROP TABLE esz.schedule_of_classes;

CREATE TABLE esz.schedule_of_classes (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	service_class_id int4 NULL, -- Уникальный идентификатор группы обучения
	shedule_period int4 DEFAULT 1 NOT NULL, -- Номер периода
	date_start timestamp(0) NULL, -- Дата начала периода
	date_end timestamp(0) NULL, -- Дата окончания периода
	monday varchar(1000) NULL, -- Интервалы времени занятий в понедельник
	tuesday varchar(1000) NULL, -- Интервалы времени занятий во вторник
	wednesday varchar(1000) NULL, -- Интервалы времени занятий в среду
	thursday varchar(1000) NULL, -- Интервалы времени занятий в четверг
	friday varchar(1000) NULL, -- Интервалы времени занятий в пятницу
	saturday varchar(1000) NULL, -- Интервалы времени занятий в субботу
	sunday varchar(1000) NULL, -- Интервалы времени занятий в воскресенье
	is_archive bool DEFAULT false NOT NULL, -- Признак архивной записи
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата обновления
	CONSTRAINT schedule_of_classes_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_schedule_of_classes_service_class ON esz.schedule_of_classes USING btree (service_class_id);
COMMENT ON TABLE esz.schedule_of_classes IS 'Расписания занятий групп обучения по периодам и интервалам';

-- Column comments

COMMENT ON COLUMN esz.schedule_of_classes.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.schedule_of_classes.service_class_id IS 'Уникальный идентификатор группы обучения';
COMMENT ON COLUMN esz.schedule_of_classes.shedule_period IS 'Номер периода';
COMMENT ON COLUMN esz.schedule_of_classes.date_start IS 'Дата начала периода';
COMMENT ON COLUMN esz.schedule_of_classes.date_end IS 'Дата окончания периода';
COMMENT ON COLUMN esz.schedule_of_classes.monday IS 'Интервалы времени занятий в понедельник';
COMMENT ON COLUMN esz.schedule_of_classes.tuesday IS 'Интервалы времени занятий во вторник';
COMMENT ON COLUMN esz.schedule_of_classes.wednesday IS 'Интервалы времени занятий в среду';
COMMENT ON COLUMN esz.schedule_of_classes.thursday IS 'Интервалы времени занятий в четверг';
COMMENT ON COLUMN esz.schedule_of_classes.friday IS 'Интервалы времени занятий в пятницу';
COMMENT ON COLUMN esz.schedule_of_classes.saturday IS 'Интервалы времени занятий в субботу';
COMMENT ON COLUMN esz.schedule_of_classes.sunday IS 'Интервалы времени занятий в воскресенье';
COMMENT ON COLUMN esz.schedule_of_classes.is_archive IS 'Признак архивной записи';
COMMENT ON COLUMN esz.schedule_of_classes.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.schedule_of_classes.date_change IS 'Дата обновления';


-- esz.schedule_of_service definition

-- Drop table

-- DROP TABLE esz.schedule_of_service;

CREATE TABLE esz.schedule_of_service (
	id serial4 NOT NULL, -- Уникальный идентификатор
	union_catalog_services_id int4 NULL, -- Уникальный идентификатор
	shedule_period_id int4 NULL, -- Уникальный идентификатор
	types_of_repetition_id int4 NULL, -- Уникальный идентификатор
	day_of_week int4 NULL, -- День
	time_start time NULL, -- Время начала проведения испытаний
	time_end time NULL, -- Время окончания проведения испытаний
	repeat_number1 int4 NULL, -- Номер повторения 1
	repeat_number2 int4 NULL, -- Номер повторения 2
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	items_work_id int4 NULL, -- Уникальный идентификатор
	organization_id int4 NULL, -- Уникальный идентификатор
	service_class_id int4 NULL, -- Ссылка на группу обучения, для расписания в группах обучения
	CONSTRAINT schedule_of_service_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_shedule_service ON esz.schedule_of_service USING btree (shedule_period_id);
CREATE INDEX fk_types_of_repetition_rel ON esz.schedule_of_service USING btree (types_of_repetition_id);
CREATE INDEX ind_schedule_of_service_items_work_id ON esz.schedule_of_service USING btree (items_work_id);
CREATE INDEX ind_schedule_of_service_organization_id ON esz.schedule_of_service USING btree (organization_id);
CREATE INDEX ind_schedule_of_service_ucs ON esz.schedule_of_service USING btree (union_catalog_services_id);
CREATE INDEX ind_sos_service_class_id ON esz.schedule_of_service USING btree (service_class_id, is_archive);
COMMENT ON TABLE esz.schedule_of_service IS 'Расписание предоставления услуг';

-- Column comments

COMMENT ON COLUMN esz.schedule_of_service.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.schedule_of_service.union_catalog_services_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.schedule_of_service.shedule_period_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.schedule_of_service.types_of_repetition_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.schedule_of_service.day_of_week IS 'День';
COMMENT ON COLUMN esz.schedule_of_service.time_start IS 'Время начала проведения испытаний';
COMMENT ON COLUMN esz.schedule_of_service.time_end IS 'Время окончания проведения испытаний';
COMMENT ON COLUMN esz.schedule_of_service.repeat_number1 IS 'Номер повторения 1';
COMMENT ON COLUMN esz.schedule_of_service.repeat_number2 IS 'Номер повторения 2';
COMMENT ON COLUMN esz.schedule_of_service.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.schedule_of_service.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.schedule_of_service.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.schedule_of_service.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.schedule_of_service.items_work_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.schedule_of_service.organization_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.schedule_of_service.service_class_id IS 'Ссылка на группу обучения, для расписания в группах обучения';


-- esz.schedule_of_timetable definition

-- Drop table

-- DROP TABLE esz.schedule_of_timetable;

CREATE TABLE esz.schedule_of_timetable (
	id serial4 NOT NULL, -- Уникальный идентификатор
	types_of_repetition_id int4 NULL, -- Уникальный идентификатор
	day_of_week int4 NULL, -- День
	time_start time NULL, -- Время начала проведения испытаний
	time_end time NULL, -- Время окончания проведения испытаний
	repeat_number1 int4 NULL, -- Номер повторения 1
	repeat_number2 int4 NULL, -- Номер повторения 2
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	volume int4 NULL, -- Количество человек
	training_group_id int4 NULL, -- Уникальный идентификатор группы обучения
	place_service_id int4 NULL, -- Уникальный идентификатор
	period_from timestamp(0) NULL, -- Период с
	period_to timestamp(0) NULL, -- Период до
	place_service_address_from_org bool NULL, -- Место предоставления услуги совпадает с адресом учреждения
	organization_resource_id int4 NULL, -- Уникальный идентификатор
	"comment" text NULL, -- Комментарий
	monday bool NULL, -- Понедельник
	tuesday bool NULL, -- Вторник
	wednesday bool NULL, -- Среда
	thursday bool NULL, -- Четверг
	friday bool NULL, -- Пятница
	saturday bool NULL, -- Суббота
	sunday bool NULL, -- Воскресенье
	training_group_status_id int4 NULL, -- Уникальный идентификатор статусе группы обучения
	request_start timestamp(0) NULL, -- Дата начала приема заявлений
	request_end timestamp(0) NULL, -- Дата окончания приема заявлений
	external_uid varchar(100) NULL, -- Внешний идентификатор
	retro bool NULL, -- Признак специального слота без публикации на mos.ru
	person_id int4 NULL, -- Ссылка на преподавателя
	external_system_id int4 NULL, -- Ссылка на внешнюю систему
	extend_entity_guid uuid DEFAULT gen_random_uuid() NOT NULL, -- Уникальный идентификатор сущности
	CONSTRAINT schedule_of_timetable_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_schedule_of_timetable_external_system ON esz.schedule_of_timetable USING btree (external_system_id);
CREATE INDEX fk_schedule_of_timetable_person ON esz.schedule_of_timetable USING btree (person_id);
CREATE INDEX fk_schedule_of_timetable_t_tor_rel ON esz.schedule_of_timetable USING btree (types_of_repetition_id);
CREATE INDEX fk_schedule_place_rel ON esz.schedule_of_timetable USING btree (place_service_id);
CREATE INDEX ind_schedule_of_timetable_extend_entity_guid ON esz.schedule_of_timetable USING btree (extend_entity_guid);
CREATE INDEX ind_schedule_of_timetable_group_status_start_end_retro_group_id ON esz.schedule_of_timetable USING btree (training_group_status_id, request_start, request_end, retro, training_group_id);
CREATE INDEX ind_tg2 ON esz.schedule_of_timetable USING btree (training_group_id);
COMMENT ON TABLE esz.schedule_of_timetable IS 'Расписание приема документов/переодически повторяемых испыта';

-- Column comments

COMMENT ON COLUMN esz.schedule_of_timetable.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.schedule_of_timetable.types_of_repetition_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.schedule_of_timetable.day_of_week IS 'День';
COMMENT ON COLUMN esz.schedule_of_timetable.time_start IS 'Время начала проведения испытаний';
COMMENT ON COLUMN esz.schedule_of_timetable.time_end IS 'Время окончания проведения испытаний';
COMMENT ON COLUMN esz.schedule_of_timetable.repeat_number1 IS 'Номер повторения 1';
COMMENT ON COLUMN esz.schedule_of_timetable.repeat_number2 IS 'Номер повторения 2';
COMMENT ON COLUMN esz.schedule_of_timetable.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.schedule_of_timetable.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.schedule_of_timetable.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.schedule_of_timetable.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.schedule_of_timetable.volume IS 'Количество человек';
COMMENT ON COLUMN esz.schedule_of_timetable.training_group_id IS 'Уникальный идентификатор группы обучения';
COMMENT ON COLUMN esz.schedule_of_timetable.place_service_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.schedule_of_timetable.period_from IS 'Период с';
COMMENT ON COLUMN esz.schedule_of_timetable.period_to IS 'Период до';
COMMENT ON COLUMN esz.schedule_of_timetable.place_service_address_from_org IS 'Место предоставления услуги совпадает с адресом учреждения';
COMMENT ON COLUMN esz.schedule_of_timetable.organization_resource_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.schedule_of_timetable."comment" IS 'Комментарий';
COMMENT ON COLUMN esz.schedule_of_timetable.monday IS 'Понедельник';
COMMENT ON COLUMN esz.schedule_of_timetable.tuesday IS 'Вторник';
COMMENT ON COLUMN esz.schedule_of_timetable.wednesday IS 'Среда';
COMMENT ON COLUMN esz.schedule_of_timetable.thursday IS 'Четверг';
COMMENT ON COLUMN esz.schedule_of_timetable.friday IS 'Пятница';
COMMENT ON COLUMN esz.schedule_of_timetable.saturday IS 'Суббота';
COMMENT ON COLUMN esz.schedule_of_timetable.sunday IS 'Воскресенье';
COMMENT ON COLUMN esz.schedule_of_timetable.training_group_status_id IS 'Уникальный идентификатор статусе группы обучения';
COMMENT ON COLUMN esz.schedule_of_timetable.request_start IS 'Дата начала приема заявлений';
COMMENT ON COLUMN esz.schedule_of_timetable.request_end IS 'Дата окончания приема заявлений';
COMMENT ON COLUMN esz.schedule_of_timetable.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.schedule_of_timetable.retro IS 'Признак специального слота без публикации на mos.ru';
COMMENT ON COLUMN esz.schedule_of_timetable.person_id IS 'Ссылка на преподавателя';
COMMENT ON COLUMN esz.schedule_of_timetable.external_system_id IS 'Ссылка на внешнюю систему';
COMMENT ON COLUMN esz.schedule_of_timetable.extend_entity_guid IS 'Уникальный идентификатор сущности';


-- esz.service_class definition

-- Drop table

-- DROP TABLE esz.service_class;

CREATE TABLE esz.service_class (
	id serial4 NOT NULL, -- Идентификатор
	union_catalog_services_id int4 NULL, -- Уникальный идентификатор
	service_class_status_id int4 NULL, -- Идентификатор статуса
	code varchar(200) NULL, -- Код
	"name" varchar(300) NULL, -- Наименование
	learn_start timestamp(0) NULL, -- Дата начала обучения
	learn_end timestamp(0) NULL, -- Дата окончания обучения
	capacity int4 NULL, -- Емкость
	entity_id varchar(36) NULL, -- Идентификатор сущности
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	description varchar(1000) NULL, -- Описание
	service_stage_id int4 NULL, -- Уникальный идентификатор этапа
	service_class_id int4 NULL, -- Уникальный идентификатор класса
	organization_id int4 NULL, -- Уникальный идентификатор организации
	external_uid uuid NULL, -- Внешний идентификатор
	need_reindex int2 DEFAULT 0 NOT NULL, -- Признак переиндексации
	programm_module_id int4 NULL, -- Уникальный идентификатор модуля программы
	address_id int4 NULL, -- Идентификатор адреса
	training_group_id int4 NULL, -- Уникальный идентификатор группы обучения
	train_start_date timestamp(0) NULL, -- Дата начала занятий
	train_end_date timestamp(0) NULL, -- Дата окончания занятий
	min_capacity int4 NULL, -- Минимальное количество человек для формирования группы
	is_css_owned bool DEFAULT false NOT NULL, -- Данная группа обучения создана на стороне ЦСО и может редактироваться операторами ЦСО
	order_date timestamp(0) NULL, -- Дата приказа о запуске группы обучения по АД
	order_number varchar(50) NULL, -- Номер приказа о запуске группы обучения по АД
	start_date timestamp(0) NULL, -- Дата начала занятий в группе АД
	service_class_start_status_id int4 NULL, -- Состояние запуска группы (Создана, сформирована, приступила к занятиям, набор закрыт)
	additional_agreement_id int4 NULL, -- Ссылка на дополнительное соглашение, на основании которого группа отредактирована
	included int4 DEFAULT 0 NOT NULL, -- Зачислено учеников (обновляется при реиндексации)
	monitoring_specialist_id int4 NULL, -- Специалист по мониторингу, ссылка на User
	is_closed bool NOT NULL, -- Принудительное закрытие приема
	is_data_in_contingent bool DEFAULT false NOT NULL, -- Определяет необходимость передачи информации по data в МЭШ.Контингент
	external_system_id int4 NULL, -- Ссылка на внешнюю систему
	extend_entity_guid uuid DEFAULT gen_random_uuid() NOT NULL, -- Уникальный идентификатор сущности
	CONSTRAINT service_class_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_class_subclass_rel ON esz.service_class USING btree (service_class_id);
CREATE INDEX fk_service_class_address_rel ON esz.service_class USING btree (address_id);
CREATE INDEX fk_service_class_external_system ON esz.service_class USING btree (external_system_id);
CREATE INDEX fk_service_class_programm_module_rel ON esz.service_class USING btree (programm_module_id);
CREATE INDEX fk_service_class_training_group ON esz.service_class USING btree (training_group_id);
CREATE INDEX fk_service_classunion_catalog_services_rel ON esz.service_class USING btree (union_catalog_services_id);
CREATE INDEX fk_srv_class_start_status_rel ON esz.service_class USING btree (service_class_start_status_id);
CREATE INDEX fk_srv_class_status_rel ON esz.service_class USING btree (service_class_status_id);
CREATE INDEX fts_service_class_name ON esz.service_class USING gin (to_tsvector('russian'::regconfig, (name)::text));
CREATE INDEX ind_service_class_organization_id ON esz.service_class USING btree (organization_id);
CREATE INDEX service_class_need_reindex_idx ON esz.service_class USING btree (need_reindex) WHERE (need_reindex = ANY (ARRAY[1, 3]));
CREATE INDEX uk_service_class_extend_entity_guid ON esz.service_class USING btree (extend_entity_guid);
COMMENT ON TABLE esz.service_class IS 'Классы';

-- Column comments

COMMENT ON COLUMN esz.service_class.id IS 'Идентификатор';
COMMENT ON COLUMN esz.service_class.union_catalog_services_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.service_class.service_class_status_id IS 'Идентификатор статуса';
COMMENT ON COLUMN esz.service_class.code IS 'Код';
COMMENT ON COLUMN esz.service_class."name" IS 'Наименование';
COMMENT ON COLUMN esz.service_class.learn_start IS 'Дата начала обучения';
COMMENT ON COLUMN esz.service_class.learn_end IS 'Дата окончания обучения';
COMMENT ON COLUMN esz.service_class.capacity IS 'Емкость';
COMMENT ON COLUMN esz.service_class.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.service_class.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.service_class.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.service_class.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.service_class.description IS 'Описание';
COMMENT ON COLUMN esz.service_class.service_stage_id IS 'Уникальный идентификатор этапа';
COMMENT ON COLUMN esz.service_class.service_class_id IS 'Уникальный идентификатор класса';
COMMENT ON COLUMN esz.service_class.organization_id IS 'Уникальный идентификатор организации';
COMMENT ON COLUMN esz.service_class.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.service_class.need_reindex IS 'Признак переиндексации';
COMMENT ON COLUMN esz.service_class.programm_module_id IS 'Уникальный идентификатор модуля программы';
COMMENT ON COLUMN esz.service_class.address_id IS 'Идентификатор адреса';
COMMENT ON COLUMN esz.service_class.training_group_id IS 'Уникальный идентификатор группы обучения';
COMMENT ON COLUMN esz.service_class.train_start_date IS 'Дата начала занятий';
COMMENT ON COLUMN esz.service_class.train_end_date IS 'Дата окончания занятий';
COMMENT ON COLUMN esz.service_class.min_capacity IS 'Минимальное количество человек для формирования группы';
COMMENT ON COLUMN esz.service_class.is_css_owned IS 'Данная группа обучения создана на стороне ЦСО и может редактироваться операторами ЦСО';
COMMENT ON COLUMN esz.service_class.order_date IS 'Дата приказа о запуске группы обучения по АД';
COMMENT ON COLUMN esz.service_class.order_number IS 'Номер приказа о запуске группы обучения по АД';
COMMENT ON COLUMN esz.service_class.start_date IS 'Дата начала занятий в группе АД';
COMMENT ON COLUMN esz.service_class.service_class_start_status_id IS 'Состояние запуска группы (Создана, сформирована, приступила к занятиям, набор закрыт)';
COMMENT ON COLUMN esz.service_class.additional_agreement_id IS 'Ссылка на дополнительное соглашение, на основании которого группа отредактирована';
COMMENT ON COLUMN esz.service_class.included IS 'Зачислено учеников (обновляется при реиндексации)';
COMMENT ON COLUMN esz.service_class.monitoring_specialist_id IS 'Специалист по мониторингу, ссылка на User';
COMMENT ON COLUMN esz.service_class.is_closed IS 'Принудительное закрытие приема';
COMMENT ON COLUMN esz.service_class.is_data_in_contingent IS 'Определяет необходимость передачи информации по data в МЭШ.Контингент';
COMMENT ON COLUMN esz.service_class.external_system_id IS 'Ссылка на внешнюю систему';
COMMENT ON COLUMN esz.service_class.extend_entity_guid IS 'Уникальный идентификатор сущности';


-- esz.service_class_history definition

-- Drop table

-- DROP TABLE esz.service_class_history;

CREATE TABLE esz.service_class_history (
	id serial4 NOT NULL, -- Уникальный идентификатор
	old_organization_id int4 NULL, -- Уникальный идентификатор
	new_organization_id int4 NULL, -- Уникальный идентификатор
	service_class_id int4 NULL, -- Идентификатор
	date_change timestamp(0) NOT NULL, -- Дата изменения
	CONSTRAINT service_class_history_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_new_organization_id_c ON esz.service_class_history USING btree (new_organization_id);
CREATE INDEX fk_old_organization_id_c ON esz.service_class_history USING btree (old_organization_id);
CREATE INDEX fk_service_class_id_c ON esz.service_class_history USING btree (service_class_id);
COMMENT ON TABLE esz.service_class_history IS 'История групп обучения';

-- Column comments

COMMENT ON COLUMN esz.service_class_history.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.service_class_history.old_organization_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.service_class_history.new_organization_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.service_class_history.service_class_id IS 'Идентификатор';
COMMENT ON COLUMN esz.service_class_history.date_change IS 'Дата изменения';


-- esz.service_class_person_rel definition

-- Drop table

-- DROP TABLE esz.service_class_person_rel;

CREATE TABLE esz.service_class_person_rel (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	service_class_id int4 NULL, -- Ссылка на группу обучения
	person_id int4 NULL, -- Ссылка на учителя
	is_supervisor bool NULL, -- Ведущий учитель
	CONSTRAINT service_class_person_rel_pkey PRIMARY KEY (id)
);
CREATE INDEX ind_service_class_person_rel_person_id ON esz.service_class_person_rel USING btree (person_id);
CREATE INDEX ind_service_class_person_rel_service_class_id ON esz.service_class_person_rel USING btree (service_class_id);
COMMENT ON TABLE esz.service_class_person_rel IS 'Связь таблиц service_class и person';

-- Column comments

COMMENT ON COLUMN esz.service_class_person_rel.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.service_class_person_rel.service_class_id IS 'Ссылка на группу обучения';
COMMENT ON COLUMN esz.service_class_person_rel.person_id IS 'Ссылка на учителя';
COMMENT ON COLUMN esz.service_class_person_rel.is_supervisor IS 'Ведущий учитель';


-- esz.service_class_rel definition

-- Drop table

-- DROP TABLE esz.service_class_rel;

CREATE TABLE esz.service_class_rel (
	union_catalog_services_id int4 NOT NULL, -- Уникальный идентификатор
	service_class_id int4 NOT NULL, -- Идентификатор
	CONSTRAINT service_class_rel_pkey PRIMARY KEY (union_catalog_services_id, service_class_id)
);
CREATE INDEX ind_service_class_rel_sc ON esz.service_class_rel USING btree (union_catalog_services_id, service_class_id);
CREATE INDEX ser_cl_addon_ind ON esz.service_class_rel USING btree (service_class_id);
COMMENT ON TABLE esz.service_class_rel IS 'Связь Услуги и Класса';

-- Column comments

COMMENT ON COLUMN esz.service_class_rel.union_catalog_services_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.service_class_rel.service_class_id IS 'Идентификатор';


-- esz.service_discipline definition

-- Drop table

-- DROP TABLE esz.service_discipline;

CREATE TABLE esz.service_discipline (
	id serial4 NOT NULL, -- Идентификатор
	discipline_id int4 NULL, -- Идентификатор
	hours_count numeric(10) NULL, -- Количество часов
	is_required bool NULL, -- Обязательная
	order_number int4 NULL, -- Порядковый номер
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	union_catalog_services_id int4 NULL, -- Уникальный идентификатор услуги
	CONSTRAINT service_discipline_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_discipline_service_rel ON esz.service_discipline USING btree (union_catalog_services_id);
CREATE INDEX fk_srv_discipline_rel ON esz.service_discipline USING btree (discipline_id);
COMMENT ON TABLE esz.service_discipline IS 'Учебные дисциплины услуги';

-- Column comments

COMMENT ON COLUMN esz.service_discipline.id IS 'Идентификатор';
COMMENT ON COLUMN esz.service_discipline.discipline_id IS 'Идентификатор';
COMMENT ON COLUMN esz.service_discipline.hours_count IS 'Количество часов';
COMMENT ON COLUMN esz.service_discipline.is_required IS 'Обязательная';
COMMENT ON COLUMN esz.service_discipline.order_number IS 'Порядковый номер';
COMMENT ON COLUMN esz.service_discipline.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.service_discipline.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.service_discipline.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.service_discipline.union_catalog_services_id IS 'Уникальный идентификатор услуги';


-- esz.service_history definition

-- Drop table

-- DROP TABLE esz.service_history;

CREATE TABLE esz.service_history (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	organization_id int4 NULL, -- Уникальный идентификатор
	union_catalog_services_id int4 NULL, -- Уникальный идентификатор
	old_organization_id int4 NOT NULL, -- Уникальный идентификатор переносимой организации
	"date" timestamp(0) NOT NULL, -- Дата события
	CONSTRAINT service_history_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_service_hist_org_rel ON esz.service_history USING btree (organization_id);
CREATE INDEX fk_service_hist_rel ON esz.service_history USING btree (union_catalog_services_id);
COMMENT ON TABLE esz.service_history IS 'История услуги';

-- Column comments

COMMENT ON COLUMN esz.service_history.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.service_history.organization_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.service_history.union_catalog_services_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.service_history.old_organization_id IS 'Уникальный идентификатор переносимой организации';
COMMENT ON COLUMN esz.service_history."date" IS 'Дата события';


-- esz.service_stage definition

-- Drop table

-- DROP TABLE esz.service_stage;

CREATE TABLE esz.service_stage (
	id serial4 NOT NULL, -- Идентификатор
	union_catalog_services_id int4 NULL, -- Уникальный идентификатор
	order_number int4 NULL, -- Порядковый номер
	code varchar(30) NULL, -- Код
	"name" varchar(300) NULL, -- Наименование
	duration numeric(10) NULL, -- Продолжительность
	description varchar(500) NULL, -- Описание
	entity_id varchar(36) NULL, -- Идентификатор сущности
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	programm_level_id int4 NULL, -- Уникальный идентификатор уровня обучения
	date_start timestamp(0) NULL, -- Дата начала
	date_end timestamp(0) NULL, -- Дата окончания
	CONSTRAINT service_stage_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_stage_level_rel ON esz.service_stage USING btree (programm_level_id);
CREATE INDEX ind_service_stage_union_catalog_services_id ON esz.service_stage USING btree (union_catalog_services_id);
COMMENT ON TABLE esz.service_stage IS 'Этапы обучения услуги';

-- Column comments

COMMENT ON COLUMN esz.service_stage.id IS 'Идентификатор';
COMMENT ON COLUMN esz.service_stage.union_catalog_services_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.service_stage.order_number IS 'Порядковый номер';
COMMENT ON COLUMN esz.service_stage.code IS 'Код';
COMMENT ON COLUMN esz.service_stage."name" IS 'Наименование';
COMMENT ON COLUMN esz.service_stage.duration IS 'Продолжительность';
COMMENT ON COLUMN esz.service_stage.description IS 'Описание';
COMMENT ON COLUMN esz.service_stage.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.service_stage.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.service_stage.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.service_stage.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.service_stage.programm_level_id IS 'Уникальный идентификатор уровня обучения';
COMMENT ON COLUMN esz.service_stage.date_start IS 'Дата начала';
COMMENT ON COLUMN esz.service_stage.date_end IS 'Дата окончания';


-- esz.service_subclass definition

-- Drop table

-- DROP TABLE esz.service_subclass;

CREATE TABLE esz.service_subclass (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	service_class_id int4 NULL, -- Идентификатор
	code varchar(100) NULL, -- Код
	"name" varchar(100) NULL, -- Наименование
	description varchar(300) NULL, -- Описание
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(50) NULL, -- Внешний идентификатор
	CONSTRAINT service_subclass_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_subclass_class_rel ON esz.service_subclass USING btree (service_class_id);
COMMENT ON TABLE esz.service_subclass IS 'Группа в классе';

-- Column comments

COMMENT ON COLUMN esz.service_subclass.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.service_subclass.service_class_id IS 'Идентификатор';
COMMENT ON COLUMN esz.service_subclass.code IS 'Код';
COMMENT ON COLUMN esz.service_subclass."name" IS 'Наименование';
COMMENT ON COLUMN esz.service_subclass.description IS 'Описание';
COMMENT ON COLUMN esz.service_subclass.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.service_subclass.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.service_subclass.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.service_subclass.external_uid IS 'Внешний идентификатор';


-- esz.sign definition

-- Drop table

-- DROP TABLE esz.sign;

CREATE TABLE esz.sign (
	id serial4 NOT NULL, -- Уникальный идентификатор
	signing_type_id int4 NULL, -- Уникальный идентификатор
	user_id int4 NULL, -- Уникальный идентификатор
	date_time timestamp(0) NULL, -- Дата операции
	description varchar(240) NULL, -- Информация из ЭЦП
	is_actual bool NULL, -- Признак актуальности
	extend_entity_guid uuid NULL, -- Уникальный идентификатор сущности
	CONSTRAINT sign_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_link_to_sign_rel ON esz.sign USING btree (signing_type_id);
CREATE INDEX fk_sign_to_user_rel ON esz.sign USING btree (user_id);
CREATE INDEX ind_ex_id ON esz.sign USING btree (is_actual);
CREATE INDEX ind_sign_extend_entity_guid ON esz.sign USING btree (extend_entity_guid);
COMMENT ON TABLE esz.sign IS 'Электронная подпись';

-- Column comments

COMMENT ON COLUMN esz.sign.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.sign.signing_type_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.sign.user_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.sign.date_time IS 'Дата операции';
COMMENT ON COLUMN esz.sign.description IS 'Информация из ЭЦП';
COMMENT ON COLUMN esz.sign.is_actual IS 'Признак актуальности';
COMMENT ON COLUMN esz.sign.extend_entity_guid IS 'Уникальный идентификатор сущности';


-- esz.subclass_mega_rel definition

-- Drop table

-- DROP TABLE esz.subclass_mega_rel;

CREATE TABLE esz.subclass_mega_rel (
	mega_relation_id int4 NOT NULL, -- Идентификатор
	service_subclass_id int4 NOT NULL, -- Идентификатор подгруппы
	CONSTRAINT subclass_mega_rel_pkey PRIMARY KEY (mega_relation_id, service_subclass_id)
);
CREATE INDEX fk_subclass_mega_rel2 ON esz.subclass_mega_rel USING btree (service_subclass_id);
COMMENT ON TABLE esz.subclass_mega_rel IS 'Группы класса для ученика';

-- Column comments

COMMENT ON COLUMN esz.subclass_mega_rel.mega_relation_id IS 'Идентификатор';
COMMENT ON COLUMN esz.subclass_mega_rel.service_subclass_id IS 'Идентификатор подгруппы';


-- esz."subscription" definition

-- Drop table

-- DROP TABLE esz."subscription";

CREATE TABLE esz."subscription" (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	union_catalog_services_id int4 NULL, -- Уникальный идентификатор
	event_subscription_type_id int4 NULL, -- Идентификатор типа подписки на уведомления
	email varchar(300) NULL, -- Адрес электронной почты
	subscription_uid varchar(36) NULL, -- Уникальный идентификатор
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	service_stage int4 NULL, -- Этап обучения
	service_class_id int4 NULL, -- Уникальный идентификатор класса
	CONSTRAINT subscription_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_subscription_event_subscription_type ON esz.subscription USING btree (event_subscription_type_id);
CREATE INDEX idx_subscription_service_class_id ON esz.subscription USING btree (service_class_id);
CREATE INDEX idx_subscription_union_catalog_services_id ON esz.subscription USING btree (union_catalog_services_id);
COMMENT ON TABLE esz."subscription" IS 'Подписка на события ЕСЗ';

-- Column comments

COMMENT ON COLUMN esz."subscription".id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz."subscription".union_catalog_services_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz."subscription".event_subscription_type_id IS 'Идентификатор типа подписки на уведомления';
COMMENT ON COLUMN esz."subscription".email IS 'Адрес электронной почты';
COMMENT ON COLUMN esz."subscription".subscription_uid IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz."subscription".date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz."subscription".date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz."subscription".is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz."subscription".service_stage IS 'Этап обучения';
COMMENT ON COLUMN esz."subscription".service_class_id IS 'Уникальный идентификатор класса';


-- esz.training_group definition

-- Drop table

-- DROP TABLE esz.training_group;

CREATE TABLE esz.training_group (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	union_catalog_services_id int4 NULL, -- Уникальный идентификатор
	code varchar(50) NULL, -- Код
	start_date timestamp(0) NULL, -- Дата начала работы
	volume int4 NULL, -- Вместимость
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(100) NULL, -- Внешний идентификатор
	date_start timestamp(0) NULL, -- Дата начала оказания услуги
	date_finish timestamp(0) NULL, -- Дата окончания бронирования
	admission_plan_id int4 NULL, -- Уникальный идентификатор
	service_stage_id int4 NULL, -- Уникальный идентификатор этапа
	person_id int4 NULL, -- Ссылка на преподавателя
	external_system_id int4 NULL, -- Ссылка на внешнюю систему
	extend_entity_guid uuid DEFAULT gen_random_uuid() NOT NULL, -- Уникальный идентификатор сущности
	CONSTRAINT training_group_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_group_plan_rel ON esz.training_group USING btree (admission_plan_id);
CREATE INDEX fk_train_group_person_rel ON esz.training_group USING btree (person_id);
CREATE INDEX fk_training_group_external_system ON esz.training_group USING btree (external_system_id);
CREATE INDEX fk_training_group_stage_rel ON esz.training_group USING btree (service_stage_id);
CREATE INDEX ind_training_group_extend_entity_guid ON esz.training_group USING btree (extend_entity_guid);
CREATE INDEX ind_training_group_ucs ON esz.training_group USING btree (union_catalog_services_id);
COMMENT ON TABLE esz.training_group IS 'Набор на услугу';

-- Column comments

COMMENT ON COLUMN esz.training_group.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.training_group.union_catalog_services_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.training_group.code IS 'Код';
COMMENT ON COLUMN esz.training_group.start_date IS 'Дата начала работы';
COMMENT ON COLUMN esz.training_group.volume IS 'Вместимость';
COMMENT ON COLUMN esz.training_group.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.training_group.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.training_group.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.training_group.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.training_group.date_start IS 'Дата начала оказания услуги';
COMMENT ON COLUMN esz.training_group.date_finish IS 'Дата окончания бронирования';
COMMENT ON COLUMN esz.training_group.admission_plan_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.training_group.service_stage_id IS 'Уникальный идентификатор этапа';
COMMENT ON COLUMN esz.training_group.person_id IS 'Ссылка на преподавателя';
COMMENT ON COLUMN esz.training_group.external_system_id IS 'Ссылка на внешнюю систему';
COMMENT ON COLUMN esz.training_group.extend_entity_guid IS 'Уникальный идентификатор сущности';


-- esz.training_stage definition

-- Drop table

-- DROP TABLE esz.training_stage;

CREATE TABLE esz.training_stage (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	training_group_id int4 NULL, -- Уникальный идентификатор группы обучения
	date_start timestamp(0) NULL, -- Дата начала
	date_end timestamp(0) NULL, -- Дата окончания
	date_create timestamp(0) NULL, -- Дата создания записи
	date_change timestamp(0) NULL, -- Дата изменения записи
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	CONSTRAINT training_stage_pkey PRIMARY KEY (id)
);
CREATE INDEX ind_ts_training_group ON esz.training_stage USING btree (training_group_id);
COMMENT ON TABLE esz.training_stage IS 'Период обучения';

-- Column comments

COMMENT ON COLUMN esz.training_stage.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.training_stage.training_group_id IS 'Уникальный идентификатор группы обучения';
COMMENT ON COLUMN esz.training_stage.date_start IS 'Дата начала';
COMMENT ON COLUMN esz.training_stage.date_end IS 'Дата окончания';
COMMENT ON COLUMN esz.training_stage.date_create IS 'Дата создания записи';
COMMENT ON COLUMN esz.training_stage.date_change IS 'Дата изменения записи';
COMMENT ON COLUMN esz.training_stage.is_archive IS 'Признак архивности';


-- esz.union_catalog_services definition

-- Drop table

-- DROP TABLE esz.union_catalog_services;

CREATE TABLE esz.union_catalog_services (
	id serial4 NOT NULL, -- Уникальный идентификатор
	file_programm_service_id int4 NULL, -- Уникальный идентификатор
	type_financing_id int4 NULL, -- Уникальный идентификатор
	file_rule_service_id int4 NULL, -- Уникальный идентификатор
	service_status_id int4 NULL, -- Уникальный идентификатор
	classificator_eku_id int4 NULL, -- Уникальный идентификатор
	organization_id int4 NULL, -- Уникальный идентификатор
	type_value_service_id int4 NULL, -- Уникальный идентификатор
	schedule_type_of_service_id int4 NULL, -- Уникальный идентификатор
	type_union_catalog_services_id int4 NULL, -- Уникальный идентификатор
	union_catalog_services_id int4 NULL, -- Уникальный идентификатор
	code varchar(200) NULL, -- Код регистрационной услуги
	"name" varchar(1000) NULL, -- Название конечной услуги
	programm_service text NULL, -- Описание услуги (Программа обучения)
	rule_service text NULL, -- Порядок предоставления услуги (Порядок зачисления на обучение)
	alt_start int4 NULL, -- Начальный возраст субъекта услуги
	alt_end int4 NULL, -- Конечный возраст субъекта услуги
	test_service bool NULL, -- Наличие предварительных испытаний
	tours_number int4 NULL, -- Количество туров предварительных испытаний
	finansing numeric(38, 4) NULL, -- Стоимость оказания услуги
	sub_finance_service numeric(38, 6) NULL, -- Процент субсидии оказания услуги
	period_getting_document int4 NULL, -- Колисество дней с момента бронирования услуги, до аннулирования брони в случае не предоствления документов
	date_create timestamp(0) NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата изменения
	entity_id varchar(36) NULL, -- Идентификатор сущности
	is_archive bool DEFAULT false NOT NULL, -- Признак архивности
	external_uid varchar(100) NULL, -- Внешний идентификатор
	male_present bool NULL, -- Мужской пол
	female_present bool NULL, -- Женский пол
	alt_female_start int4 NULL, -- Начальный возраст субъекта услуги женский
	alt_female_end int4 NULL, -- Конечный возраст субъекта услуги женский
	is_block_edit1 bool NULL, -- Редактирование блока 1
	is_block_edit2 bool NULL, -- Редактирование блока 2
	is_block_edit3 bool NULL, -- Редактирование блока 3
	is_block_edit4 bool NULL, -- Редактирование блока 4
	is_block_edit5 bool NULL, -- Редактирование блока 5
	is_block_edit6 bool NULL, -- Редактирование блока 6
	is_block_edit7 bool NULL, -- Редактирование блока 7
	is_block_edit8 bool NULL, -- Редактирование блока 8
	is_block_edit9 bool NULL, -- Редактирование блока 9
	is_block_edit10 bool NULL, -- Редактирование блока 10
	is_block_edit11 bool NULL, -- Редактирование блока 11
	is_block_edit12 bool NULL, -- Редактирование блока 12
	is_block_edit13 bool NULL, -- Редактирование блока 13
	is_block_edit14 bool NULL, -- Редактирование блока 14
	is_block_edit15 bool NULL, -- Редактирование блока 15
	programm_level_id int4 NULL, -- Уникальный идентификатор уровня обучения
	candidate_restrictions_id int4 NULL, -- Уникальный идентификатор ограничения
	contact_person varchar(500) NULL, -- ФИО контактного лица
	contact_phone varchar(200) NULL, -- Телефон контактного лица
	items_work_address_from_org bool NULL, -- Место приема документов совпадает с адресом учреждения
	duration_of_training_unit_id int4 NULL, -- Уникальный идентификатор вида продолжительности обучения
	duration_of_training numeric(38, 4) NULL, -- Продолжительность обучения в годах
	is_block_edit16 bool NULL, -- Редактирование блока 16
	is_block_edit17 bool NULL, -- Редактирование блока 17
	is_block_edit18 bool NULL, -- Редактирование блока 18
	service_form_id int4 NULL, -- Уникальный идентификатор формы занятий
	subsidies_percent numeric(11, 4) NULL, -- Процент субсидии
	duration_of_training_days numeric(11, 4) NULL, -- Продолжительность обучения, дней
	duration_of_training_months numeric(11, 4) NULL, -- Продолжительность обучения, месяцев
	duration_of_training_weeks numeric(11, 4) NULL, -- Продолжительность обучения, недель
	full_price numeric(38, 4) NULL, -- Общая стоимость
	hours_per_week numeric(11, 4) NULL, -- Количество часов/занятий в неделю
	lesson_price numeric(11, 4) NULL, -- Стоимость за занятие
	need_reindex int2 NOT NULL, -- Признак что нужно обновить индекс
	visit_price numeric(11, 4) NULL, -- Цена за 1 посещение 1 человека
	is_med_conditions bool DEFAULT false NOT NULL, -- Есть медицинские противопоказания
	is_cloth_require bool DEFAULT false NOT NULL, -- Требуется форма одежды
	is_invent_require bool DEFAULT false NOT NULL, -- Требуется наличие инвентаря
	visit_terms varchar(1000) NULL, -- Условия посещения
	med_conditions varchar(1000) NULL, -- Медицинский допуск
	cloth_require varchar(250) NULL, -- Форма одежды
	invent_require varchar(250) NULL, -- Наличие инвентаря
	contact_notes varchar(1000) NULL, -- Примечания в блоке контакты
	lesson_count_per_week int4 NULL, -- Количество занятий в неделю
	css_organization_id int4 NULL, -- ЦСО, к которому относится данная программа активного долголетия
	agreem_number varchar(20) NULL, -- Номер соглашения с центром социального обслуживания
	is_css_owned bool DEFAULT false NOT NULL, -- Данная программа создана на стороне ЦСО и может редактироваться операторами ЦСО
	service_volume int4 NULL, -- Квота по набору учеников в группы АД, план приема учеников для неДоГМ
	can_complement_classes bool DEFAULT false NOT NULL, -- Разрешено доукомплектовывать группы после начала занятий
	agreem_date_start timestamp(0) NULL, -- Дата начала действия соглашения о сотрудничестве с ЦСО
	agreem_date_end timestamp(0) NULL, -- Дата окончания действия соглашения о сотрудничестве с ЦСО
	type_of_attendance_id int4 NULL, -- Код вида посещения
	rules_of_attendance text NULL, -- Правила посещения
	external_system_id int4 NULL, -- Ссылка на внешнюю систему
	extend_entity_guid uuid DEFAULT gen_random_uuid() NOT NULL, -- Уникальный идентификатор сущности
	project_type_id int4 NULL, -- Идентификатор типа проекта
	CONSTRAINT union_catalog_services_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_catalog_duration_unit_rel ON esz.union_catalog_services USING btree (duration_of_training_unit_id);
CREATE INDEX fk_catalogue_level_rel ON esz.union_catalog_services USING btree (programm_level_id);
CREATE INDEX fk_catalogue_restrictions_rel ON esz.union_catalog_services USING btree (candidate_restrictions_id);
CREATE INDEX fk_finance_code ON esz.union_catalog_services USING btree (type_financing_id);
CREATE INDEX fk_programm_service_rel ON esz.union_catalog_services USING btree (file_programm_service_id);
CREATE INDEX fk_rule_service_rel ON esz.union_catalog_services USING btree (file_rule_service_id);
CREATE INDEX fk_schedule_type_of_service_rel ON esz.union_catalog_services USING btree (schedule_type_of_service_id);
CREATE INDEX fk_service_form_rel ON esz.union_catalog_services USING btree (service_form_id);
CREATE INDEX fk_status_service ON esz.union_catalog_services USING btree (service_status_id);
CREATE INDEX fk_type_value_service_rel ON esz.union_catalog_services USING btree (type_value_service_id);
CREATE INDEX fk_union_catalog_services_external_system ON esz.union_catalog_services USING btree (external_system_id);
CREATE INDEX fts_union_catalog_services_name ON esz.union_catalog_services USING gin (to_tsvector('russian'::regconfig, (name)::text));
CREATE INDEX idx_union_catalog_services_composite_update_type_of_attendance ON esz.union_catalog_services USING btree (type_of_attendance_id, is_archive, type_union_catalog_services_id, service_status_id);
CREATE INDEX ind_organization_id ON esz.union_catalog_services USING btree (organization_id);
CREATE INDEX ind_type_union_catalog ON esz.union_catalog_services USING btree (type_union_catalog_services_id);
CREATE INDEX ind_ucs_classificator_prog_lvl ON esz.union_catalog_services USING btree (classificator_eku_id, programm_level_id);
CREATE INDEX ind_union_catalog_services_extend_entity_guid ON esz.union_catalog_services USING btree (extend_entity_guid);
CREATE INDEX ind_union_catalog_services_name ON esz.union_catalog_services USING btree (name);
CREATE INDEX ind_union_catalog_services_union_catalog_services_id ON esz.union_catalog_services USING btree (union_catalog_services_id);
CREATE INDEX union_catalog_services_need_reindex_idx ON esz.union_catalog_services USING btree (need_reindex) WHERE (need_reindex = ANY (ARRAY[1, 3]));
COMMENT ON TABLE esz.union_catalog_services IS 'Реестр услуг дополнительного образования';

-- Column comments

COMMENT ON COLUMN esz.union_catalog_services.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.union_catalog_services.file_programm_service_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.union_catalog_services.type_financing_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.union_catalog_services.file_rule_service_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.union_catalog_services.service_status_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.union_catalog_services.classificator_eku_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.union_catalog_services.organization_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.union_catalog_services.type_value_service_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.union_catalog_services.schedule_type_of_service_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.union_catalog_services.type_union_catalog_services_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.union_catalog_services.union_catalog_services_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.union_catalog_services.code IS 'Код регистрационной услуги';
COMMENT ON COLUMN esz.union_catalog_services."name" IS 'Название конечной услуги';
COMMENT ON COLUMN esz.union_catalog_services.programm_service IS 'Описание услуги (Программа обучения)';
COMMENT ON COLUMN esz.union_catalog_services.rule_service IS 'Порядок предоставления услуги (Порядок зачисления на обучение)';
COMMENT ON COLUMN esz.union_catalog_services.alt_start IS 'Начальный возраст субъекта услуги';
COMMENT ON COLUMN esz.union_catalog_services.alt_end IS 'Конечный возраст субъекта услуги';
COMMENT ON COLUMN esz.union_catalog_services.test_service IS 'Наличие предварительных испытаний';
COMMENT ON COLUMN esz.union_catalog_services.tours_number IS 'Количество туров предварительных испытаний';
COMMENT ON COLUMN esz.union_catalog_services.finansing IS 'Стоимость оказания услуги';
COMMENT ON COLUMN esz.union_catalog_services.sub_finance_service IS 'Процент субсидии оказания услуги';
COMMENT ON COLUMN esz.union_catalog_services.period_getting_document IS 'Колисество дней с момента бронирования услуги, до аннулирования брони в случае не предоствления документов';
COMMENT ON COLUMN esz.union_catalog_services.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.union_catalog_services.date_change IS 'Дата изменения';
COMMENT ON COLUMN esz.union_catalog_services.entity_id IS 'Идентификатор сущности';
COMMENT ON COLUMN esz.union_catalog_services.is_archive IS 'Признак архивности';
COMMENT ON COLUMN esz.union_catalog_services.external_uid IS 'Внешний идентификатор';
COMMENT ON COLUMN esz.union_catalog_services.male_present IS 'Мужской пол';
COMMENT ON COLUMN esz.union_catalog_services.female_present IS 'Женский пол';
COMMENT ON COLUMN esz.union_catalog_services.alt_female_start IS 'Начальный возраст субъекта услуги женский';
COMMENT ON COLUMN esz.union_catalog_services.alt_female_end IS 'Конечный возраст субъекта услуги женский';
COMMENT ON COLUMN esz.union_catalog_services.is_block_edit1 IS 'Редактирование блока 1';
COMMENT ON COLUMN esz.union_catalog_services.is_block_edit2 IS 'Редактирование блока 2';
COMMENT ON COLUMN esz.union_catalog_services.is_block_edit3 IS 'Редактирование блока 3';
COMMENT ON COLUMN esz.union_catalog_services.is_block_edit4 IS 'Редактирование блока 4';
COMMENT ON COLUMN esz.union_catalog_services.is_block_edit5 IS 'Редактирование блока 5';
COMMENT ON COLUMN esz.union_catalog_services.is_block_edit6 IS 'Редактирование блока 6';
COMMENT ON COLUMN esz.union_catalog_services.is_block_edit7 IS 'Редактирование блока 7';
COMMENT ON COLUMN esz.union_catalog_services.is_block_edit8 IS 'Редактирование блока 8';
COMMENT ON COLUMN esz.union_catalog_services.is_block_edit9 IS 'Редактирование блока 9';
COMMENT ON COLUMN esz.union_catalog_services.is_block_edit10 IS 'Редактирование блока 10';
COMMENT ON COLUMN esz.union_catalog_services.is_block_edit11 IS 'Редактирование блока 11';
COMMENT ON COLUMN esz.union_catalog_services.is_block_edit12 IS 'Редактирование блока 12';
COMMENT ON COLUMN esz.union_catalog_services.is_block_edit13 IS 'Редактирование блока 13';
COMMENT ON COLUMN esz.union_catalog_services.is_block_edit14 IS 'Редактирование блока 14';
COMMENT ON COLUMN esz.union_catalog_services.is_block_edit15 IS 'Редактирование блока 15';
COMMENT ON COLUMN esz.union_catalog_services.programm_level_id IS 'Уникальный идентификатор уровня обучения';
COMMENT ON COLUMN esz.union_catalog_services.candidate_restrictions_id IS 'Уникальный идентификатор ограничения';
COMMENT ON COLUMN esz.union_catalog_services.contact_person IS 'ФИО контактного лица';
COMMENT ON COLUMN esz.union_catalog_services.contact_phone IS 'Телефон контактного лица';
COMMENT ON COLUMN esz.union_catalog_services.items_work_address_from_org IS 'Место приема документов совпадает с адресом учреждения';
COMMENT ON COLUMN esz.union_catalog_services.duration_of_training_unit_id IS 'Уникальный идентификатор вида продолжительности обучения';
COMMENT ON COLUMN esz.union_catalog_services.duration_of_training IS 'Продолжительность обучения в годах';
COMMENT ON COLUMN esz.union_catalog_services.is_block_edit16 IS 'Редактирование блока 16';
COMMENT ON COLUMN esz.union_catalog_services.is_block_edit17 IS 'Редактирование блока 17';
COMMENT ON COLUMN esz.union_catalog_services.is_block_edit18 IS 'Редактирование блока 18';
COMMENT ON COLUMN esz.union_catalog_services.service_form_id IS 'Уникальный идентификатор формы занятий';
COMMENT ON COLUMN esz.union_catalog_services.subsidies_percent IS 'Процент субсидии';
COMMENT ON COLUMN esz.union_catalog_services.duration_of_training_days IS 'Продолжительность обучения, дней';
COMMENT ON COLUMN esz.union_catalog_services.duration_of_training_months IS 'Продолжительность обучения, месяцев';
COMMENT ON COLUMN esz.union_catalog_services.duration_of_training_weeks IS 'Продолжительность обучения, недель';
COMMENT ON COLUMN esz.union_catalog_services.full_price IS 'Общая стоимость';
COMMENT ON COLUMN esz.union_catalog_services.hours_per_week IS 'Количество часов/занятий в неделю';
COMMENT ON COLUMN esz.union_catalog_services.lesson_price IS 'Стоимость за занятие';
COMMENT ON COLUMN esz.union_catalog_services.need_reindex IS 'Признак что нужно обновить индекс';
COMMENT ON COLUMN esz.union_catalog_services.visit_price IS 'Цена за 1 посещение 1 человека';
COMMENT ON COLUMN esz.union_catalog_services.is_med_conditions IS 'Есть медицинские противопоказания';
COMMENT ON COLUMN esz.union_catalog_services.is_cloth_require IS 'Требуется форма одежды';
COMMENT ON COLUMN esz.union_catalog_services.is_invent_require IS 'Требуется наличие инвентаря';
COMMENT ON COLUMN esz.union_catalog_services.visit_terms IS 'Условия посещения';
COMMENT ON COLUMN esz.union_catalog_services.med_conditions IS 'Медицинский допуск';
COMMENT ON COLUMN esz.union_catalog_services.cloth_require IS 'Форма одежды';
COMMENT ON COLUMN esz.union_catalog_services.invent_require IS 'Наличие инвентаря';
COMMENT ON COLUMN esz.union_catalog_services.contact_notes IS 'Примечания в блоке контакты';
COMMENT ON COLUMN esz.union_catalog_services.lesson_count_per_week IS 'Количество занятий в неделю';
COMMENT ON COLUMN esz.union_catalog_services.css_organization_id IS 'ЦСО, к которому относится данная программа активного долголетия';
COMMENT ON COLUMN esz.union_catalog_services.agreem_number IS 'Номер соглашения с центром социального обслуживания';
COMMENT ON COLUMN esz.union_catalog_services.is_css_owned IS 'Данная программа создана на стороне ЦСО и может редактироваться операторами ЦСО';
COMMENT ON COLUMN esz.union_catalog_services.service_volume IS 'Квота по набору учеников в группы АД, план приема учеников для неДоГМ';
COMMENT ON COLUMN esz.union_catalog_services.can_complement_classes IS 'Разрешено доукомплектовывать группы после начала занятий';
COMMENT ON COLUMN esz.union_catalog_services.agreem_date_start IS 'Дата начала действия соглашения о сотрудничестве с ЦСО';
COMMENT ON COLUMN esz.union_catalog_services.agreem_date_end IS 'Дата окончания действия соглашения о сотрудничестве с ЦСО';
COMMENT ON COLUMN esz.union_catalog_services.type_of_attendance_id IS 'Код вида посещения';
COMMENT ON COLUMN esz.union_catalog_services.rules_of_attendance IS 'Правила посещения';
COMMENT ON COLUMN esz.union_catalog_services.external_system_id IS 'Ссылка на внешнюю систему';
COMMENT ON COLUMN esz.union_catalog_services.extend_entity_guid IS 'Уникальный идентификатор сущности';
COMMENT ON COLUMN esz.union_catalog_services.project_type_id IS 'Идентификатор типа проекта';


-- esz.union_catalog_services_class_parallel_rel definition

-- Drop table

-- DROP TABLE esz.union_catalog_services_class_parallel_rel;

CREATE TABLE esz.union_catalog_services_class_parallel_rel (
	union_catalog_services_id int4 NOT NULL, -- Ссылка на услугу ГПД
	class_parallel_id int4 NOT NULL, -- Ссылка на параллель
	CONSTRAINT union_catalog_services_class_parallel_rel_pkey PRIMARY KEY (union_catalog_services_id, class_parallel_id)
);
CREATE INDEX fk_union_catalog_services_class_parallel_rel ON esz.union_catalog_services_class_parallel_rel USING btree (class_parallel_id);
COMMENT ON TABLE esz.union_catalog_services_class_parallel_rel IS 'Связь таблиц union_catalog_services и class_parallel';

-- Column comments

COMMENT ON COLUMN esz.union_catalog_services_class_parallel_rel.union_catalog_services_id IS 'Ссылка на услугу ГПД';
COMMENT ON COLUMN esz.union_catalog_services_class_parallel_rel.class_parallel_id IS 'Ссылка на параллель';


-- esz.union_catalog_to_place_service_rel definition

-- Drop table

-- DROP TABLE esz.union_catalog_to_place_service_rel;

CREATE TABLE esz.union_catalog_to_place_service_rel (
	place_service_id int4 NOT NULL, -- Уникальный идентификатор
	union_catalog_services_id int4 NOT NULL, -- Уникальный идентификатор
	CONSTRAINT union_catalog_to_place_service_rel_pkey PRIMARY KEY (place_service_id, union_catalog_services_id)
);
CREATE INDEX fk_union_catalog_to_place_service_rel ON esz.union_catalog_to_place_service_rel USING btree (place_service_id);
CREATE INDEX idx_union_catalog_to_place_service_rel_union_catalog_services_i ON esz.union_catalog_to_place_service_rel USING btree (union_catalog_services_id);
COMMENT ON TABLE esz.union_catalog_to_place_service_rel IS 'Связь таблиц union_catalog_services и place_service';

-- Column comments

COMMENT ON COLUMN esz.union_catalog_to_place_service_rel.place_service_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN esz.union_catalog_to_place_service_rel.union_catalog_services_id IS 'Уникальный идентификатор';


-- esz."user" definition

-- Drop table

-- DROP TABLE esz."user";

CREATE TABLE esz."user" (
	id int4 NOT NULL, -- Копия идентификатора пользователя из таблицы eszUsers.User
	organization_id int4 NULL, -- Идентификатор организации
	"name" varchar(500) NULL, -- Имя пользователя
	login varchar(500) NULL, -- Логин пользователя
	CONSTRAINT user_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_organization_user_rel ON esz."user" USING btree (organization_id);
CREATE INDEX ind_user_login_user_status ON esz."user" USING btree (login);
COMMENT ON TABLE esz."user" IS 'Пользователь (новая версия)';

-- Column comments

COMMENT ON COLUMN esz."user".id IS 'Копия идентификатора пользователя из таблицы eszUsers.User';
COMMENT ON COLUMN esz."user".organization_id IS 'Идентификатор организации';
COMMENT ON COLUMN esz."user"."name" IS 'Имя пользователя';
COMMENT ON COLUMN esz."user".login IS 'Логин пользователя';


-- esz.work_schedule definition

-- Drop table

-- DROP TABLE esz.work_schedule;

CREATE TABLE esz.work_schedule (
	id serial4 NOT NULL, -- Уникальный идентификатор записи
	service_class_id int4 NULL, -- Уникальный идентификатор группы обучения
	date_start timestamp(0) NULL, -- Дата начала периода
	date_end timestamp(0) NULL, -- Дата окончания периода
	monday varchar(1000) NULL, -- Интервалы времени занятий в понедельник
	tuesday varchar(1000) NULL, -- Интервалы времени занятий во вторник
	wednesday varchar(1000) NULL, -- Интервалы времени занятий в среду
	thursday varchar(1000) NULL, -- Интервалы времени занятий в четверг
	friday varchar(1000) NULL, -- Интервалы времени занятий в пятницу
	saturday varchar(1000) NULL, -- Интервалы времени занятий в субботу
	sunday varchar(1000) NULL, -- Интервалы времени занятий в воскресенье
	is_archive bool DEFAULT false NOT NULL, -- Признак архивной записи
	date_create timestamp(0) DEFAULT now() NOT NULL, -- Дата создания
	date_change timestamp(0) NULL, -- Дата обновления
	CONSTRAINT work_schedule_pkey PRIMARY KEY (id)
);
CREATE INDEX fk_work_schedule_service_class ON esz.work_schedule USING btree (service_class_id);
COMMENT ON TABLE esz.work_schedule IS 'Расписания занятий по периодам и интервалам';

-- Column comments

COMMENT ON COLUMN esz.work_schedule.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.work_schedule.service_class_id IS 'Уникальный идентификатор группы обучения';
COMMENT ON COLUMN esz.work_schedule.date_start IS 'Дата начала периода';
COMMENT ON COLUMN esz.work_schedule.date_end IS 'Дата окончания периода';
COMMENT ON COLUMN esz.work_schedule.monday IS 'Интервалы времени занятий в понедельник';
COMMENT ON COLUMN esz.work_schedule.tuesday IS 'Интервалы времени занятий во вторник';
COMMENT ON COLUMN esz.work_schedule.wednesday IS 'Интервалы времени занятий в среду';
COMMENT ON COLUMN esz.work_schedule.thursday IS 'Интервалы времени занятий в четверг';
COMMENT ON COLUMN esz.work_schedule.friday IS 'Интервалы времени занятий в пятницу';
COMMENT ON COLUMN esz.work_schedule.saturday IS 'Интервалы времени занятий в субботу';
COMMENT ON COLUMN esz.work_schedule.sunday IS 'Интервалы времени занятий в воскресенье';
COMMENT ON COLUMN esz.work_schedule.is_archive IS 'Признак архивной записи';
COMMENT ON COLUMN esz.work_schedule.date_create IS 'Дата создания';
COMMENT ON COLUMN esz.work_schedule.date_change IS 'Дата обновления';


-- esz.additional_agreement foreign keys

ALTER TABLE esz.additional_agreement ADD CONSTRAINT fk_union_catalog_services_additional_agreement FOREIGN KEY (union_catalog_services_id) REFERENCES esz.union_catalog_services(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz.admission_plan foreign keys

ALTER TABLE esz.admission_plan ADD CONSTRAINT fk_admission_plan_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.admission_plan ADD CONSTRAINT fk_admission_plan_services_rel FOREIGN KEY (union_catalog_services_id) REFERENCES esz.union_catalog_services(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.admission_plan ADD CONSTRAINT fk_organization_admission_plan_rel FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.catalogue_restrictions_type_rel foreign keys

ALTER TABLE esz.catalogue_restrictions_type_rel ADD CONSTRAINT fk_catalogue_restrictions_union_catalog_service FOREIGN KEY (union_catalog_services_id) REFERENCES esz.union_catalog_services(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE esz.catalogue_restrictions_type_rel ADD CONSTRAINT fk_catalogue_restrictions_union_catalog_service2 FOREIGN KEY (candidate_restriction_type_id) REFERENCES esz.candidate_restriction_type(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz.class_name foreign keys

ALTER TABLE esz.class_name ADD CONSTRAINT fk_class_name_class_letter FOREIGN KEY (class_letter_id) REFERENCES esz.class_letter(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.class_name ADD CONSTRAINT fk_class_name_class_parallel FOREIGN KEY (class_parallel_id) REFERENCES esz.class_parallel(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.class_name ADD CONSTRAINT fk_class_name_organization FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz.classificator_eku_edit foreign keys

ALTER TABLE esz.classificator_eku_edit ADD CONSTRAINT fk_classificator_eku_edit_education_type FOREIGN KEY (education_type_id) REFERENCES esz.education_type(id) ON DELETE RESTRICT ON UPDATE CASCADE;
ALTER TABLE esz.classificator_eku_edit ADD CONSTRAINT fk_classificator_eku_edit_user FOREIGN KEY (user_id) REFERENCES esz."user"(id) ON DELETE RESTRICT ON UPDATE CASCADE;
ALTER TABLE esz.classificator_eku_edit ADD CONSTRAINT fk_classificator_eku_edit_vedomstvo FOREIGN KEY (vedomstvo_id) REFERENCES esz.vedomstvo(id) ON DELETE RESTRICT ON UPDATE CASCADE;


-- esz.classificator_eku_edit_action foreign keys

ALTER TABLE esz.classificator_eku_edit_action ADD CONSTRAINT fk_classificator_eku_edit_action_rel FOREIGN KEY (edit_id) REFERENCES esz.classificator_eku_edit(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz.classificator_eku_edit_prog foreign keys

ALTER TABLE esz.classificator_eku_edit_prog ADD CONSTRAINT fk_classificator_eku_edit_action_prog_rel FOREIGN KEY (action_id) REFERENCES esz.classificator_eku_edit_action(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz.classificator_eku_limit foreign keys

ALTER TABLE esz.classificator_eku_limit ADD CONSTRAINT fk_classificator_eku_limit_classificator_eku FOREIGN KEY (classificator_eku_id) REFERENCES esz.classificator_eku(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE esz.classificator_eku_limit ADD CONSTRAINT fk_classificator_eku_limit_education_type FOREIGN KEY (education_type_id) REFERENCES esz.education_type(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE esz.classificator_eku_limit ADD CONSTRAINT fk_classificator_eku_limit_organization FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE esz.classificator_eku_limit ADD CONSTRAINT fk_classificator_eku_limit_year_of_training FOREIGN KEY (year_of_training_id) REFERENCES esz.year_of_training(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz.classificator_to_organization_rel foreign keys

ALTER TABLE esz.classificator_to_organization_rel ADD CONSTRAINT fk_classificator_classificator_to_org FOREIGN KEY (classificator_eku_id) REFERENCES esz.classificator_eku(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE esz.classificator_to_organization_rel ADD CONSTRAINT fk_organization_classificator_to_org FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz.errors foreign keys

ALTER TABLE esz.errors ADD CONSTRAINT fk_errors_user FOREIGN KEY (user_id) REFERENCES esz."user"(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.filter_organization_rel foreign keys

ALTER TABLE esz.filter_organization_rel ADD CONSTRAINT fk_filter_organization_rel FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE esz.filter_organization_rel ADD CONSTRAINT fk_filter_organization_rel2 FOREIGN KEY (filter_id) REFERENCES esz."filter"(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz.logging foreign keys

ALTER TABLE esz.logging ADD CONSTRAINT fk_sign_to_log_rel FOREIGN KEY (sign_id) REFERENCES esz.sign(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.logging ADD CONSTRAINT fk_type_logging_to_logging_rel FOREIGN KEY (logging_type_id) REFERENCES esz.logging_type(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.logging ADD CONSTRAINT fk_user_logging_rel FOREIGN KEY (user_id) REFERENCES esz."user"(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.mrsd foreign keys

ALTER TABLE esz.mrsd ADD CONSTRAINT fk_mrsd_organization_parent FOREIGN KEY (mrsd_org_id) REFERENCES esz.organization(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz.office_code foreign keys

ALTER TABLE esz.office_code ADD CONSTRAINT fk_office_code_items_work_rel FOREIGN KEY (items_work_id) REFERENCES esz.items_work(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.office_code ADD CONSTRAINT fk_office_code_rel FOREIGN KEY (union_catalog_services_id) REFERENCES esz.union_catalog_services(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.organization foreign keys

ALTER TABLE esz.organization ADD CONSTRAINT fk_address_organization FOREIGN KEY (address_id) REFERENCES esz.address(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.organization ADD CONSTRAINT fk_mrsd_organization FOREIGN KEY (mrsd_id) REFERENCES esz.mrsd(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.organization ADD CONSTRAINT fk_organization_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.organization ADD CONSTRAINT fk_organization_head_organization FOREIGN KEY (head_organization_id) REFERENCES esz.organization(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.organization ADD CONSTRAINT fk_organization_organization_status FOREIGN KEY (organization_status_id) REFERENCES esz.organization_status(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.organization ADD CONSTRAINT fk_organization_rel FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.organization ADD CONSTRAINT fk_organization_type_financing FOREIGN KEY (organization_type_financing_id) REFERENCES esz.organization_type_financing(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.organization ADD CONSTRAINT fk_sch_submission FOREIGN KEY (vedomstvo_id) REFERENCES esz.vedomstvo(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE esz.organization ADD CONSTRAINT fk_sch_type_code FOREIGN KEY (types_providing_services_id) REFERENCES esz.types_providing_services(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz.organization_address_rel foreign keys

ALTER TABLE esz.organization_address_rel ADD CONSTRAINT fk_organization_address_rel FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE esz.organization_address_rel ADD CONSTRAINT fk_organization_address_rel2 FOREIGN KEY (address_id) REFERENCES esz.address(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz.organization_building_resource foreign keys

ALTER TABLE esz.organization_building_resource ADD CONSTRAINT fk_org_build_resource_address_rel FOREIGN KEY (address_id) REFERENCES esz.address(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.organization_building_resource ADD CONSTRAINT fk_org_resource_place_rel FOREIGN KEY (place_service_id) REFERENCES esz.place_service(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.organization_building_resource ADD CONSTRAINT fk_res_org_rel FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.organization_class_parallel_rel foreign keys

ALTER TABLE esz.organization_class_parallel_rel ADD CONSTRAINT fk_class_parallel_org_rel FOREIGN KEY (class_parallel_id) REFERENCES esz.class_parallel(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.organization_class_parallel_rel ADD CONSTRAINT fk_org_class_parallel_rel FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.organization_class_parallel_rel ADD CONSTRAINT fk_organization_class_parallel_rel_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.organization_history foreign keys

ALTER TABLE esz.organization_history ADD CONSTRAINT fk_organization_history_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.organization_history ADD CONSTRAINT fk_organization_history_organization FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.organization_history ADD CONSTRAINT fk_organization_history_organization_history_type FOREIGN KEY (organization_history_type_id) REFERENCES esz.organization_history_type(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.organization_program foreign keys

ALTER TABLE esz.organization_program ADD CONSTRAINT fk_fk_link_org_program FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE RESTRICT ON UPDATE RESTRICT;


-- esz.organization_to_items_work foreign keys

ALTER TABLE esz.organization_to_items_work ADD CONSTRAINT fk_organization_to_items_work FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE esz.organization_to_items_work ADD CONSTRAINT fk_organization_to_items_work2 FOREIGN KEY (items_work_id) REFERENCES esz.items_work(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz.organization_to_place foreign keys

ALTER TABLE esz.organization_to_place ADD CONSTRAINT fk_organization_to_place FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE esz.organization_to_place ADD CONSTRAINT fk_organization_to_place2 FOREIGN KEY (place_service_id) REFERENCES esz.place_service(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz.person_position_organization_rel foreign keys

ALTER TABLE esz.person_position_organization_rel ADD CONSTRAINT fk_organization_person_position_organization_rel FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE esz.person_position_organization_rel ADD CONSTRAINT fk_person_position_person_position_organization_rel FOREIGN KEY (person_position_id) REFERENCES esz.person_position(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE esz.person_position_organization_rel ADD CONSTRAINT fk_personperson_position_organization_rel FOREIGN KEY (person_id) REFERENCES esz.person(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz.photo foreign keys

ALTER TABLE esz.photo ADD CONSTRAINT fk_photo_org_rel FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.photo ADD CONSTRAINT fk_photo_union_catalog_services FOREIGN KEY (union_catalog_services_id) REFERENCES esz.union_catalog_services(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz.preliminary_request foreign keys

ALTER TABLE esz.preliminary_request ADD CONSTRAINT fk_preliminary_request_contract FOREIGN KEY (contract_id) REFERENCES esz.contract(id);
ALTER TABLE esz.preliminary_request ADD CONSTRAINT fk_preliminary_request_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id);
ALTER TABLE esz.preliminary_request ADD CONSTRAINT fk_preliminary_request_request FOREIGN KEY (request_id) REFERENCES esz.request(id);


-- esz.pupil_completion_document foreign keys

ALTER TABLE esz.pupil_completion_document ADD CONSTRAINT fk_pupil_completion_document_document_type_rel FOREIGN KEY (document_type_id) REFERENCES esz.document_type(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.pupil_completion_document ADD CONSTRAINT fk_pupil_completion_document_organization_rel FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.pupil_completion_document ADD CONSTRAINT fk_pupil_completion_document_programm_module_rel FOREIGN KEY (programm_module_id) REFERENCES esz.programm_module(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.pupil_completion_document ADD CONSTRAINT fk_pupil_completion_document_union_catalog_services_rel FOREIGN KEY (union_catalog_services_id) REFERENCES esz.union_catalog_services(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.pupil_completion_document ADD CONSTRAINT fk_pupil_pupil_completion_document_rel FOREIGN KEY (pupil_id) REFERENCES esz.pupil(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.pupil_completion_document_file_rel foreign keys

ALTER TABLE esz.pupil_completion_document_file_rel ADD CONSTRAINT fk_pupil_completion_document_file_rel FOREIGN KEY (pupil_completion_document_id) REFERENCES esz.pupil_completion_document(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz.request foreign keys

ALTER TABLE esz.request ADD CONSTRAINT fk_request_service_class FOREIGN KEY (service_class_id) REFERENCES esz.service_class(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.request_scan_document foreign keys

ALTER TABLE esz.request_scan_document ADD CONSTRAINT fk_request_scan_document_request FOREIGN KEY (request_id) REFERENCES esz.request(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.request_scan_document ADD CONSTRAINT fk_request_scan_document_rtshed_document_type FOREIGN KEY (rtshed_document_type_id) REFERENCES esz.rtshed_document_type(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz.schedule_of_classes foreign keys

ALTER TABLE esz.schedule_of_classes ADD CONSTRAINT fk_schedule_of_classes_service_class FOREIGN KEY (service_class_id) REFERENCES esz.service_class(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.schedule_of_service foreign keys

ALTER TABLE esz.schedule_of_service ADD CONSTRAINT fk_items_work_shedule_rel FOREIGN KEY (items_work_id) REFERENCES esz.items_work(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.schedule_of_service ADD CONSTRAINT fk_organization_shedule_rel FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.schedule_of_service ADD CONSTRAINT fk_schedule_of_service_rel FOREIGN KEY (union_catalog_services_id) REFERENCES esz.union_catalog_services(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.schedule_of_service ADD CONSTRAINT fk_service_class_schedule_of_service FOREIGN KEY (service_class_id) REFERENCES esz.service_class(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.schedule_of_service ADD CONSTRAINT fk_shedule_service FOREIGN KEY (shedule_period_id) REFERENCES esz.shedule_period(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.schedule_of_service ADD CONSTRAINT fk_types_of_repetition_rel FOREIGN KEY (types_of_repetition_id) REFERENCES esz.types_of_repetition(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.schedule_of_timetable foreign keys

ALTER TABLE esz.schedule_of_timetable ADD CONSTRAINT fk_schedule_group_rel FOREIGN KEY (training_group_id) REFERENCES esz.training_group(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.schedule_of_timetable ADD CONSTRAINT fk_schedule_of_timetable_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.schedule_of_timetable ADD CONSTRAINT fk_schedule_of_timetable_person FOREIGN KEY (person_id) REFERENCES esz.person(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.schedule_of_timetable ADD CONSTRAINT fk_schedule_of_timetable_t_tor_rel FOREIGN KEY (types_of_repetition_id) REFERENCES esz.types_of_repetition(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.schedule_of_timetable ADD CONSTRAINT fk_schedule_place_rel FOREIGN KEY (place_service_id) REFERENCES esz.place_service(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.schedule_of_timetable ADD CONSTRAINT fk_training_group_status_rel FOREIGN KEY (training_group_status_id) REFERENCES esz.training_group_status(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.service_class foreign keys

ALTER TABLE esz.service_class ADD CONSTRAINT fk_class_org_rel FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.service_class ADD CONSTRAINT fk_class_subclass_rel FOREIGN KEY (service_class_id) REFERENCES esz.service_class(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.service_class ADD CONSTRAINT fk_service_class_address_rel FOREIGN KEY (address_id) REFERENCES esz.address(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.service_class ADD CONSTRAINT fk_service_class_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.service_class ADD CONSTRAINT fk_service_class_programm_module_rel FOREIGN KEY (programm_module_id) REFERENCES esz.programm_module(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.service_class ADD CONSTRAINT fk_service_class_training_group FOREIGN KEY (training_group_id) REFERENCES esz.training_group(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.service_class ADD CONSTRAINT fk_service_classunion_catalog_services_rel FOREIGN KEY (union_catalog_services_id) REFERENCES esz.union_catalog_services(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.service_class ADD CONSTRAINT fk_srv_class_start_status_rel FOREIGN KEY (service_class_start_status_id) REFERENCES esz.service_class_start_status(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.service_class ADD CONSTRAINT fk_srv_class_status_rel FOREIGN KEY (service_class_status_id) REFERENCES esz.service_class_status(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.service_class_history foreign keys

ALTER TABLE esz.service_class_history ADD CONSTRAINT fk_fk_history FOREIGN KEY (service_class_id) REFERENCES esz.service_class(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.service_class_history ADD CONSTRAINT fk_new_organization FOREIGN KEY (new_organization_id) REFERENCES esz.organization(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.service_class_history ADD CONSTRAINT fk_old_organization FOREIGN KEY (old_organization_id) REFERENCES esz.organization(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.service_class_person_rel foreign keys

ALTER TABLE esz.service_class_person_rel ADD CONSTRAINT fk_service_class_person_relperson FOREIGN KEY (person_id) REFERENCES esz.person(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.service_class_person_rel ADD CONSTRAINT fk_service_class_person_relservice_class FOREIGN KEY (service_class_id) REFERENCES esz.service_class(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.service_class_rel foreign keys

ALTER TABLE esz.service_class_rel ADD CONSTRAINT fk_service_class_rel FOREIGN KEY (union_catalog_services_id) REFERENCES esz.union_catalog_services(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE esz.service_class_rel ADD CONSTRAINT fk_service_class_rel2 FOREIGN KEY (service_class_id) REFERENCES esz.service_class(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz.service_discipline foreign keys

ALTER TABLE esz.service_discipline ADD CONSTRAINT fk_discipline_service_rel FOREIGN KEY (union_catalog_services_id) REFERENCES esz.union_catalog_services(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.service_discipline ADD CONSTRAINT fk_srv_discipline_rel FOREIGN KEY (discipline_id) REFERENCES esz.discipline(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.service_history foreign keys

ALTER TABLE esz.service_history ADD CONSTRAINT fk_service_hist_org_rel FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.service_history ADD CONSTRAINT fk_service_hist_rel FOREIGN KEY (union_catalog_services_id) REFERENCES esz.union_catalog_services(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.service_stage foreign keys

ALTER TABLE esz.service_stage ADD CONSTRAINT fk_stage_level_rel FOREIGN KEY (programm_level_id) REFERENCES esz.programm_level(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.service_stage ADD CONSTRAINT fk_stage_service_rel FOREIGN KEY (union_catalog_services_id) REFERENCES esz.union_catalog_services(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.service_subclass foreign keys

ALTER TABLE esz.service_subclass ADD CONSTRAINT fk_subclass_class_rel FOREIGN KEY (service_class_id) REFERENCES esz.service_class(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.sign foreign keys

ALTER TABLE esz.sign ADD CONSTRAINT fk_link_to_sign_rel FOREIGN KEY (signing_type_id) REFERENCES esz.signing_type(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.sign ADD CONSTRAINT fk_sign_to_user_rel FOREIGN KEY (user_id) REFERENCES esz."user"(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.subclass_mega_rel foreign keys

ALTER TABLE esz.subclass_mega_rel ADD CONSTRAINT fk_subclass_mega_rel2 FOREIGN KEY (service_subclass_id) REFERENCES esz.service_subclass(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz."subscription" foreign keys

ALTER TABLE esz."subscription" ADD CONSTRAINT fk_subscription_event_subscription_type FOREIGN KEY (event_subscription_type_id) REFERENCES esz.event_subscription_type(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz."subscription" ADD CONSTRAINT fk_subscription_service_rel FOREIGN KEY (union_catalog_services_id) REFERENCES esz.union_catalog_services(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.training_group foreign keys

ALTER TABLE esz.training_group ADD CONSTRAINT fk_group_catalog_rel FOREIGN KEY (union_catalog_services_id) REFERENCES esz.union_catalog_services(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.training_group ADD CONSTRAINT fk_group_plan_rel FOREIGN KEY (admission_plan_id) REFERENCES esz.admission_plan(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.training_group ADD CONSTRAINT fk_train_group_person_rel FOREIGN KEY (person_id) REFERENCES esz.person(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.training_group ADD CONSTRAINT fk_training_group_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.training_group ADD CONSTRAINT fk_training_group_stage_rel FOREIGN KEY (service_stage_id) REFERENCES esz.service_stage(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.training_stage foreign keys

ALTER TABLE esz.training_stage ADD CONSTRAINT fk_train_stage_group_rel FOREIGN KEY (training_group_id) REFERENCES esz.training_group(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.union_catalog_services foreign keys

ALTER TABLE esz.union_catalog_services ADD CONSTRAINT fk_catalog_duration_unit_rel FOREIGN KEY (duration_of_training_unit_id) REFERENCES esz.duration_of_training_unit(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.union_catalog_services ADD CONSTRAINT fk_catalogue_level_rel FOREIGN KEY (programm_level_id) REFERENCES esz.programm_level(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.union_catalog_services ADD CONSTRAINT fk_catalogue_restrictions_rel FOREIGN KEY (candidate_restrictions_id) REFERENCES esz.candidate_restrictions(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.union_catalog_services ADD CONSTRAINT fk_classifficator_to_service FOREIGN KEY (classificator_eku_id) REFERENCES esz.classificator_eku(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.union_catalog_services ADD CONSTRAINT fk_finance_code FOREIGN KEY (type_financing_id) REFERENCES esz.type_financing(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.union_catalog_services ADD CONSTRAINT fk_office_code_service FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.union_catalog_services ADD CONSTRAINT fk_parent_union_catalog_services_rel FOREIGN KEY (union_catalog_services_id) REFERENCES esz.union_catalog_services(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.union_catalog_services ADD CONSTRAINT fk_programm_service_rel FOREIGN KEY (file_programm_service_id) REFERENCES esz.file_storage(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.union_catalog_services ADD CONSTRAINT fk_rule_service_rel FOREIGN KEY (file_rule_service_id) REFERENCES esz.file_storage(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.union_catalog_services ADD CONSTRAINT fk_schedule_type_of_service_rel FOREIGN KEY (schedule_type_of_service_id) REFERENCES esz.schedule_type_of_service(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.union_catalog_services ADD CONSTRAINT fk_service_form_rel FOREIGN KEY (service_form_id) REFERENCES esz.service_form(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.union_catalog_services ADD CONSTRAINT fk_status_service FOREIGN KEY (service_status_id) REFERENCES esz.service_status(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.union_catalog_services ADD CONSTRAINT fk_type_of_attendance FOREIGN KEY (type_of_attendance_id) REFERENCES esz.type_of_attendance(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.union_catalog_services ADD CONSTRAINT fk_type_union_catalog_services_rel FOREIGN KEY (type_union_catalog_services_id) REFERENCES esz.type_union_catalog_services(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.union_catalog_services ADD CONSTRAINT fk_type_value_service_rel FOREIGN KEY (type_value_service_id) REFERENCES esz.type_value_service(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.union_catalog_services ADD CONSTRAINT fk_union_catalog_services_css_organization FOREIGN KEY (css_organization_id) REFERENCES esz.organization(id) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE esz.union_catalog_services ADD CONSTRAINT fk_union_catalog_services_external_system FOREIGN KEY (external_system_id) REFERENCES esz.external_system(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.union_catalog_services_class_parallel_rel foreign keys

ALTER TABLE esz.union_catalog_services_class_parallel_rel ADD CONSTRAINT fk_union_catalog_services_class_parallel_rel FOREIGN KEY (class_parallel_id) REFERENCES esz.class_parallel(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE esz.union_catalog_services_class_parallel_rel ADD CONSTRAINT fk_union_catalog_services_class_parallel_rel2 FOREIGN KEY (union_catalog_services_id) REFERENCES esz.union_catalog_services(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz.union_catalog_to_place_service_rel foreign keys

ALTER TABLE esz.union_catalog_to_place_service_rel ADD CONSTRAINT fk_union_catalog_to_place_service_rel FOREIGN KEY (place_service_id) REFERENCES esz.place_service(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE esz.union_catalog_to_place_service_rel ADD CONSTRAINT fk_union_catalog_to_place_service_rel2 FOREIGN KEY (union_catalog_services_id) REFERENCES esz.union_catalog_services(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- esz."user" foreign keys

ALTER TABLE esz."user" ADD CONSTRAINT fk_organization_user_rel FOREIGN KEY (organization_id) REFERENCES esz.organization(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.work_schedule foreign keys

ALTER TABLE esz.work_schedule ADD CONSTRAINT fk_work_schedule_service_class FOREIGN KEY (service_class_id) REFERENCES esz.service_class(id) ON DELETE SET NULL ON UPDATE CASCADE;


-- esz.v_dict_subjects_udod source

CREATE OR REPLACE VIEW esz.v_dict_subjects_udod
AS SELECT ce.id,
    COALESCE(cr.name, cf.name) AS activity,
        CASE
            WHEN cr.name IS NULL THEN NULL::character varying
            ELSE cf.name
        END AS profile,
    ce.name,
    ce.general_classificator_eku_id AS code,
    ce.date_create AS created_at,
        CASE
            WHEN COALESCE(ce.date_change, '-infinity'::timestamp without time zone) > COALESCE(cf.date_change, '-infinity'::timestamp without time zone) AND COALESCE(ce.date_change, '-infinity'::timestamp without time zone) > COALESCE(cr.date_change, '-infinity'::timestamp without time zone) THEN ce.date_change
            WHEN COALESCE(cf.date_change, '-infinity'::timestamp without time zone) > COALESCE(ce.date_change, '-infinity'::timestamp without time zone) AND COALESCE(cf.date_change, '-infinity'::timestamp without time zone) > COALESCE(cr.date_change, '-infinity'::timestamp without time zone) THEN cf.date_change
            ELSE cr.date_change
        END AS updated_at,
        CASE
            WHEN ce.is_archive OR cf.is_archive OR cr.is_archive THEN true
            ELSE false
        END AS is_archive
   FROM esz.classificator_eku ce
     LEFT JOIN esz.classificator_eku cf ON cf.id = ce.parent_id
     LEFT JOIN esz.classificator_eku cr ON cr.id = cf.parent_id
  WHERE NOT (ce.id IN ( SELECT DISTINCT classificator_eku.parent_id
           FROM esz.classificator_eku
          WHERE classificator_eku.parent_id IS NOT NULL))
  ORDER BY ce.id;

COMMENT ON VIEW esz.v_dict_subjects_udod IS 'Отображение классификатора';
COMMENT ON COLUMN esz.v_dict_subjects_udod.id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN esz.v_dict_subjects_udod.activity IS 'Признак активности';
COMMENT ON COLUMN esz.v_dict_subjects_udod.profile IS 'Профиль';
COMMENT ON COLUMN esz.v_dict_subjects_udod."name" IS 'Наименование';
COMMENT ON COLUMN esz.v_dict_subjects_udod.code IS 'Код';
COMMENT ON COLUMN esz.v_dict_subjects_udod.created_at IS 'Дата создания';
COMMENT ON COLUMN esz.v_dict_subjects_udod.updated_at IS 'Дата изменения';
COMMENT ON COLUMN esz.v_dict_subjects_udod.is_archive IS 'Признак архивной записи';


-- esz.v_portal_application_statistics source

CREATE OR REPLACE VIEW esz.v_portal_application_statistics
AS WITH requests_counts AS (
         SELECT r_1.date_create::date AS date,
            count(DISTINCT r_1.sso_id) AS unique_sso_count
           FROM esz.request r_1
          WHERE r_1.flag_last AND r_1.external_uid::text ~~ '%107101%'::text AND r_1.date_create > '2024-07-10 00:00:00'::timestamp without time zone
          GROUP BY (r_1.date_create::date)
        ), messages_count_1010 AS (
         SELECT m.date_create::date AS date,
            sum(
                CASE
                    WHEN s.queue_name::text = 'CIRCLES_DONM.APPLICATION_INC'::text THEN 1
                    ELSE 0
                END) AS count_1010
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.APPLICATION_INC'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone
          GROUP BY (m.date_create::date)
        ), messages_count_1035 AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_1035
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_OUT'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e313033353c2f25'::bytea
          GROUP BY (m.date_create::date)
        ), messages_count_103099 AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_103099
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_OUT'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e3130333039393c2f25'::bytea
          GROUP BY (m.date_create::date)
        ), messages_count_1050_1 AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_1050_1
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_OUT'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e313035303c2f25'::bytea AND (xpath('//ns:Reason/ns:Code/text()'::text, convert_from(md.content, 'UTF8'::name)::xml, ARRAY[ARRAY['ns'::text, 'http://asguf.mos.ru/rkis_gu/coordinate/v6_1/'::text]]))[1]::text = '1'::text
          GROUP BY (m.date_create::date)
        ), messages_count_1050_2 AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_1050_2
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_OUT'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e313035303c2f25'::bytea AND (xpath('//ns:Reason/ns:Code/text()'::text, convert_from(md.content, 'UTF8'::name)::xml, ARRAY[ARRAY['ns'::text, 'http://asguf.mos.ru/rkis_gu/coordinate/v6_1/'::text]]))[1]::text = '2'::text
          GROUP BY (m.date_create::date)
        ), messages_count_1050_3 AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_1050_3
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_OUT'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e313035303c2f25'::bytea AND (xpath('//ns:Reason/ns:Code/text()'::text, convert_from(md.content, 'UTF8'::name)::xml, ARRAY[ARRAY['ns'::text, 'http://asguf.mos.ru/rkis_gu/coordinate/v6_1/'::text]]))[1]::text = '3'::text
          GROUP BY (m.date_create::date)
        ), messages_count_1050_4 AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_1050_4
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_OUT'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e313035303c2f25'::bytea AND (xpath('//ns:Reason/ns:Code/text()'::text, convert_from(md.content, 'UTF8'::name)::xml, ARRAY[ARRAY['ns'::text, 'http://asguf.mos.ru/rkis_gu/coordinate/v6_1/'::text]]))[1]::text = '4'::text
          GROUP BY (m.date_create::date)
        ), messages_count_1050_5 AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_1050_5
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_OUT'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e313035303c2f25'::bytea AND (xpath('//ns:Reason/ns:Code/text()'::text, convert_from(md.content, 'UTF8'::name)::xml, ARRAY[ARRAY['ns'::text, 'http://asguf.mos.ru/rkis_gu/coordinate/v6_1/'::text]]))[1]::text = '5'::text
          GROUP BY (m.date_create::date)
        ), messages_count_1060_1 AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_1060_1
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_OUT'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e313036303c2f25'::bytea AND (xpath('//ns:Reason/ns:Code/text()'::text, convert_from(md.content, 'UTF8'::name)::xml, ARRAY[ARRAY['ns'::text, 'http://asguf.mos.ru/rkis_gu/coordinate/v6_1/'::text]]))[1]::text = '1'::text
          GROUP BY (m.date_create::date)
        ), messages_count_1060_2 AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_1060_2
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_OUT'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e313036303c2f25'::bytea AND (xpath('//ns:Reason/ns:Code/text()'::text, convert_from(md.content, 'UTF8'::name)::xml, ARRAY[ARRAY['ns'::text, 'http://asguf.mos.ru/rkis_gu/coordinate/v6_1/'::text]]))[1]::text = '2'::text
          GROUP BY (m.date_create::date)
        ), messages_count_1060_3 AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_1060_3
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_OUT'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e313036303c2f25'::bytea AND (xpath('//ns:Reason/ns:Code/text()'::text, convert_from(md.content, 'UTF8'::name)::xml, ARRAY[ARRAY['ns'::text, 'http://asguf.mos.ru/rkis_gu/coordinate/v6_1/'::text]]))[1]::text = '3'::text
          GROUP BY (m.date_create::date)
        ), messages_count_1080_1 AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_1080_1
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_OUT'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e313038303c2f25'::bytea AND (xpath('//ns:Reason/ns:Code/text()'::text, convert_from(md.content, 'UTF8'::name)::xml, ARRAY[ARRAY['ns'::text, 'http://asguf.mos.ru/rkis_gu/coordinate/v6_1/'::text]]))[1]::text = '1'::text
          GROUP BY (m.date_create::date)
        ), messages_count_1080_2 AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_1080_2
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_OUT'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e313038303c2f25'::bytea AND (xpath('//ns:Reason/ns:Code/text()'::text, convert_from(md.content, 'UTF8'::name)::xml, ARRAY[ARRAY['ns'::text, 'http://asguf.mos.ru/rkis_gu/coordinate/v6_1/'::text]]))[1]::text = '2'::text
          GROUP BY (m.date_create::date)
        ), messages_count_1080_3 AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_1080_3
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_OUT'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e313038303c2f25'::bytea AND (xpath('//ns:Reason/ns:Code/text()'::text, convert_from(md.content, 'UTF8'::name)::xml, ARRAY[ARRAY['ns'::text, 'http://asguf.mos.ru/rkis_gu/coordinate/v6_1/'::text]]))[1]::text = '3'::text
          GROUP BY (m.date_create::date)
        ), messages_count_1080_4 AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_1080_4
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_OUT'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e313038303c2f25'::bytea AND (xpath('//ns:Reason/ns:Code/text()'::text, convert_from(md.content, 'UTF8'::name)::xml, ARRAY[ARRAY['ns'::text, 'http://asguf.mos.ru/rkis_gu/coordinate/v6_1/'::text]]))[1]::text = '4'::text
          GROUP BY (m.date_create::date)
        ), messages_count_1080_5 AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_1080_5
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_OUT'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e313038303c2f25'::bytea AND (xpath('//ns:Reason/ns:Code/text()'::text, convert_from(md.content, 'UTF8'::name)::xml, ARRAY[ARRAY['ns'::text, 'http://asguf.mos.ru/rkis_gu/coordinate/v6_1/'::text]]))[1]::text = '5'::text
          GROUP BY (m.date_create::date)
        ), messages_count_8011_1 AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_8011_1
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_INC'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e383031313c2f25'::bytea
          GROUP BY (m.date_create::date)
        ), messages_count_1077 AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_1077
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_OUT'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e313037373c2f25'::bytea
          GROUP BY (m.date_create::date)
        ), messages_count_1090 AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_1090
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_OUT'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e313039303c2f25'::bytea
          GROUP BY (m.date_create::date)
        ), messages_count_1075 AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_1075
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_OUT'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e313037353c2f25'::bytea
          GROUP BY (m.date_create::date)
        ), messages_count_1075_decline AS (
         SELECT m.date_create::date AS date,
            count(DISTINCT m.ext_message_id) AS count_1075_decline
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s ON m.system_id = s.id AND s.queue_name::text = 'CIRCLES_DONM.STATUS_OUT'::text
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
             LEFT JOIN esz.request r_1 ON r_1.external_uid::text = m.ext_message_id::text
             LEFT JOIN esz.mega_relation mr ON mr.request_id = r_1.id
          WHERE m.date_create > '2024-07-10 00:00:00'::timestamp without time zone AND md.content ~~ '\x25537461747573436f64653e313037353c2f25'::bytea AND mr.mega_relation_status_id = 2
          GROUP BY (m.date_create::date)
        ), response_count AS (
         SELECT esr.date_create::date AS date,
            sum(
                CASE
                    WHEN esr.response_status_id = ANY (ARRAY[89, 90, 91, 92, 95, 96, 97, 98]) THEN 1
                    ELSE 0
                END) AS response_count_pasport,
            sum(
                CASE
                    WHEN esr.response_status_id = ANY (ARRAY[90, 96]) THEN 1
                    ELSE 0
                END) AS response_count_pasport_confirmed,
            sum(
                CASE
                    WHEN esr.response_status_id = ANY (ARRAY[91, 97]) THEN 1
                    ELSE 0
                END) AS response_count_pasport_not_confirmed,
            sum(
                CASE
                    WHEN esr.response_status_id = ANY (ARRAY[102, 103, 104, 105]) THEN 1
                    ELSE 0
                END) AS response_count_address,
            sum(
                CASE
                    WHEN esr.response_status_id = 103 THEN 1
                    ELSE 0
                END) AS response_count_address_confirmed,
            sum(
                CASE
                    WHEN esr.response_status_id = 104 THEN 1
                    ELSE 0
                END) AS response_count_address_not_confirmed,
            sum(
                CASE
                    WHEN esr.response_status_id = ANY (ARRAY[108, 109, 110, 111]) THEN 1
                    ELSE 0
                END) AS response_count_relation,
            sum(
                CASE
                    WHEN esr.response_status_id = 109 THEN 1
                    ELSE 0
                END) AS response_count_relation_confirmed,
            sum(
                CASE
                    WHEN esr.response_status_id = 110 THEN 1
                    ELSE 0
                END) AS response_count_relation_not_confirmed
           FROM esz.external_system_response esr
          WHERE esr.date_create > '2024-07-10 00:00:00'::timestamp without time zone
          GROUP BY (esr.date_create::date)
        )
 SELECT COALESCE(u.date, r.date, "с1010".date, "с1035".date, "с1050_5".date, "с1060_1".date, "с1060_2".date, "с1060_3".date, "с1080_1".date, "с1080_2".date, "с1080_3".date, "с1080_4".date, "с8011_1".date, "с1077".date, "с1080_5".date, "с1090".date, "с1075".date, "с1075_decline".date) AS date,
    COALESCE(u.unique_sso_count, 0::bigint) AS unique_sso_count,
    COALESCE("с1010".count_1010, 0::bigint) AS count_1010,
    COALESCE("с1035".count_1035, 0::bigint) AS count_1035,
    COALESCE("с103099".count_103099, 0::bigint) AS count_103099,
    COALESCE("с1050_1".count_1050_1, 0::bigint) + COALESCE("с1050_2".count_1050_2, 0::bigint) + COALESCE("с1050_3".count_1050_3, 0::bigint) + COALESCE("с1050_4".count_1050_4, 0::bigint) + COALESCE("с1050_5".count_1050_5, 0::bigint) AS count_1050,
    COALESCE("с1050_1".count_1050_1, 0::bigint) AS count_1050_1,
    COALESCE("с1050_2".count_1050_2, 0::bigint) AS count_1050_2,
    COALESCE("с1050_3".count_1050_3, 0::bigint) AS count_1050_3,
    COALESCE("с1050_4".count_1050_4, 0::bigint) AS count_1050_4,
    COALESCE("с1050_5".count_1050_5, 0::bigint) AS count_1050_5,
    COALESCE(r.response_count_pasport, 0::bigint) AS mv_count_pasport,
    COALESCE(r.response_count_pasport_confirmed, 0::bigint) AS mv_count_pasport_confirmed,
    COALESCE(r.response_count_pasport_not_confirmed, 0::bigint) AS mv_count_pasport_not_confirmed,
    COALESCE(r.response_count_address, 0::bigint) AS mv_count_address,
    COALESCE(r.response_count_address_confirmed, 0::bigint) AS mv_count_address_confirmed,
    COALESCE(r.response_count_address_not_confirmed, 0::bigint) AS mv_count_address_not_confirmed,
    COALESCE(r.response_count_relation, 0::bigint) AS mv_count_relation,
    COALESCE(r.response_count_relation_confirmed, 0::bigint) AS mv_count_relation_confirmed,
    COALESCE(r.response_count_relation_not_confirmed, 0::bigint) AS mv_count_relation_not_confirmed,
    COALESCE("с1060_1".count_1060_1, 0::bigint) AS count_1060_1,
    COALESCE("с1060_2".count_1060_2, 0::bigint) AS count_1060_2,
    COALESCE("с1060_3".count_1060_3, 0::bigint) AS count_1060_3,
    COALESCE("с1080_1".count_1080_1, 0::bigint) + COALESCE("с1080_2".count_1080_2, 0::bigint) + COALESCE("с1080_3".count_1080_3, 0::bigint) + COALESCE("с1080_4".count_1080_4, 0::bigint) AS count_1080,
    COALESCE("с1080_1".count_1080_1, 0::bigint) AS count_1080_1,
    COALESCE("с1080_2".count_1080_2, 0::bigint) AS count_1080_2,
    COALESCE("с1080_3".count_1080_3, 0::bigint) AS count_1080_3,
    COALESCE("с1080_4".count_1080_4, 0::bigint) AS count_1080_4,
    COALESCE("с8011_1".count_8011_1, 0::bigint) AS count_8011_1,
    COALESCE("с1077".count_1077, 0::bigint) AS count_1077,
    COALESCE("с1080_5".count_1080_5, 0::bigint) AS count_1080_5,
    COALESCE("с1090".count_1090, 0::bigint) AS count_1090,
    COALESCE("с1075".count_1075, 0::bigint) AS count_1075,
    COALESCE("с1075_decline".count_1075_decline, 0::bigint) AS count_1075_decline
   FROM requests_counts u
     FULL JOIN response_count r ON u.date = r.date
     FULL JOIN messages_count_1010 "с1010" ON u.date = "с1010".date
     FULL JOIN messages_count_1035 "с1035" ON u.date = "с1035".date
     FULL JOIN messages_count_103099 "с103099" ON u.date = "с103099".date
     FULL JOIN messages_count_1050_1 "с1050_1" ON u.date = "с1050_1".date
     FULL JOIN messages_count_1050_2 "с1050_2" ON u.date = "с1050_2".date
     FULL JOIN messages_count_1050_3 "с1050_3" ON u.date = "с1050_3".date
     FULL JOIN messages_count_1050_4 "с1050_4" ON u.date = "с1050_4".date
     FULL JOIN messages_count_1050_5 "с1050_5" ON u.date = "с1050_5".date
     FULL JOIN messages_count_1060_1 "с1060_1" ON u.date = "с1060_1".date
     FULL JOIN messages_count_1060_2 "с1060_2" ON u.date = "с1060_2".date
     FULL JOIN messages_count_1060_3 "с1060_3" ON u.date = "с1060_3".date
     FULL JOIN messages_count_1080_1 "с1080_1" ON u.date = "с1080_1".date
     FULL JOIN messages_count_1080_2 "с1080_2" ON u.date = "с1080_2".date
     FULL JOIN messages_count_1080_3 "с1080_3" ON u.date = "с1080_3".date
     FULL JOIN messages_count_1080_4 "с1080_4" ON u.date = "с1080_4".date
     FULL JOIN messages_count_8011_1 "с8011_1" ON u.date = "с8011_1".date
     FULL JOIN messages_count_1077 "с1077" ON u.date = "с1077".date
     FULL JOIN messages_count_1080_5 "с1080_5" ON u.date = "с1080_5".date
     FULL JOIN messages_count_1090 "с1090" ON u.date = "с1090".date
     FULL JOIN messages_count_1075 "с1075" ON u.date = "с1075".date
     FULL JOIN messages_count_1075_decline "с1075_decline" ON u.date = "с1075_decline".date
  ORDER BY (COALESCE(u.date, r.date, "с1010".date, "с1035".date, "с1050_5".date, "с1060_1".date, "с1060_2".date, "с1060_3".date, "с1080_1".date, "с1080_2".date, "с1080_3".date, "с1080_4".date, "с8011_1".date, "с1077".date, "с1080_5".date, "с1090".date, "с1075".date, "с1075_decline".date));

COMMENT ON VIEW esz.v_portal_application_statistics IS 'Отображение статистики по заявлениям в кружки с портала';
COMMENT ON COLUMN esz.v_portal_application_statistics."date" IS 'Дата подачи заявления';
COMMENT ON COLUMN esz.v_portal_application_statistics.unique_sso_count IS 'Количество уникальных заявителей';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1010 IS 'заявление подано 1010';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1035 IS 'Отказ в регистрации заявления 1035';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_103099 IS 'Техсбой 103099';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1050 IS 'Кол-во зарегистрированных заявлений';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1050_1 IS 'Подача обучающимся до 18 лет 1050.1';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1050_2 IS 'Представитель Договор подписан на форме 1050.2';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1050_3 IS 'Представитель Договор направлен в ЛК 1050.3';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1050_4 IS 'Представитель необходимы проверки 1050.4';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1050_5 IS 'Подача обучающимся от 18 лет 1050.5';
COMMENT ON COLUMN esz.v_portal_application_statistics.mv_count_pasport IS 'Ушли на МВ; всего по паспорту (МВД)';
COMMENT ON COLUMN esz.v_portal_application_statistics.mv_count_pasport_confirmed IS 'Паспорт подтвержден';
COMMENT ON COLUMN esz.v_portal_application_statistics.mv_count_pasport_not_confirmed IS 'Паспорт не подтвержден';
COMMENT ON COLUMN esz.v_portal_application_statistics.mv_count_address IS 'Ушли на МВ; всего по адресу (МВД)';
COMMENT ON COLUMN esz.v_portal_application_statistics.mv_count_address_confirmed IS 'Адрес подтвержден';
COMMENT ON COLUMN esz.v_portal_application_statistics.mv_count_address_not_confirmed IS 'Адрес не подтвержден';
COMMENT ON COLUMN esz.v_portal_application_statistics.mv_count_relation IS 'Ушли на МВ; родство (ФНС;СФР)';
COMMENT ON COLUMN esz.v_portal_application_statistics.mv_count_relation_confirmed IS 'Родство подтверждено';
COMMENT ON COLUMN esz.v_portal_application_statistics.mv_count_relation_not_confirmed IS 'Родство не подтверждено';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1060_1 IS 'Ожидание представителя в ОО для подписания договора 1060.1';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1060_2 IS 'Ожидание подписания договора в ЛК 1060.2';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1060_3 IS 'Ожидание предоставления скан-копий 1060.3';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1080 IS 'ВСЕГО Отказ в предоставлении услуги до предложения места';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1080_1 IS 'Аннулирование заявления в связи с неподписанием договора в электронном виде 1080.1';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1080_2 IS 'Неявка заявителя в ОО для подписания договора на бумажном носителе 1080.2';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1080_3 IS 'Заявление аннулировано по причине недостоверности сведений 1080.3';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1080_4 IS 'Не прикреплены скан-копии необходимых документов 1080.4';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_8011_1 IS 'Договор подписан со стороны заявителя 8011.1';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1077 IS 'Место закреплено 1077';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1080_5 IS 'Необходимое минимальное количество обучающихся в группе не набрано 1080.5';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1090 IS 'заявление отозвано 1090';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1075 IS 'Услуга оказана. Договор подписан со стороны ОО 1075';
COMMENT ON COLUMN esz.v_portal_application_statistics.count_1075_decline IS 'Кол-во отчисленных (в связи с неоплатой или отсутствием посещений)';


-- esz.v_portal_application_statistics_v2 source

CREATE OR REPLACE VIEW esz.v_portal_application_statistics_v2
AS SELECT subquery.date,
    subquery.unique_sso_count,
    subquery.count_1010,
    subquery.count_1035,
    subquery.count_103099,
    subquery.count_1050,
    subquery.count_1050_1,
    subquery.count_1050_2,
    subquery.count_1050_3,
    subquery.count_1050_4,
    subquery.count_1050_5,
    subquery.mv_count_pasport,
    subquery.mv_count_pasport_confirmed,
    subquery.mv_count_pasport_not_confirmed,
    subquery.mv_count_pasport_error,
    subquery.mv_count_address,
    subquery.mv_count_address_confirmed,
    subquery.mv_count_address_not_confirmed,
    subquery.mv_count_address_error,
    subquery.mv_count_relation,
    subquery.mv_count_relation_confirmed,
    subquery.mv_count_relation_not_confirmed,
    subquery.mv_count_relation_error,
    subquery.mv_count_cert,
    subquery.mv_count_cert_confirmed,
    subquery.mv_count_cert_not_confirmed,
    subquery.mv_count_cert_error,
    subquery.mv_count_rec,
    subquery.mv_count_rec_confirmed,
    subquery.mv_count_rec_not_confirmed,
    subquery.mv_count_rec_error,
    subquery.count_1060_1,
    subquery.count_1060_2,
    subquery.count_1060_3,
    subquery.count_1080,
    subquery.count_1080_1,
    subquery.count_1080_2,
    subquery.count_1080_3,
    subquery.count_1080_4,
    subquery.count_8011_1,
    subquery.count_1077,
    subquery.count_1080_5,
    subquery.count_1090,
    subquery.count_1075,
    subquery.count_1075_decline
   FROM ( SELECT vps.id,
            vps.date,
            vps.education_type,
            vps.unique_sso_count,
            vps.count_1010,
            vps.count_1035,
            vps.count_103099,
            vps.count_1050,
            vps.count_1050_accepted_online,
            vps.count_1050_1,
            vps.count_1050_2,
            vps.count_1050_3,
            vps.count_1050_4,
            vps.count_1050_5,
            vps.count_1060,
            vps.count_1060_1,
            vps.count_1060_2,
            vps.count_1060_3,
            vps.count_1075,
            vps.count_1075_decline,
            vps.count_1075_not_for_non_payment,
            vps.count_1075_base,
            vps.count_1075_add,
            vps.count_1077,
            vps.count_1080,
            vps.count_1080_1,
            vps.count_1080_2,
            vps.count_1080_3,
            vps.count_1080_4,
            vps.count_1080_5,
            vps.count_1090,
            vps.count_1160,
            vps.count_8011,
            vps.count_8011_1,
            vps.count_8021,
            vps.mv_count_pasport,
            vps.mv_count_pasport_confirmed,
            vps.mv_count_pasport_not_confirmed,
            vps.mv_count_pasport_error,
            vps.mv_count_address,
            vps.mv_count_address_confirmed,
            vps.mv_count_address_not_confirmed,
            vps.mv_count_address_error,
            vps.mv_count_relation,
            vps.mv_count_relation_confirmed,
            vps.mv_count_relation_not_confirmed,
            vps.mv_count_relation_error,
            vps.mv_count_cert,
            vps.mv_count_cert_confirmed,
            vps.mv_count_cert_not_confirmed,
            vps.mv_count_cert_error,
            vps.mv_count_rec,
            vps.mv_count_rec_confirmed,
            vps.mv_count_rec_not_confirmed,
            vps.mv_count_rec_error,
            vps.date_create,
            row_number() OVER (PARTITION BY vps.date ORDER BY vps.date_create DESC) AS rn
           FROM esz_prepare_data.v_portal_statistics vps
          WHERE vps.education_type = 1) subquery
  WHERE subquery.rn = 1;

COMMENT ON VIEW esz.v_portal_application_statistics_v2 IS 'Отображение статистики по заявлениям в кружки с портала (версия 2)';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2."date" IS 'Дата подачи заявления';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.unique_sso_count IS 'Количество уникальных заявителей';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1010 IS 'заявление подано 1010';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1035 IS 'Отказ в регистрации заявления 1035';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_103099 IS 'Техсбой 103099';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1050 IS 'Кол-во зарегистрированных заявлений';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1050_1 IS 'Подача обучающимся до 18 лет 1050.1';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1050_2 IS 'Представитель Договор подписан на форме 1050.2';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1050_3 IS 'Представитель Договор направлен в ЛК 1050.3';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1050_4 IS 'Представитель необходимы проверки 1050.4';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1050_5 IS 'Подача обучающимся от 18 лет 1050.5';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_pasport IS 'Ушли на МВ; всего по паспорту (МВД)';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_pasport_confirmed IS 'Паспорт подтвержден';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_pasport_not_confirmed IS 'Паспорт не подтвержден';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_pasport_error IS 'Паспорт ошибки';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_address IS 'Ушли на МВ; всего по адресу (МВД)';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_address_confirmed IS 'Адрес подтвержден';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_address_not_confirmed IS 'Адрес не подтвержден';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_address_error IS 'Адрес ошибки';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_relation IS 'Ушли на МВ; родство (ФНС;СФР)';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_relation_confirmed IS 'Родство подтверждено';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_relation_not_confirmed IS 'Родство не подтверждено';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_relation_error IS 'Родство ошибки';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_cert IS 'Ушло на МВ, всего по СОР (ФНС)';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_cert_confirmed IS 'СОР подтвержден';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_cert_not_confirmed IS 'СОР не подтвержден';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_cert_error IS 'СОР ошибки';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_rec IS 'Ушло на МВ, всего по АЗ (ФНС)';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_rec_confirmed IS 'АЗ подтверждена';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_rec_not_confirmed IS 'АЗ не подтверждена';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.mv_count_rec_error IS 'АЗ ошибки';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1060_1 IS 'Ожидание представителя в ОО для подписания договора 1060.1';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1060_2 IS 'Ожидание подписания договора в ЛК 1060.2';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1060_3 IS 'Ожидание предоставления скан-копий 1060.3';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1080 IS 'ВСЕГО Отказ в предоставлении услуги до предложения места';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1080_1 IS 'Аннулирование заявления в связи с неподписанием договора в электронном виде 1080.1';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1080_2 IS 'Неявка заявителя в ОО для подписания договора на бумажном носителе 1080.2';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1080_3 IS 'Заявление аннулировано по причине недостоверности сведений 1080.3';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1080_4 IS 'Не прикреплены скан-копии необходимых документов 1080.4';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_8011_1 IS 'Договор подписан со стороны заявителя 8011.1';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1077 IS 'Место закреплено 1077';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1080_5 IS 'Необходимое минимальное количество обучающихся в группе не набрано 1080.5';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1090 IS 'заявление отозвано 1090';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1075 IS 'Услуга оказана. Договор подписан со стороны ОО 1075';
COMMENT ON COLUMN esz.v_portal_application_statistics_v2.count_1075_decline IS 'Кол-во отчисленных (в связи с неоплатой или отсутствием посещений)';


-- esz.v_portal_application_statistics_v3 source

CREATE OR REPLACE VIEW esz.v_portal_application_statistics_v3
AS SELECT subquery.date,
    subquery.count_free,
    subquery.count_paid,
    subquery.unique_sso_count,
    subquery.count_1010,
    subquery.count_1035,
    subquery.count_103099,
    subquery.count_at_work,
    subquery.count_1050,
    subquery.count_1050_1,
    subquery.count_1050_2,
    subquery.count_1050_3,
    subquery.count_1050_4,
    subquery.count_1050_5,
    subquery.mv_count_pasport,
    subquery.mv_count_pasport_confirmed,
    subquery.mv_count_pasport_not_confirmed,
    subquery.mv_count_pasport_error,
    subquery.mv_count_pasport_awaiting,
    subquery.mv_count_address,
    subquery.mv_count_address_confirmed,
    subquery.mv_count_address_not_confirmed,
    subquery.mv_count_address_error,
    subquery.mv_count_address_awaiting,
    subquery.mv_count_relation,
    subquery.mv_count_relation_confirmed,
    subquery.mv_count_relation_not_confirmed,
    subquery.mv_count_relation_error,
    subquery.mv_count_relation_awaiting,
    subquery.mv_count_cert,
    subquery.mv_count_cert_confirmed,
    subquery.mv_count_cert_not_confirmed,
    subquery.mv_count_cert_error,
    subquery.mv_count_cert_awaiting,
    subquery.mv_count_rec,
    subquery.mv_count_rec_confirmed,
    subquery.mv_count_rec_not_confirmed,
    subquery.mv_count_rec_error,
    subquery.mv_count_rec_awaiting,
    subquery.count_1060_1,
    subquery.count_1060_2,
    subquery.count_1060_3,
    subquery.count_scan_provided,
    subquery.count_1080,
    subquery.count_1080_1,
    subquery.count_1080_2,
    subquery.count_1080_3,
    subquery.count_1080_4,
    subquery.count_8011_1,
    subquery.count_enrolled_after_visit,
    subquery.count_1077,
    subquery.count_1080_5,
    subquery.count_1090,
    subquery.count_1075,
    subquery.count_1075_decline
   FROM ( SELECT vps.id,
            vps.date,
            vps.education_type,
            vps.unique_sso_count,
            vps.count_1010,
            vps.count_1035,
            vps.count_103099,
            vps.count_1050,
            vps.count_1050_accepted_online,
            vps.count_1050_1,
            vps.count_1050_2,
            vps.count_1050_3,
            vps.count_1050_4,
            vps.count_1050_5,
            vps.count_1060,
            vps.count_1060_1,
            vps.count_1060_2,
            vps.count_1060_3,
            vps.count_1075,
            vps.count_1075_decline,
            vps.count_1075_not_for_non_payment,
            vps.count_1075_base,
            vps.count_1075_add,
            vps.count_1077,
            vps.count_1080,
            vps.count_1080_1,
            vps.count_1080_2,
            vps.count_1080_3,
            vps.count_1080_4,
            vps.count_1080_5,
            vps.count_1090,
            vps.count_1160,
            vps.count_8011,
            vps.count_8011_1,
            vps.count_8021,
            vps.mv_count_pasport,
            vps.mv_count_pasport_confirmed,
            vps.mv_count_pasport_not_confirmed,
            vps.mv_count_pasport_error,
            vps.mv_count_address,
            vps.mv_count_address_confirmed,
            vps.mv_count_address_not_confirmed,
            vps.mv_count_address_error,
            vps.mv_count_relation,
            vps.mv_count_relation_confirmed,
            vps.mv_count_relation_not_confirmed,
            vps.mv_count_relation_error,
            vps.mv_count_cert,
            vps.mv_count_cert_confirmed,
            vps.mv_count_cert_not_confirmed,
            vps.mv_count_cert_error,
            vps.mv_count_rec,
            vps.mv_count_rec_confirmed,
            vps.mv_count_rec_not_confirmed,
            vps.mv_count_rec_error,
            vps.date_create,
            vps.organization_total,
            vps.organization_count,
            vps.group_count,
            vps.without_snils_count,
            vps.waiting_for_sign_count,
            vps.count_free,
            vps.count_paid,
            vps.count_at_work,
            vps.mv_count_pasport_awaiting,
            vps.mv_count_address_awaiting,
            vps.mv_count_relation_awaiting,
            vps.mv_count_cert_awaiting,
            vps.mv_count_rec_awaiting,
            vps.count_scan_provided,
            vps.count_enrolled_after_visit,
            row_number() OVER (PARTITION BY vps.date ORDER BY vps.date_create DESC) AS rn
           FROM esz_prepare_data.v_portal_statistics vps
          WHERE vps.education_type = 1) subquery
  WHERE subquery.rn = 1;

COMMENT ON VIEW esz.v_portal_application_statistics_v3 IS 'Отображение статистики по заявлениям в кружки с портала (версия 3)';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3."date" IS 'Дата подачи заявления';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_free IS 'Бесплатные кружки';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_paid IS 'Платные кружки';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.unique_sso_count IS 'Количество уникальных заявителей';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1010 IS 'заявление подано 1010';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1035 IS 'Отказ в регистрации заявления 1035';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_103099 IS 'Техсбой 103099';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_at_work IS 'В работе';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1050 IS 'Кол-во зарегистрированных заявлений';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1050_1 IS 'Подача обучающимся до 18 лет 1050.1';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1050_2 IS 'Представитель Договор подписан на форме 1050.2';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1050_3 IS 'Представитель Договор направлен в ЛК 1050.3';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1050_4 IS 'Представитель необходимы проверки 1050.4';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1050_5 IS 'Подача обучающимся от 18 лет 1050.5';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_pasport IS 'Ушли на МВ; всего по паспорту (МВД)';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_pasport_confirmed IS 'Паспорт подтвержден';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_pasport_not_confirmed IS 'Паспорт не подтвержден';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_pasport_error IS 'Паспорт ошибки';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_pasport_awaiting IS 'Паспорт ожидание подтверждения';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_address IS 'Ушли на МВ; всего по адресу (МВД)';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_address_confirmed IS 'Адрес подтвержден';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_address_not_confirmed IS 'Адрес не подтвержден';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_address_error IS 'Адрес ошибки';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_address_awaiting IS 'Адрес ожидание подтверждения';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_relation IS 'Ушли на МВ; родство (ФНС;СФР)';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_relation_confirmed IS 'Родство подтверждено';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_relation_not_confirmed IS 'Родство не подтверждено';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_relation_error IS 'Родство ошибки';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_relation_awaiting IS 'Родство ожидание подтверждения';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_cert IS 'Ушло на МВ, всего по СОР (ФНС)';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_cert_confirmed IS 'СОР подтвержден';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_cert_not_confirmed IS 'СОР не подтвержден';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_cert_error IS 'СОР ошибки';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_cert_awaiting IS 'СОР ожидание подтверждения';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_rec IS 'Ушло на МВ, всего по АЗ (ФНС)';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_rec_confirmed IS 'АЗ подтверждена';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_rec_not_confirmed IS 'АЗ не подтверждена';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_rec_error IS 'АЗ ошибки';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.mv_count_rec_awaiting IS 'АЗ ожидание подтверждения';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1060_1 IS 'Ожидание представителя в ОО для подписания договора 1060.1';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1060_2 IS 'Ожидание подписания договора в ЛК 1060.2';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1060_3 IS 'Ожидание предоставления скан-копий 1060.3';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_scan_provided IS 'Представлены скан-копии документов';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1080 IS 'ВСЕГО Отказ в предоставлении услуги до предложения места';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1080_1 IS 'Аннулирование заявления в связи с неподписанием договора в электронном виде 1080.1';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1080_2 IS 'Неявка заявителя в ОО для подписания договора на бумажном носителе 1080.2';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1080_3 IS 'Заявление аннулировано по причине недостоверности сведений 1080.3';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1080_4 IS 'Не прикреплены скан-копии необходимых документов 1080.4';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_8011_1 IS 'Договор подписан со стороны заявителя 8011.1';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_enrolled_after_visit IS 'Поданы документы при личном визите (после статуса 1060.1)';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1077 IS 'Место закреплено 1077';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1080_5 IS 'Необходимое минимальное количество обучающихся в группе не набрано 1080.5';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1090 IS 'заявление отозвано 1090';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1075 IS 'Услуга оказана. Договор подписан со стороны ОО 1075';
COMMENT ON COLUMN esz.v_portal_application_statistics_v3.count_1075_decline IS 'Кол-во отчисленных (в связи с неоплатой или отсутствием посещений)';


-- esz.v_portal_gpd_statistics source

CREATE OR REPLACE VIEW esz.v_portal_gpd_statistics
AS WITH requests_counts AS (
         SELECT r.date_create::date AS date,
            count(DISTINCT r.sso_id) AS unique_sso_count
           FROM esz.request r
          WHERE r.flag_last AND r.external_uid::text ~~ '%111800%'::text AND r.date_create > '2024-06-01 00:00:00'::timestamp without time zone
          GROUP BY (r.date_create::date)
        ), messages_counts AS (
         SELECT m.date_create::date AS date,
            sum(
                CASE
                    WHEN s_1.queue_name::text = 'GPD.APPLICATION_INC'::text THEN 1
                    ELSE 0
                END) AS count_1010,
            sum(
                CASE
                    WHEN md.content ~~ '\x25537461747573436f64653e3130333039393c2f25'::bytea THEN 1
                    ELSE 0
                END) AS count_103099,
            sum(
                CASE
                    WHEN md.content ~~ '\x25537461747573436f64653e313035303c2f25'::bytea THEN 1
                    ELSE 0
                END) AS count_1050,
            sum(
                CASE
                    WHEN md.content ~~ '\x25537461747573436f64653e383032313c2f25'::bytea THEN 1
                    ELSE 0
                END) AS count_8021,
            sum(
                CASE
                    WHEN md.content ~~ '\x25537461747573436f64653e383031313c2f25'::bytea THEN 1
                    ELSE 0
                END) AS count_8011,
            sum(
                CASE
                    WHEN md.content ~~ '\x25537461747573436f64653e313136303c2f25'::bytea THEN 1
                    ELSE 0
                END) AS count_1160,
            sum(
                CASE
                    WHEN md.content ~~ '\x25537461747573436f64653e313039303c2f25'::bytea THEN 1
                    ELSE 0
                END) AS count_1090,
            sum(
                CASE
                    WHEN md.content ~~ '\x25537461747573436f64653e313038303c2f25'::bytea THEN 1
                    ELSE 0
                END) AS count_1080,
            sum(
                CASE
                    WHEN md.content ~~ '\x25537461747573436f64653e313037373c2f25'::bytea THEN 1
                    ELSE 0
                END) AS count_1077,
            sum(
                CASE
                    WHEN md.content ~~ '\x25537461747573436f64653e313037353c2f25'::bytea THEN 1
                    ELSE 0
                END) AS count_1075,
            sum(
                CASE
                    WHEN md.content ~~ '\x25537461747573436f64653e313037353c2f25'::bytea AND mr.mega_relation_status_id = 2 THEN 1
                    ELSE 0
                END) AS count_1075_decline,
            sum(
                CASE
                    WHEN md.content ~~ '\x25537461747573436f64653e313037353c2f25'::bytea AND mr.mega_relation_status_id = 2 AND mrh.exclude_reason_id = 28 THEN 1
                    ELSE 0
                END) AS count_1075_not_for_non_payment
           FROM esz_ext_logging.messages m
             JOIN esz_ext_logging.systems s_1 ON m.system_id = s_1.id AND (s_1.queue_name::text = ANY (ARRAY['GPD.STATUS_OUT'::character varying, 'GPD.APPLICATION_INC'::character varying, 'GPD.STATUS_INC'::character varying]::text[]))
             JOIN esz_ext_logging.message_data md ON md.message_id = m.id
             LEFT JOIN esz.request r ON r.external_uid::text = m.ext_message_id::text
             LEFT JOIN esz.mega_relation mr ON mr.request_id = r.id AND mr.next_mega_relation_id IS NULL
             LEFT JOIN esz.mega_relation_history mrh ON mrh.mega_relation_id = mr.id
          WHERE m.date_create > '2024-06-01 00:00:00'::timestamp without time zone
          GROUP BY (m.date_create::date)
        )
 SELECT COALESCE(u.date, s.date) AS date,
    COALESCE(u.unique_sso_count, 0::bigint) AS unique_sso_count,
    COALESCE(s.count_1010, 0::bigint) AS count_1010,
    COALESCE(s.count_103099, 0::bigint) AS count_103099,
    COALESCE(s.count_1050, 0::bigint) AS count_1050,
    COALESCE(s.count_8021, 0::bigint) AS count_8021,
    COALESCE(s.count_8011, 0::bigint) AS count_8011,
    COALESCE(s.count_1080, 0::bigint) AS count_1160,
    COALESCE(s.count_1090, 0::bigint) AS count_1090,
    COALESCE(s.count_1080, 0::bigint) AS count_1080,
    COALESCE(s.count_1077, 0::bigint) AS count_1077,
    COALESCE(s.count_1075, 0::bigint) AS count_1075,
    COALESCE(s.count_1075_decline, 0::bigint) AS count_1075_decline,
    COALESCE(s.count_1075_not_for_non_payment, 0::bigint) AS count_1075_not_for_non_payment
   FROM requests_counts u
     FULL JOIN messages_counts s ON u.date = s.date
  ORDER BY (COALESCE(u.date, s.date));

COMMENT ON VIEW esz.v_portal_gpd_statistics IS 'Отображение статистики по заявлениям в группы продленного дня поданным с портала';
COMMENT ON COLUMN esz.v_portal_gpd_statistics."date" IS 'Дата подачи заявления';
COMMENT ON COLUMN esz.v_portal_gpd_statistics.unique_sso_count IS 'Количество уникальных заявителей';
COMMENT ON COLUMN esz.v_portal_gpd_statistics.count_1010 IS 'заявление подано 1010';
COMMENT ON COLUMN esz.v_portal_gpd_statistics.count_103099 IS 'Техсбой 103099';
COMMENT ON COLUMN esz.v_portal_gpd_statistics.count_1050 IS 'Кол-во зарегистрированных заявлений 1050 (1060)';
COMMENT ON COLUMN esz.v_portal_gpd_statistics.count_8021 IS 'Необходимо подписание документов 8021';
COMMENT ON COLUMN esz.v_portal_gpd_statistics.count_8011 IS 'Договор подписан заявителем 8011';
COMMENT ON COLUMN esz.v_portal_gpd_statistics.count_1160 IS 'Возобновлено 1160';
COMMENT ON COLUMN esz.v_portal_gpd_statistics.count_1090 IS 'заявление отозвано 1090';
COMMENT ON COLUMN esz.v_portal_gpd_statistics.count_1080 IS 'Аннулирование заявления в связи с неподписанием договора 1080';
COMMENT ON COLUMN esz.v_portal_gpd_statistics.count_1077 IS 'Услуга оказана. Договор подписан со стороны заявителя 1077';
COMMENT ON COLUMN esz.v_portal_gpd_statistics.count_1075 IS 'Услуга оказана. Договор подписан со стороны ОО 1075';
COMMENT ON COLUMN esz.v_portal_gpd_statistics.count_1075_decline IS 'Отчисление';
COMMENT ON COLUMN esz.v_portal_gpd_statistics.count_1075_not_for_non_payment IS 'Кол-во отчисленных в связи с неоплатой';


-- esz.v_portal_gpd_statistics_v2 source

CREATE OR REPLACE VIEW esz.v_portal_gpd_statistics_v2
AS SELECT subquery.date,
    subquery.unique_sso_count,
    subquery.count_1010,
    subquery.count_103099,
    subquery.count_1050,
    subquery.count_1050_accepted_online,
    subquery.count_1060,
    subquery.count_8021,
    subquery.count_8011,
    subquery.count_1160,
    subquery.count_1090,
    subquery.count_1080,
    subquery.count_1077,
    subquery.count_1075,
    subquery.count_1075_decline,
    subquery.count_1075_not_for_non_payment
   FROM ( SELECT vps.id,
            vps.date,
            vps.education_type,
            vps.unique_sso_count,
            vps.count_1010,
            vps.count_1035,
            vps.count_103099,
            vps.count_1050,
            vps.count_1050_accepted_online,
            vps.count_1050_1,
            vps.count_1050_2,
            vps.count_1050_3,
            vps.count_1050_4,
            vps.count_1050_5,
            vps.count_1060,
            vps.count_1060_1,
            vps.count_1060_2,
            vps.count_1060_3,
            vps.count_1075,
            vps.count_1075_decline,
            vps.count_1075_not_for_non_payment,
            vps.count_1075_base,
            vps.count_1075_add,
            vps.count_1077,
            vps.count_1080,
            vps.count_1080_1,
            vps.count_1080_2,
            vps.count_1080_3,
            vps.count_1080_4,
            vps.count_1080_5,
            vps.count_1090,
            vps.count_1160,
            vps.count_8011,
            vps.count_8011_1,
            vps.count_8021,
            vps.mv_count_pasport,
            vps.mv_count_pasport_confirmed,
            vps.mv_count_pasport_not_confirmed,
            vps.mv_count_pasport_error,
            vps.mv_count_address,
            vps.mv_count_address_confirmed,
            vps.mv_count_address_not_confirmed,
            vps.mv_count_address_error,
            vps.mv_count_relation,
            vps.mv_count_relation_confirmed,
            vps.mv_count_relation_not_confirmed,
            vps.mv_count_relation_error,
            vps.mv_count_cert,
            vps.mv_count_cert_confirmed,
            vps.mv_count_cert_not_confirmed,
            vps.mv_count_cert_error,
            vps.mv_count_rec,
            vps.mv_count_rec_confirmed,
            vps.mv_count_rec_not_confirmed,
            vps.mv_count_rec_error,
            vps.date_create,
            row_number() OVER (PARTITION BY vps.date ORDER BY vps.date_create DESC) AS rn
           FROM esz_prepare_data.v_portal_statistics vps
          WHERE vps.education_type = 8) subquery
  WHERE subquery.rn = 1;

COMMENT ON VIEW esz.v_portal_gpd_statistics_v2 IS 'Отображение статистики по заявлениям в группы продленного дня поданным с портала (версия 2)';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v2."date" IS 'Дата подачи заявления';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v2.unique_sso_count IS 'Количество уникальных заявителей';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v2.count_1010 IS 'заявление подано 1010';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v2.count_103099 IS 'Техсбой 103099';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v2.count_1050 IS 'Кол-во зарегистрированных заявлений 1050';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v2.count_1050_accepted_online IS 'Подписан договор онлайн';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v2.count_1060 IS 'Направлен статус 1060';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v2.count_8021 IS 'Необходимо подписание документов 8021';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v2.count_8011 IS 'Договор подписан заявителем 8011';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v2.count_1160 IS 'Возобновлено 1160';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v2.count_1090 IS 'заявление отозвано 1090';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v2.count_1080 IS 'Аннулирование заявления в связи с неподписанием договора 1080';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v2.count_1077 IS 'Услуга оказана. Договор подписан со стороны заявителя 1077';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v2.count_1075 IS 'Услуга оказана. Договор подписан со стороны ОО 1075';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v2.count_1075_decline IS 'Отчисление';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v2.count_1075_not_for_non_payment IS 'Кол-во отчисленных в связи с неоплатой';


-- esz.v_portal_gpd_statistics_v3 source

CREATE OR REPLACE VIEW esz.v_portal_gpd_statistics_v3
AS SELECT subquery.date,
    COALESCE(subquery.organization_total, 0) AS organization_total,
    COALESCE(subquery.organization_count, 0) AS organization_count,
    COALESCE(subquery.group_count, 0) AS group_count,
    subquery.unique_sso_count,
    subquery.count_1010,
    subquery.count_103099,
    COALESCE(subquery.without_snils_count, 0) AS without_snils_count,
    subquery.count_1050,
    subquery.count_1050_accepted_online,
    subquery.count_1060,
    subquery.count_8021,
    subquery.count_8011,
    subquery.count_1160,
    subquery.count_1090,
    subquery.count_1080,
    COALESCE(subquery.waiting_for_sign_count, 0) AS waiting_for_sign_count,
    subquery.count_1077,
    subquery.count_1075,
    subquery.count_1075_decline,
    subquery.count_1075_not_for_non_payment
   FROM ( SELECT vps.id,
            vps.date,
            vps.education_type,
            vps.unique_sso_count,
            vps.count_1010,
            vps.count_1035,
            vps.count_103099,
            vps.count_1050,
            vps.count_1050_accepted_online,
            vps.count_1050_1,
            vps.count_1050_2,
            vps.count_1050_3,
            vps.count_1050_4,
            vps.count_1050_5,
            vps.count_1060,
            vps.count_1060_1,
            vps.count_1060_2,
            vps.count_1060_3,
            vps.count_1075,
            vps.count_1075_decline,
            vps.count_1075_not_for_non_payment,
            vps.count_1075_base,
            vps.count_1075_add,
            vps.count_1077,
            vps.count_1080,
            vps.count_1080_1,
            vps.count_1080_2,
            vps.count_1080_3,
            vps.count_1080_4,
            vps.count_1080_5,
            vps.count_1090,
            vps.count_1160,
            vps.count_8011,
            vps.count_8011_1,
            vps.count_8021,
            vps.mv_count_pasport,
            vps.mv_count_pasport_confirmed,
            vps.mv_count_pasport_not_confirmed,
            vps.mv_count_pasport_error,
            vps.mv_count_address,
            vps.mv_count_address_confirmed,
            vps.mv_count_address_not_confirmed,
            vps.mv_count_address_error,
            vps.mv_count_relation,
            vps.mv_count_relation_confirmed,
            vps.mv_count_relation_not_confirmed,
            vps.mv_count_relation_error,
            vps.mv_count_cert,
            vps.mv_count_cert_confirmed,
            vps.mv_count_cert_not_confirmed,
            vps.mv_count_cert_error,
            vps.mv_count_rec,
            vps.mv_count_rec_confirmed,
            vps.mv_count_rec_not_confirmed,
            vps.mv_count_rec_error,
            vps.date_create,
            vps.organization_total,
            vps.organization_count,
            vps.group_count,
            vps.without_snils_count,
            vps.waiting_for_sign_count,
            row_number() OVER (PARTITION BY vps.date ORDER BY vps.date_create DESC) AS rn
           FROM esz_prepare_data.v_portal_statistics vps
          WHERE vps.education_type = 8) subquery
  WHERE subquery.rn = 1;

COMMENT ON VIEW esz.v_portal_gpd_statistics_v3 IS 'Отображение статистики по заявлениям в группы продленного дня поданным с портала (версия 2)';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3."date" IS 'Дата подачи заявления';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.organization_total IS 'Всего школ';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.organization_count IS 'Всего школ с открытыми группами ГПД';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.group_count IS 'Кол-во открытых групп ГПД';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.unique_sso_count IS 'Количество уникальных заявителей';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.count_1010 IS 'заявление подано 1010';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.count_103099 IS 'Техсбой 103099';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.without_snils_count IS 'Требуется предоставление СНИЛС';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.count_1050 IS 'Кол-во зарегистрированных заявлений 1050';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.count_1050_accepted_online IS 'Подписан договор онлайн';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.count_1060 IS 'Направлен статус 1060';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.count_8021 IS 'Необходимо подписание документов 8021';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.count_8011 IS 'Договор подписан заявителем 8011';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.count_1160 IS 'Возобновлено 1160';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.count_1090 IS 'заявление отозвано 1090';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.count_1080 IS 'Аннулирование заявления в связи с неподписанием договора 1080';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.waiting_for_sign_count IS 'Ожидается подписание договора на стороне ОО';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.count_1077 IS 'Услуга оказана. Договор подписан со стороны заявителя 1077';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.count_1075 IS 'Услуга оказана. Договор подписан со стороны ОО 1075';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.count_1075_decline IS 'Отчисление';
COMMENT ON COLUMN esz.v_portal_gpd_statistics_v3.count_1075_not_for_non_payment IS 'Кол-во отчисленных в связи с неоплатой';


-- esz.v_portal_proff_statistics source

CREATE OR REPLACE VIEW esz.v_portal_proff_statistics
AS SELECT subquery.date,
    subquery.unique_sso_count,
    subquery.count_1010,
    subquery.count_1035,
    subquery.count_103099,
    subquery.count_1050_1,
    subquery.count_1060,
    subquery.count_1160,
    subquery.count_1090,
    subquery.count_1080,
    subquery.count_1050_2,
    subquery.count_1075,
    subquery.count_1075_base,
    subquery.count_1075_add
   FROM ( SELECT vps.id,
            vps.date,
            vps.education_type,
            vps.unique_sso_count,
            vps.count_1010,
            vps.count_1035,
            vps.count_103099,
            vps.count_1050,
            vps.count_1050_accepted_online,
            vps.count_1050_1,
            vps.count_1050_2,
            vps.count_1050_3,
            vps.count_1050_4,
            vps.count_1050_5,
            vps.count_1060,
            vps.count_1060_1,
            vps.count_1060_2,
            vps.count_1060_3,
            vps.count_1075,
            vps.count_1075_decline,
            vps.count_1075_not_for_non_payment,
            vps.count_1075_base,
            vps.count_1075_add,
            vps.count_1077,
            vps.count_1080,
            vps.count_1080_1,
            vps.count_1080_2,
            vps.count_1080_3,
            vps.count_1080_4,
            vps.count_1080_5,
            vps.count_1090,
            vps.count_1160,
            vps.count_8011,
            vps.count_8011_1,
            vps.count_8021,
            vps.mv_count_pasport,
            vps.mv_count_pasport_confirmed,
            vps.mv_count_pasport_not_confirmed,
            vps.mv_count_pasport_error,
            vps.mv_count_address,
            vps.mv_count_address_confirmed,
            vps.mv_count_address_not_confirmed,
            vps.mv_count_address_error,
            vps.mv_count_relation,
            vps.mv_count_relation_confirmed,
            vps.mv_count_relation_not_confirmed,
            vps.mv_count_relation_error,
            vps.mv_count_cert,
            vps.mv_count_cert_confirmed,
            vps.mv_count_cert_not_confirmed,
            vps.mv_count_cert_error,
            vps.mv_count_rec,
            vps.mv_count_rec_confirmed,
            vps.mv_count_rec_not_confirmed,
            vps.mv_count_rec_error,
            vps.date_create,
            row_number() OVER (PARTITION BY vps.date ORDER BY vps.date_create DESC) AS rn
           FROM esz_prepare_data.v_portal_statistics vps
          WHERE vps.education_type = 2) subquery
  WHERE subquery.rn = 1;

COMMENT ON VIEW esz.v_portal_proff_statistics IS 'Отображение статистики по заявлениям в ПОБГ поданным с портала';
COMMENT ON COLUMN esz.v_portal_proff_statistics."date" IS 'Дата подачи заявления';
COMMENT ON COLUMN esz.v_portal_proff_statistics.unique_sso_count IS 'Количество уникальных заявителей';
COMMENT ON COLUMN esz.v_portal_proff_statistics.count_1010 IS 'заявление подано 1010';
COMMENT ON COLUMN esz.v_portal_proff_statistics.count_1035 IS 'Отказ в регистрации заявления 1035';
COMMENT ON COLUMN esz.v_portal_proff_statistics.count_103099 IS 'Техсбой 103099';
COMMENT ON COLUMN esz.v_portal_proff_statistics.count_1050_1 IS 'Кол-во зарегистрированных заявлений в основной период 1050.1';
COMMENT ON COLUMN esz.v_portal_proff_statistics.count_1060 IS ' Приостановлено 1060';
COMMENT ON COLUMN esz.v_portal_proff_statistics.count_1160 IS ' Возобновлено 1160';
COMMENT ON COLUMN esz.v_portal_proff_statistics.count_1090 IS 'Заявление отозвано 1090';
COMMENT ON COLUMN esz.v_portal_proff_statistics.count_1080 IS 'Отказ в оказании услуги. Группа не сформирована 1080';
COMMENT ON COLUMN esz.v_portal_proff_statistics.count_1050_2 IS 'Кол-во зарегистрированных заявлений в дополнительный период 1050.2';
COMMENT ON COLUMN esz.v_portal_proff_statistics.count_1075 IS 'Услуга оказана. Направление уведомления о зачислении Всего 1075';
COMMENT ON COLUMN esz.v_portal_proff_statistics.count_1075_base IS 'Услуга оказана. Направление уведомления о зачислении в основной период 1075';
COMMENT ON COLUMN esz.v_portal_proff_statistics.count_1075_add IS 'Услуга оказана. Направление уведомления о зачислении в дополнительный период 1075';



-- DROP FUNCTION esz.bt_index_check(regclass);

CREATE OR REPLACE FUNCTION esz.bt_index_check(index regclass)
 RETURNS void
 LANGUAGE c
 PARALLEL RESTRICTED STRICT
AS '$libdir/amcheck', $function$bt_index_check$function$
;

-- DROP FUNCTION esz.bt_index_check(regclass, bool);

CREATE OR REPLACE FUNCTION esz.bt_index_check(index regclass, heapallindexed boolean)
 RETURNS void
 LANGUAGE c
 PARALLEL RESTRICTED STRICT
AS '$libdir/amcheck', $function$bt_index_check$function$
;

-- DROP FUNCTION esz.bt_index_parent_check(regclass);

CREATE OR REPLACE FUNCTION esz.bt_index_parent_check(index regclass)
 RETURNS void
 LANGUAGE c
 PARALLEL RESTRICTED STRICT
AS '$libdir/amcheck', $function$bt_index_parent_check$function$
;

-- DROP FUNCTION esz.bt_index_parent_check(regclass, bool);

CREATE OR REPLACE FUNCTION esz.bt_index_parent_check(index regclass, heapallindexed boolean)
 RETURNS void
 LANGUAGE c
 PARALLEL RESTRICTED STRICT
AS '$libdir/amcheck', $function$bt_index_parent_check$function$
;

-- DROP FUNCTION esz.bt_index_parent_check(regclass, bool, bool);

CREATE OR REPLACE FUNCTION esz.bt_index_parent_check(index regclass, heapallindexed boolean, rootdescend boolean)
 RETURNS void
 LANGUAGE c
 PARALLEL RESTRICTED STRICT
AS '$libdir/amcheck', $function$bt_index_parent_check$function$
;

-- DROP FUNCTION esz.cancel_service_publication_rbndo();

CREATE OR REPLACE FUNCTION esz.cancel_service_publication_rbndo()
 RETURNS TABLE(sessionid uuid, datecreate timestamp without time zone, processedservices bigint, processedrequests bigint, message text)
 LANGUAGE plpgsql
AS $function$
DECLARE 
	ts timestamp(0);
  session_uid uuid;
BEGIN
  ts := NOW();
  session_uid := gen_random_uuid();

--  START TRANSACTION;

    INSERT INTO cancel_service_history
      SELECT
        session_uid,
        ts date_create,
        ucs.id,
        ucs.service_status_id
      FROM union_catalog_services ucs
        LEFT JOIN classificator_eku ce
          ON ce.id = ucs.classificator_eku_id
      WHERE ucs.organization_id IN (SELECT DISTINCT
          c.organization_id
        FROM classificator_to_organization_rel c
        WHERE c.is_archive = FALSE
        AND ts >= c.doc_start
        AND ts <= c.doc_end)
      AND ucs.is_archive = FALSE
      AND ucs.service_status_id != 3
      AND ce.education_type_id = 2
      AND ucs.classificator_eku_id NOT IN (SELECT DISTINCT
          c.classificator_eku_id
        FROM classificator_to_organization_rel c
        WHERE c.is_archive = FALSE
        AND ts >= c.doc_start
        AND ts <= c.doc_end
        AND c.organization_id = ucs.organization_id)
      GROUP BY ucs.id;

    INSERT INTO cancel_request_history
      SELECT
        session_uid,
        ts date_create,
        r.id,
        r.request_status_id,
        r.request_decline_reason_id,
        r.enrollment_decline_comment,
        r.booking_guid
      FROM cancel_service_history h
        INNER JOIN request r
          ON r.union_catalog_services_id = h.union_catalog_services_id
      WHERE h.session_id = session_uid
      AND r.is_archive = FALSE
      AND r.flag_last = TRUE
      AND r.request_status_id NOT IN (5, 6, 7, 9, 12)
      GROUP BY r.id;



    UPDATE union_catalog_services ucs
		SET service_status_id = 1,
        date_change = ts,
        need_reindex = 3
    FROM cancel_service_history h
    WHERE ucs.id = h.union_catalog_services_id
			AND h.date_create = ts
			AND ucs.service_status_id != 1;


    UPDATE request r
		SET request_status_id = 7,
        request_decline_reason_id = 9,
        enrollment_decline_comment = 'Зачисление на данное направление более не производится',
        date_change = ts,
        need_reindex = 3
    FROM cancel_request_history h
    WHERE r.id = h.request_id
			AND h.session_id = session_uid;

    UPDATE esz.esz_booking.booking b
		SET volume = 0
    FROM cancel_request_history h
    WHERE b.id = h.booking_guid
     AND h.session_id = session_uid;

--  COMMIT;

  RETURN QUERY
  SELECT
    session_uid SessionId,
    ts DateCreate,
    (SELECT
        COUNT(*)
      FROM cancel_service_history s
      WHERE s.session_id = session_uid
      AND service_status_id != 1
      GROUP BY s.session_id,
               s.date_create) ProcessedServices,
    (SELECT
        COUNT(*)
      FROM cancel_request_history r
      WHERE r.session_id = session_uid
      GROUP BY r.session_id,
               r.date_create) ProcessedRequests,
    'Успешно' Message;

END
$function$
;

-- DROP PROCEDURE esz.cancel_service_publication_rbndo_clear_history();

CREATE OR REPLACE PROCEDURE esz.cancel_service_publication_rbndo_clear_history()
 LANGUAGE plpgsql
AS $procedure$
BEGIN

--  START TRANSACTION;

    DELETE
      FROM cancel_service_history
		WHERE date_create < NOW() - INTERVAL '6' MONTH;
    DELETE
      FROM cancel_request_history
		WHERE date_create < NOW() - INTERVAL '6' MONTH;

 -- COMMIT;

END
$procedure$
;

COMMENT ON PROCEDURE esz.cancel_service_publication_rbndo_clear_history() IS 'Процедура, выполняющая очистку истории снятия услуг с публикации для ограничения РБНДО';

-- DROP FUNCTION esz.cancel_service_publication_rbndo_history();

CREATE OR REPLACE FUNCTION esz.cancel_service_publication_rbndo_history()
 RETURNS TABLE(sessionid uuid, datecreate timestamp without time zone, processedservices bigint, processedrequests bigint, message text)
 LANGUAGE plpgsql
AS $function$
BEGIN
  RETURN QUERY
	SELECT
    h.session_id SessionId,
    MIN(h.date_create) DateCreate,
    (SELECT
        COUNT(*)
      FROM cancel_service_history s
      WHERE s.session_id = h.session_id
      AND service_status_id != 1
      GROUP BY s.session_id,
               s.date_create) ProcessedServices,
    (SELECT
        COUNT(*)
      FROM cancel_request_history r
      WHERE r.session_id = h.session_id
      GROUP BY r.session_id,
               r.date_create) ProcessedRequests,
    '' Message
  FROM cancel_service_history h
  GROUP BY h.session_id
  ORDER BY MIN(h.date_create) DESC;
END
$function$
;

COMMENT ON FUNCTION esz.cancel_service_publication_rbndo_history() IS 'Процедура, отображающая историю снятий услуг с публикации для ограничения РБНДО';

-- DROP FUNCTION esz.fn_depersonalize_date(timestamp);

CREATE OR REPLACE FUNCTION esz.fn_depersonalize_date(p_date timestamp without time zone)
 RETURNS timestamp without time zone
 LANGUAGE plpgsql
AS $function$
DECLARE
	m_Result timestamp(0);
	m_days_interval int;	
BEGIN
	IF (p_Date IS NOT NULL) THEN
		m_days_interval := FLOOR(random()*355) + 1;
		m_Result := make_timestamp (2023, 1, 1, date_part('hour', p_Date)::int, date_part('minute', p_Date)::int, date_part('seconds', p_Date)::int);
		m_Result := m_Result + (m_days_interval || ' day')::interval;
  END IF;	
	RETURN m_Result;
END;
$function$
;

-- DROP FUNCTION esz.fn_depersonalize_name(varchar);

CREATE OR REPLACE FUNCTION esz.fn_depersonalize_name(p_name character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
DECLARE
	m_Alphabet varchar DEFAULT 'АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ';
	m_AlphabetLength int DEFAULT 33;
	m_Result	varchar;	
	m_NameLength int;	
	m_rand int;
BEGIN
	m_NameLength := CHAR_LENGTH(p_Name);
	IF(m_NameLength = 1) THEN
	  m_rand := FLOOR(random() * m_AlphabetLength) + 1;
		m_Result := SUBSTRING(m_Alphabet, m_rand, 1);
	END IF;
	IF(m_NameLength = 2) THEN	  
		m_Result = CONCAT(SUBSTRING(p_Name, 1, 1), '-');
	END IF;
	IF(m_NameLength > 2) THEN	  
		m_Result = CONCAT(SUBSTRING(p_Name, 1, 1), REPEAT('-', m_NameLength - 2) , SUBSTRING(p_Name, m_NameLength, 1));
	END IF;
	RETURN m_Result;
END;
$function$
;

-- DROP FUNCTION esz.fn_depersonalize_numbers(varchar);

CREATE OR REPLACE FUNCTION esz.fn_depersonalize_numbers(p_numberstext character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
DECLARE
	m_Alphabet varchar DEFAULT '0123456789';
	m_AlphabetLength int DEFAULT 10;
	m_Result	varchar;
	m_MidText varchar;
	m_NameLength int;
	m_Position int DEFAULT 1;
	m_rand int;
BEGIN
	IF(p_NumbersText IS NOT NULL) THEN
		m_NameLength :=  CHAR_LENGTH(p_NumbersText);
		m_Result := '';
		
		WHILE m_Position <= m_NameLength LOOP
			m_MidText := SUBSTRING(p_NumbersText, m_Position, 1);
			IF(strpos(m_Alphabet, m_MidText) > 0) THEN
				 m_rand := FLOOR(random() * m_AlphabetLength) + 1;
				 m_Result := CONCAT(m_Result, substring(m_Alphabet  from m_rand for 1));
			ELSE
				 m_Result := CONCAT(m_Result, m_MidText);
			END IF;
			m_Position := m_Position + 1;
		end loop;	
	END IF;
	RETURN m_Result;
END;
$function$
;

-- DROP FUNCTION esz.fn_get_hash64(varchar);

CREATE OR REPLACE FUNCTION esz.fn_get_hash64(str character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
DECLARE
	sha varchar;
	sha_p1 varchar;
	sha_p2 varchar;
	sha_p3 varchar;	
BEGIN
	sha := encode(sha256(str::bytea), 'hex');
	sha_p1 := substr(sha, 1, 16);
	sha_p2 := substr(sha, 17, 16);
	sha_p3 := substr(sha, 33, 40);
	RETURN ('x'||sha_p1)::bit(64)::bigint # ('x'||sha_p2)::bit(64)::bigint # ('x'||sha_p3)::bit(64)::bigint;
END;
$function$
;

-- DROP FUNCTION esz.get_date_including_working_days(int4, date);

CREATE OR REPLACE FUNCTION esz.get_date_including_working_days(_workingdayscount integer, _startdate date)
 RETURNS date
 LANGUAGE sql
AS $function$
		with recursive gs as(
				select
					case when _workingDaysCount < 0 then (_startDate + interval '1 day')::date else (_startDate - interval '1 day')::date end as dt,
					false as dt_type,
					0 counter
				union 
					select
					(case when _workingDaysCount < 0 then (dt - interval '1 day') else (dt + interval '1 day') end)::date as dt,
					(extract(DOW from case when _workingDaysCount < 0 then (dt - interval '1 day') else (dt + interval '1 day') end) in (1, 2, 3, 4, 5) AND (COALESCE(wc.is_working, true) = true)) OR (wc.is_working is not null AND wc.is_working = true) as dt_type,
					case when (extract(DOW from (case when _workingDaysCount < 0 then (dt - interval '1 day') else (dt + interval '1 day') end)) in (1, 2, 3, 4, 5) AND (COALESCE(wc.is_working, true) = true)) OR (wc.is_working is not null AND wc.is_working = true) = true then counter + 1 else counter end as counter
					from gs
						left join esz.working_calendar wc on wc.calendar_date = (case when _workingDaysCount < 0 then (dt - interval '1 day') else (dt + interval '1 day') end)
					where gs.counter < @_workingDaysCount
				)
			select gs.dt from gs
			where gs.counter = @_workingDaysCount and gs.dt_type = true;
$function$
;

-- DROP FUNCTION esz.get_ispp_report();

CREATE OR REPLACE FUNCTION esz.get_ispp_report()
 RETURNS TABLE(ucsname character varying, lastname character varying, firstname character varying, middlename character varying, id integer, contingentguid uuid, shortname character varying, inn character varying, unom character varying, dateend text, datelearnstart text, datelearnend text, serviceclassid integer)
 LANGUAGE plpgsql
AS $function$
BEGIN
	RETURN QUERY
  SELECT
    ucs.name UcsName,
    p.last_name LastName,
    p.first_name FirstName,
    p.middle_name MiddleName,
    p.id Id,
    p.contingent_guid ContingentGuid,
    o.short_name ShortName,
    o.inn Inn,
    a2.unom Unom,
    CASE WHEN mr.date_end IS NULL THEN 'null' ELSE to_char(mr.date_end, 'dd.mm.YYYY HH:SS') END AS DateEnd,
    to_char(mr.date_learn_start, 'dd.mm.YYYY HH:SS') AS DateLearnStart,
    to_char(mr.date_learn_end, 'dd.mm.YYYY HH:SS') AS DateLearnEnd,
    mr.service_class_id ServiceClassId

  FROM organization o
    INNER JOIN union_catalog_services ucs
      ON o.id = ucs.organization_id
    INNER JOIN mega_relation mr
      ON mr.union_catalog_services_id = ucs.Id
    INNER JOIN pupil p
      ON p.id = mr.pupil_id
    LEFT JOIN union_catalog_to_place_service_rel uctpsr
      ON ucs.id = uctpsr.union_catalog_services_id
    LEFT JOIN place_service ps
      ON ps.id = uctpsr.place_service_id
    LEFT JOIN address a2
      ON a2.id = ps.address_id
    INNER JOIN mega_relation_status mrs
      ON mrs.id = mr.mega_relation_status_id
  WHERE o.short_name IN ('ГБОУ Школа № 224',
  'ГБОУ Школа № 2098 имени Героя Советского Союза Л.М. Доватора',
  'ГБОУ Школа № 439 "Интеллект"',
  'ГБОУ Школа № 1465',
  'ГБОУ Школа № 1413',
  'ГБОУ Школа № 109',
  'ГБОУ Школа "Содружество"',
  'ГБОУДО ЦДЮТ "Бибирево"',
  'ГБОУ Школа № 1570',
  'ГБОУ Школа № 902 "Диалог"',
  'ГБОУ Школа № 806',
  'ГБОУ Школа № 329',
  'ГБОУ Школа имени Маршала В.И. Чуйкова',
  'ГБОУ Школа № 1420',
  'ГАОУ ДПО ЦПМ',
  'ГБОУ Школа № 285',
  'ГБОУ Школа № 1349',
  'ГБОУ Школа № 1560 "Лидер"',
  'ГБОУ Школа № 2099',
  'ГБОУ Школа № 141',
  'ГБПОУ "Воробьевы горы"',
  'ГБОУ Школа № 1503',
  'ГАОУ ВО МГПУ',
  'ГБОУ Школа № 1028',
  'ГБОУ "Школа на Яузе"',
  'ГБОУ Школа № 1569 "Созвездие"',
  'ГБОУ ДО ДТДМ на Миуссах',
  'ГБОУ Школа № 1557',
  'ГБПОУ МТК',
  'ГБОУ Школа № 1352',
  'ГБОУ Школа № 1412',
  'ГБОУ Школа № 1900',
  'ГБОУ Школа № 1579',
  'ГБОУ Школа № 2054',
  'ГБОУ Школа № 904',
  'ГБОУДО "ДДТ на Таганке"',
  'ГБОУДО ДТДиМ имени А.П.Гайдара',
  'ГБОУДО ЦДТ "Свиблово"',
  'ГАУДО "Домисолька"',
  'ГБПОУ КСТ',
  'ГАОУ ДПО "ТемоЦентр"',
  'ГБОУ Школа № 880',
  'ГБОУ Школа № 1173',
  'ГБОУ Школа № 1945',
  'МАДОУ "Образовательный центр "Успех"',
  'ГБОУ Школа № 293',
  'ГБОУ ДО ДТДМ на Миусах',
  'ГБОУ Школа № 1375',
  'ГБОУ Школа № 1579'
  )
  AND o.is_archive = FALSE
  AND a2.unom IN
  ('5656',
  '16295',
  '2706910',
  '2127724',
  '2109141',
  '2108193',
  '30097',
  '2114138',
  '20717',
  '2123609',
  '2126907',
  '2128815',
  '2128791',
  '2128797',
  '2128811',
  '2101060',
  '2126258',
  '2114017',
  '2402904',
  '2109866',
  '12726',
  '4220',
  '12466',
  '2113177',
  '2124870',
  '2107449',
  '2122328',
  '23352',
  '3801888',
  '2117936',
  '2114138',
  '2106461',
  '2113169',
  '2109316',
  '2109229',
  '2114157',
  '2138743',
  '3806765',
  '2126151',
  '2123547',
  '3800006',
  '2130834',
  '2129799',
  '2306682',
  '2104469',
  '2108951',
  '2109858',
  '3810763',
  '3900013',
  '2107462',
  '2131660',
  '2122874',
  '2900002',
  '4402380',
  '2119096',
  '2125334',
  '2125001',
  '2308771',
  '2117936',
  '3900841',
  '2123089'
  )
  AND (mr.date_end IS NULL
  OR DATE(mr.date_end) > '2023-08-31')
  AND DATE(mr.date_learn_end) > '2023-08-31';
END
$function$
;

-- DROP FUNCTION esz.get_rbndo_root(int4);

CREATE OR REPLACE FUNCTION esz.get_rbndo_root(rbndo_id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
	currId int;
	nextId int;
BEGIN
	currId := rbndo_id;
	nextId := rbndo_id;	
	while nextId is not null loop      
		currId := nextId;
		SELECT parent_id INTO nextId FROM "esz".classificator_eku WHERE id = currId;
	end loop;		    
	RETURN currId;
END;
$function$
;

-- DROP FUNCTION esz.get_tech_support_report_by_org_name(varchar);

CREATE OR REPLACE FUNCTION esz.get_tech_support_report_by_org_name(p_org_short_name character varying)
 RETURNS TABLE(contingentguid uuid, pupilfullname text, orgshortname character varying, orgid integer, ekisorgid character varying, servicename character varying, serviceid integer, buildingunom character varying, address character varying, serviceclassname character varying, serviceclassid integer, level text, duration text, educationform character varying, hoursforweek bigint, sex text, groupfrom integer, groupto integer, teacherfullname text, contactphone character varying, groupcount bigint, groupcode character varying, datelearnstart timestamp without time zone, datelearnend timestamp without time zone, direction character varying, profile character varying, type character varying)
 LANGUAGE plpgsql
AS $function$
BEGIN
RETURN QUERY
  SELECT DISTINCT
    p.contingent_guid ContingentGuid,
    CONCAT(coalesce(CONCAT(p.last_name, ' '), ''), coalesce(CONCAT(p.first_name, ' '), ''), coalesce(p.middle_name, '')) AS PupilFullName,
    org.short_name AS OrgShortName,
    org.id AS OrgId,
    org.external_uid AS EkisOrgId,
    serv.name AS ServiceName,
    serv.id AS ServiceId,
    ad.unom AS BuildingUnom,
    ad.full_address AS Address,
    sc.name AS ServiceClassName,
    sc.id AS ServiceClassId,
    CASE WHEN programm_level_id = 17 THEN 'Вводный' WHEN programm_level_id = 11 THEN 'Ознакомительный' WHEN programm_level_id = 12 THEN 'Базовый' WHEN programm_level_id = 13 THEN 'Углубленный' END AS Level,
    CASE WHEN serv.duration_of_training_months IS NULL THEN CONCAT(serv.duration_of_training::bigint::char, ' ', 'year') ELSE CONCAT(serv.duration_of_training::bigint::char, ' year ',
        serv.duration_of_training_months::bigint::char, ' months ',
        serv.duration_of_training_weeks::bigint::char, ' weeks ',
        serv.duration_of_training_days::bigint::char, ' days ') END AS Duration,
    CASE WHEN serv.service_form_id IS NULL THEN 'Групповая' ELSE sf.name END AS EducationForm,
    CASE WHEN serv.hours_per_week IS NULL THEN 0 ELSE serv.hours_per_week::bigint END AS HoursForWeek,
    CASE WHEN serv.male_present = TRUE AND
        serv.female_present = TRUE THEN 'Смешанная группа' WHEN serv.male_present = TRUE AND
        serv.female_present = FALSE THEN 'Мужской' WHEN serv.male_present = FALSE AND
        serv.female_present = TRUE THEN 'Женский' END AS Sex,
    CASE WHEN serv.alt_start IS NULL THEN serv.alt_female_start ELSE serv.alt_start END AS GroupFrom,
    CASE WHEN serv.alt_end IS NULL THEN serv.alt_female_end ELSE serv.alt_end END AS GroupTo,
    CONCAT(coalesce(CONCAT(teach.last_name, ' '), ''), coalesce(CONCAT(teach.first_name, ' '), ''), coalesce(teach.middle_name, '')) AS TeacherFullName,
    serv.contact_phone AS ContactPhone,
    gr.kol AS GroupCount,
    sc.code AS GroupCode,
    mr.date_learn_start AS DateLearnStart,
    mr.date_learn_end DateLearnEnd,
    ce2.name AS Direction,
    ce1.name AS Profile,
    ce.name AS Type

  FROM esz.mega_relation mr
    LEFT JOIN esz.union_catalog_services serv
      ON serv.id = mr.union_catalog_services_id
    LEFT JOIN esz.organization org
      ON org.id = mr.organization_id
    LEFT JOIN esz.service_form sf
      ON sf.id = serv.service_form_id
    LEFT JOIN esz.type_financing fin
      ON fin.id = serv.type_financing_id
    LEFT JOIN esz.address ad
      ON org.address_id = ad.id
    INNER JOIN esz.service_class sc
      ON sc.id = mr.service_class_id
    LEFT JOIN esz.service_class_teacher_rel teachrel
      ON teachrel.service_class_id = sc.id
    LEFT JOIN esz.teacher teach
      ON teach.id = teachrel.teacher_id
    INNER JOIN esz.pupil p
      ON mr.pupil_id = p.id
    LEFT JOIN esz.classificator_eku ce
      ON ce.id = serv.classificator_eku_id
      AND (ce.is_archive IS NULL
      OR ce.is_archive = FALSE)
    LEFT JOIN esz.classificator_eku ce1
      ON ce.parent_id = ce1.id
      AND (ce1.is_archive IS NULL
      OR ce1.is_archive = FALSE)
    LEFT JOIN esz.classificator_eku ce2
      ON ce1.parent_id = ce2.id
      AND (ce2.is_archive IS NULL
      OR ce2.is_archive = FALSE)
    LEFT JOIN (SELECT
        serv.id,
        COUNT(DISTINCT sc.code) AS kol

      FROM esz.mega_relation mr
        LEFT JOIN esz.union_catalog_services serv
          ON serv.id = mr.union_catalog_services_id
        LEFT JOIN esz.organization org
          ON org.id = mr.organization_id
        INNER JOIN esz.service_class sc
          ON sc.id = mr.service_class_id
        INNER JOIN esz.pupil p
          ON mr.pupil_id = p.id



      WHERE serv.type_union_catalog_services_id = 2
      AND mr.mega_relation_status_id <> 3
      AND mr.date_create < CURRENT_DATE
      AND mr.date_end IS NULL
      AND mr.date_learn_start <= CURRENT_DATE
      AND mr.date_learn_end > CURRENT_DATE
      AND p.contingent_guid IS NOT NULL
      GROUP BY serv.id) AS gr
      ON gr.id = serv.id


  WHERE serv.type_union_catalog_services_id = 2
  AND mr.mega_relation_status_id <> 3
  AND serv.service_status_id <> 3
  AND mr.date_create < CURRENT_DATE
  AND mr.date_end IS NULL
  AND mr.date_learn_start <= CURRENT_DATE
  AND mr.date_learn_end > CURRENT_DATE
  AND p.contingent_guid IS NOT NULL
  AND org.short_name LIKE CONCAT('%', p_org_short_name, '%')
  AND p.id BETWEEN 2400000 AND 3200000
  ORDER BY PupilFullName, serv.name;

END
$function$
;

-- DROP FUNCTION esz.insert_current_timestamp();

CREATE OR REPLACE FUNCTION esz.insert_current_timestamp()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
  BEGIN
   new.date_change := now();
   return new;
  END;
 $function$
;

-- DROP PROCEDURE esz.last_sign_date_to_mesh_notification();

CREATE OR REPLACE PROCEDURE esz.last_sign_date_to_mesh_notification()
 LANGUAGE plpgsql
AS $procedure$
BEGIN
-- 
insert into esz.esz.queue (queue_type_id, entity_id, service_number)
select 1701, r.id, '11'
from esz.esz.request r
	join esz.contract c on c.request_id = r.id and c.is_archive = false
	join esz.esz.union_catalog_services ucs on ucs.id = r.union_catalog_services_id and ucs.is_archive = false
	join esz.esz.classificator_eku ce on ce.id = ucs.classificator_eku_id and ce.is_archive = false
	left join esz.esz.queue q on q.entity_id = r.id and q.queue_type_id = 1701 and q.service_number = '11'
where r.is_archive = false and r.flag_last = true and q.id is null
	and ce.education_type_id = 1 -- тип образования ДО ДОНМ
	and r.request_source_id in (5, 6) -- источник заявления "МП.Семья" ИЛИ "ВЕБ.Семья"
	and r.request_status_id in (16) -- Ожидание подписания электронного договора
	and c.contract_status_date::date = (select esz.get_date_including_working_days(-9, now()::date)) -- дата изменения статуса договора более 9 рабочих дней
;

END
$procedure$
;

-- DROP FUNCTION esz.mysql_fdw_handler();

CREATE OR REPLACE FUNCTION esz.mysql_fdw_handler()
 RETURNS fdw_handler
 LANGUAGE c
 STRICT
AS '$libdir/mysql_fdw', $function$mysql_fdw_handler$function$
;

-- DROP FUNCTION esz.mysql_fdw_validator(_text, oid);

CREATE OR REPLACE FUNCTION esz.mysql_fdw_validator(text[], oid)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/mysql_fdw', $function$mysql_fdw_validator$function$
;

-- DROP FUNCTION esz.mysql_fdw_version();

CREATE OR REPLACE FUNCTION esz.mysql_fdw_version()
 RETURNS integer
 LANGUAGE c
 STRICT
AS '$libdir/mysql_fdw', $function$mysql_fdw_version$function$
;

-- DROP FUNCTION esz.programm_level_insert_update_trigger_fnc();

CREATE OR REPLACE FUNCTION esz.programm_level_insert_update_trigger_fnc()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
 INSERT INTO "esz"."esz".queue ( entity_id, queue_type_id, create_date)
VALUES(NEW.id, 1804, NOW());
RETURN NEW;
END;
$function$
;

-- DROP FUNCTION esz.queue_enqueue_unique(int4, int4);

CREATE OR REPLACE FUNCTION esz.queue_enqueue_unique(_queuetype integer, _entityid integer)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
	begin
		if not exists (
			select * from esz.queue q 
				where q.queue_type_id = _queueType and q.entity_id = _entityId and q.sent_date is null
				limit 1
			) then
			insert into esz.queue(queue_type_id, entity_id) values(_queueType, _entityId);
			return true;
		end if;
		return false;
	end
$function$
;

-- DROP PROCEDURE esz.resend_message_to_mesh_notification();

CREATE OR REPLACE PROCEDURE esz.resend_message_to_mesh_notification()
 LANGUAGE plpgsql
AS $procedure$
BEGIN
-- 
insert into esz.esz.queue (queue_type_id, entity_id, service_number)
select 1701, r.id, case when r.request_status_id = 4 then '22' when r.request_status_id = 16 then '24' end
from esz.esz.request r
	join esz.esz.union_catalog_services ucs on ucs.id = r.union_catalog_services_id and ucs.is_archive = false
	join esz.esz.classificator_eku ce on ce.id = ucs.classificator_eku_id and ce.is_archive = false
	left join esz.esz.queue q on q.entity_id = r.id and q.queue_type_id = 1701 
		and q.service_number = case when r.request_status_id = 4 then '22' when r.request_status_id = 16 then '24' end
where r.is_archive = false and r.flag_last = true
	and ce.education_type_id = 1 -- тип образования ДО ДОНМ
	and r.request_source_id in (5, 6) -- источник заявления "МП.Семья" ИЛИ "ВЕБ.Семья"
	and r.status_change_date < (now() - interval '4 day') -- дата изменения более 4х суток
	and r.request_status_id in (4, 16) -- Ожидание прихода Заявителя для заключения договора, Ожидание подписания электронного договора
group by r.id, q.service_number
having count(q.id) < 4
;

END
$procedure$
;

-- DROP FUNCTION esz.restore_service_publication_rbndo(uuid);

CREATE OR REPLACE FUNCTION esz.restore_service_publication_rbndo(session_uid uuid)
 RETURNS TABLE(sessionid uuid, datecreate timestamp without time zone, processedservices bigint, processedrequests bigint, message text)
 LANGUAGE plpgsql
AS $function$
declare ts timestamp(0);
BEGIN
	ts := now();
  if exists (select distinct
        csh.session_id
      from cancel_service_history csh
      where csh.session_id = session_uid) then
	
    -- start transaction;


      update union_catalog_services ucs
			set service_status_id = csh.service_status_id,
          date_change = ts,
          need_reindex = 3
      FROM cancel_service_history csh
      where ucs.id = csh.union_catalog_services_id AND csh.session_id = session_uid;

      if exists (select distinct
            crh.session_id
          from cancel_request_history crh
          where crh.session_id = session_uid) then


        update request r
				set request_status_id = crh.request_status_id,
            request_decline_reason_id = crh.request_decline_reason_id,
            enrollment_decline_comment = crh.enrollment_decline_comment,
            date_change = ts,
            need_reindex = 3
        FROM cancel_request_history crh
        where r.id = crh.request_id AND crh.session_id = session_uid;

        update esz.esz_booking.booking b
				set b.volume = 1
        FROM cancel_request_history h
        where b.uid = h.booking_guid AND h.session_id = session_uid;

      end if;

--    commit;

		RETURN QUERY
    select
      h.session_id SessionId,
      h.date_create DateCreate,
      (select
          count(*)
        from cancel_service_history s
        where s.session_id = h.session_id
        and service_status_id != 1
        group by session_id,
                 date_create) ProcessedServices,
      (select
          count(*)
        from cancel_request_history r
        where r.session_id = h.session_id
        group by session_id,
                 date_create) ProcessedRequests,
      'Успешно' Message
    from cancel_service_history h
    where h.session_id = session_id
    group by h.session_id;

  else
		RETURN QUERY
    select
      session_uid SessionId,
      null::timestamp(0) DateCreate,
      null::bigint ProcessedServices,
      null::bigint ProcessedRequests,
      'Сессия не найдена' Message;

  end if;

end
$function$
;

COMMENT ON FUNCTION esz.restore_service_publication_rbndo(uuid) IS 'Процедура, выполняющая откат изменений, совершенных при снятии услуг с публикации для ограничения РБНДО';

-- DROP FUNCTION esz.rollback_joined_pupil(int4, int4);

CREATE OR REPLACE FUNCTION esz.rollback_joined_pupil(actual_pupil_id integer, joined_pupil_id integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
declare m_count int default null;
				error_message varchar(255);
BEGIN
-- <<main_block>>
  begin
    select
      count(id) into m_count
    from esz.pupil o
    where o.id = actual_pupil_id;
    if m_count = 0 then
       return 'Актуальный пользователь не найден';
      -- leave main_block;
    end if;
    select
      count(id) into m_count
    from esz.pupil o
    where o.id = joined_pupil_id;
    if m_count = 0 then
      return 'Перенесенный пользователь не найден';
      -- leave main_block;
    end if;

    update esz.request r
		set pupil_id = joined_pupil_id,
        date_change = now(),
        need_reindex = 1
    FROM esz.request_history h
    where r.id = h.request_id AND h.pupil_id = actual_pupil_id
			and h.old_pupil_id = joined_pupil_id;
			
    update esz.mega_relation m
		set pupil_id = joined_pupil_id,
        date_change = now()
    FROM esz.mega_relation_pupil_history h
    where m.id = h.mega_relation_id AND h.pupil_id = actual_pupil_id
			and h.old_pupil_id = joined_pupil_id;
			
    update esz.personal_address p
		set pupil_id = joined_pupil_id,
        date_change = now()
    FROM esz.personal_address_history h
    where p.id = h.personal_address_id AND h.pupil_id = actual_pupil_id
			and h.old_pupil_id = joined_pupil_id;
			
    update esz.pupil_personal_rel_add p
		set pupil_id = joined_pupil_id
    FROM esz.pupil_personal_rel_add_history h
    where p.personal_request_data_id = h.personal_request_data_id AND h.pupil_id = actual_pupil_id
			and h.old_pupil_id = joined_pupil_id;
			
    update esz.pupil
    set is_archive = FALSE,
        date_change = now(),
        need_reindex = 1
    where id = joined_pupil_id;
    update esz.pupil
    set need_reindex = 1
    where id = actual_pupil_id;
    insert into esz.logging (logging_type_id, date_time, description, success)
      values (22, now(), concat('Откат слияния записей ', actual_pupil_id, ' актуальной -> ', joined_pupil_id, ' присоединенной'), TRUE);
    insert into esz.logging (logging_type_id, date_time, description, success)
      values (22, now(), concat('Откат слияния записей ', actual_pupil_id, ' актуальной -> ', joined_pupil_id, ' присоединенной'), TRUE);
  end;
  return 'Откат произведен успешно';
-- end main_block;
end
$function$
;

-- DROP FUNCTION esz.sp_clear_queue(timestamp);

CREATE OR REPLACE FUNCTION esz.sp_clear_queue(p_last_day timestamp without time zone)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
declare -- m_loop_done int default 0;
	m_deleted_all int default 0;
	m_deleted_rows int default 0;
	DECLARE cnt  Int;
	-- continue handler for not found set m_loop_done = 1;
BEGIN
  if p_last_day is null then
    p_last_day = now() - INTERVAL '62 day'; -- date_add(now(), interval -62 day);
  end if;

-- delete_loop:
  loop

    delete
      from queue
		where id in (SELECT id 
								 from queue 
								 where create_date <= p_last_day 
								 limit 1000);
    GET DIAGNOSTICS cnt = ROW_COUNT;
    m_deleted_rows := cnt;

    m_deleted_all := m_deleted_all + m_deleted_rows;

    if m_deleted_rows < 1 then
			EXIT; 
      -- leave delete_loop;
    end if;

  end loop;
  return concat('Deleted ', m_deleted_all, ' rows. All done.');
end
$function$
;

-- DROP FUNCTION esz.sp_create_vedomstvo(varchar, varchar, varchar, int4, text, int4);

CREATE OR REPLACE FUNCTION esz.sp_create_vedomstvo(p_full_name character varying, p_short_name character varying, p_role_name character varying, p_sample_role_id integer, p_org_types text, p_sample_classificator_vedomstvo_id integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
declare a_need_rollback int default 0;
	a_res_int int default 0;
	a_res_string varchar(1000);
	a_vedomstvo_id int default null;
	a_role_id int default null;
	a_types_count int default 0;
	error_message varchar(255);
	-- exit handler for sqlexception
BEGIN

  /*
  begin
    get diagnostics condition 1 @sqlstate = returned_sqlstate, @errno = mysql_errno, @text = message_text;
    rollback;
    error_message := concat('error ', @errno, ' (', @sqlstate, '): ', @text);
    RETURN error_message;
  end;
	*/

  p_full_name := trim(p_full_name);
  p_short_name := trim(p_short_name);
  p_role_name := trim(p_role_name);

<<main_block>>
 begin

    if (p_full_name is null)
      or (p_full_name = '')
      or (p_short_name is null)
      or (p_short_name = '')
      or (p_role_name is null)
      or (p_role_name = '')
      or (p_sample_role_id is null)
      or (p_sample_classificator_vedomstvo_id is null) then

      error_message := 'Указаны не все входные параметры';
      -- leave main_block;
			EXIT main_block;
    end if;


    select
      count(*) into a_res_int
    from esz.vedomstvo v
    where lower(v.ex_body_full_name) = lower(p_full_name)
    or lower(v.ex_body_short_name) = lower(p_short_name);
    if (a_res_int > 0) then
      error_message := concat('Департамент с названием ', p_full_name, ' (', p_short_name, ') уже присутствует в базе данных');
      -- leave main_block;
			EXIT main_block;
    end if;


    select
      count(*) into a_res_int
    from esz_users.role
    where lower(name) = lower(p_role_name);
    if (a_res_int > 0) then
      error_message := concat('Роль с названием ', p_role_name, ', уже присутствует в базе данных');
      -- leave main_block;
			EXIT main_block;
    end if;


    select
      count(*) into a_res_int
    from esz_users.role
    where id = p_sample_role_id;
    if (a_res_int = 0) then
      error_message := concat('Роль с кодом ', p_sample_role_id::char, ', с которой должны копироваться права, не найдена в базе данных');
      -- leave main_block;
			EXIT main_block;
    end if;


    select
      count(*) into a_res_int
    from esz.vedomstvo v
    where v.id = p_sample_classificator_vedomstvo_id;
    if (a_res_int = 0) then
      error_message := concat('Департамент с кодом ', p_sample_classificator_vedomstvo_id::char, ', с которого должен копироваться справочник РБНДО, не найден в базе данных');
      -- leave main_block;
			EXIT main_block;
    end if;


    -- start transaction;
      a_need_rollback := 1;


      insert into esz.vedomstvo (ex_body_code, ex_body_full_name, ex_body_short_name, date_create, date_change, entity_id, is_archive, external_uid, external_system_id)
        values (null, p_full_name, p_short_name, now(), now(), null, FALSE, null, null);

      select
        v.id into a_vedomstvo_id
      from esz.vedomstvo v
      where v.ex_body_full_name = p_full_name
      and v.ex_body_short_name = p_short_name;
      if (a_vedomstvo_id is null) then
        error_message := concat('Ошибка добавления департамента ', p_full_name, ' (', p_short_name, ')');
        -- leave main_block;
				EXIT main_block;
      end if;

      update esz.vedomstvo
      set ex_body_code = a_vedomstvo_id::char
      where id = a_vedomstvo_id;


      insert into esz_users.role (name, date_create, date_change, is_archive)
        values (p_role_name, now(), now(), FALSE);
      select
        r.id into a_role_id
      from esz_users.role r
      where r.name = p_role_name;

      if (a_role_id is null) then
        error_message := concat('Ошибка добавления роли ', p_role_name);
        -- leave main_block;
				EXIT main_block;
      end if;


      insert into esz_users.user_access (role_id, access_object_id, access_action_id, general_access_id, date_create, date_change, is_archive)
        select
          a_role_id,
          ua.access_object_id,
          ua.access_action_id,
          ua.general_access_id,
          now(),
          now(),
          ua.is_archive
        from esz_users.user_access ua
        where ua.role_id = p_sample_role_id
        and ua.is_archive = FALSE;



      insert into esz.classificator_eku (general_classificator_eku_id, vedomstvo_id, parent_id, code, name, description, rule_service, alt_start, alt_end,
      test_service, tours_number, date_create, date_change, entity_id, is_archive, external_uid, external_system_id, classificator_status_id)
        select
          c.general_classificator_eku_id,
          a_vedomstvo_id,
          c.parent_id,
          null,
          c.name,
          c.description,
          c.rule_service,
          c.alt_start,
          c.alt_end,
          c.test_service,
          c.tours_number,
          now(),
          now(),
          c.entity_id,
          FALSE,
          null,
          null,
          c.classificator_status_id
        from esz.classificator_eku c
        where c.vedomstvo_id = p_sample_classificator_vedomstvo_id
        and c.is_archive = FALSE;

      update esz.classificator_eku c
      set parent_id = c1.id
			FROM esz.classificator_eku c1
      where c.vedomstvo_id = a_vedomstvo_id
				and c.parent_id::varchar = c1.entity_id
				and c.vedomstvo_id = c1.vedomstvo_id;

      -- update esz.classificator_eku c set c.extend_entity_id=null where c.vedomstvo_id=a_vedomstvo_id;

      if ((p_org_types is null)
        or (trim(p_org_types) = '')) then
        p_org_types := 'Учреждение';
      end if;

      select div((char_length(p_org_types) - char_length(replace(p_org_types, '$', ''))), char_length('$')) + 1 into a_types_count;

      while (a_types_count > 0) LOOP
        if (a_types_count = 1) then
          select substring_index(p_org_types, '$', 1) into a_res_string;
        else
          select
            substring(substring_index(p_org_types, '$', a_types_count), char_length(substring_index(p_org_types, '$', a_types_count - 1)) + 2) into a_res_string;
        end if;
        a_res_string := trim(a_res_string);
        if (trim(a_res_string) <> '') then

          select
            count(*) into a_res_int
          from esz.types_providing_services t
          where lower(t.name) = lower(a_res_string)
						and t.vedomstvo_id = a_vedomstvo_id;

          if (a_res_int = 0) then
            insert into esz.types_providing_services (name, date_create, date_change, is_archive, vedomstvo_id)
              values (a_res_string, now(), now(), FALSE, a_vedomstvo_id);
          end if;
        end if;
        a_types_count = a_types_count - 1;
      end LOOP;

		-- raise notice 'commit';
    -- commit;
    a_need_rollback := 0;
    error_message := 'ok';
end main_block;

  if (a_need_rollback = 1) then
    rollback;
  end if;

  RETURN error_message;

end
$function$
;

-- DROP FUNCTION esz.sp_depersonalize_database();

CREATE OR REPLACE FUNCTION esz.sp_depersonalize_database()
 RETURNS text
 LANGUAGE plpgsql
AS $function$
declare m_updated_count int;
	-- m_loop_done bool default false;
	m_value_id int default null;
	m_last_name text;
	m_first_name text;
	m_middle_name text;
	m_full_name text;
	m_cell_phone text;
	m_home_phone text;
	m_doc_series text;
	m_doc_number text;
	m_birth_date timestamp(0);
	m_alphabet varchar(33) default 'АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ';
	m_alphabet_length int default 33;

	m_done text;
	pupil_cursor cursor for
  select
    p.id,
    p.last_name,
    p.middle_name,
    p.cell_phone,
    p.home_phone,
    -- p.doc_series,
    -- p.doc_number,
    p.birth_date
  from esz.pupil p
  order by p.id ;
	pupil_document_cursor cursor for
  select
    pd.id,
    pd.doc_series,
    pd.doc_number
  from esz.pupil_document pd
  order by pd.id ;
  personal_request_data_cursor cursor for
  select
    p.id,
    p.last_name,
    p.middle_name,
    p.home_phone,
    p.series,
    p.number,
    p.date_of_birth
  from esz.personal_request_data p
  order by p.id ;
  person_cursor cursor for
  select
    p.id,
    p.last_name,
    p.middle_name,
    p.phone,
    p.birth_date
  from esz.person p ;
  user_cursor cursor for
  select
    u.id,
    esz.substring_index(u.name, ' ', 1) as last_name,
    esz.substring_index(esz.substring_index(u.name, ' ', 2), ' ', -1) as first_name,
    esz.substring_index(u.name, ' ', -1) as middle_name,
    u.name,
    u.phone
  from esz_users.user u ;
  contingent_cursor cursor for
  select
    c.id,
    c.last_name,
    c.middle_name,
    c.birth_date
  from esz_contingent.contingent c ;
  contingent_document_cursor cursor for
  select
    c.id,
    c.series,
    c.number
  from esz_contingent.contingent_document c  ;
BEGIN
  
  
  -- declare continue handler for not found set m_loop_done = true;

  m_done := '';


  -- m_loop_done = false;
  m_updated_count := 0;
  open pupil_cursor;
<<read_loop_pupil>>
  loop
    fetch pupil_cursor into m_value_id, m_last_name, m_middle_name, m_cell_phone, m_home_phone, m_birth_date;
    if NOT FOUND then
			EXIT read_loop_pupil;
      -- leave read_loop_pupil;
    end if;
    update esz.pupil
    set last_name = fn_depersonalize_name(m_last_name),
        middle_name = fn_depersonalize_name(m_middle_name),
        cell_phone = fn_depersonalize_numbers(m_cell_phone),
        home_phone = fn_depersonalize_numbers(m_home_phone),
        -- doc_series = fn_depersonalize_numbers(m_doc_series),
        -- doc_number = fn_depersonalize_numbers(m_doc_number),
        birth_date = fn_depersonalize_date(m_birth_date),
        email = 'local@localhost.local',
        need_reindex = 1
    where id = m_value_id;
    m_updated_count := m_updated_count + 1;
  end loop read_loop_pupil;
  close pupil_cursor;
  m_done := concat(m_done, 'Pupils : ', m_updated_count, '
');


  m_updated_count := 0;
  open pupil_document_cursor;
<<read_loop_pupil_document>>
  loop
    fetch pupil_document_cursor into m_value_id, m_doc_series, m_doc_number;
    if NOT FOUND then
			EXIT read_loop_pupil_document;
    end if;
    update esz.pupil_document
    set doc_series = fn_depersonalize_numbers(m_doc_series),
        doc_number = fn_depersonalize_numbers(m_doc_number)
    where id = m_value_id;
    m_updated_count := m_updated_count + 1;
  end loop read_loop_pupil_document;
  close pupil_document_cursor;
  m_done := concat(m_done, 'Pupil document : ', m_updated_count, '
');

  -- set m_loop_done = false;
  m_updated_count := 0;
  open personal_request_data_cursor;
<<read_loop_personal_request_data>>
  loop
    fetch personal_request_data_cursor into m_value_id, m_last_name, m_middle_name, m_home_phone, m_doc_series, m_doc_number, m_birth_date;
    if NOT FOUND then
			EXIT read_loop_personal_request_data;
      -- leave read_loop_personal_request_data;
    end if;
    update esz.personal_request_data
    set last_name = fn_depersonalize_name(m_last_name),
        middle_name = fn_depersonalize_name(m_middle_name),
        home_phone = fn_depersonalize_numbers(m_home_phone),
        series = fn_depersonalize_numbers(m_doc_series),
        number = fn_depersonalize_numbers(m_doc_number),
        email = 'local@localhost.local',
        date_of_birth = fn_depersonalize_date(m_birth_date)
    where id = m_value_id;
    m_updated_count := m_updated_count + 1;
  end loop read_loop_personal_request_data;
  close personal_request_data_cursor;
  m_done := concat(m_done, 'Personal request data : ', m_updated_count, '
');


  --set m_loop_done = false;
  m_updated_count := 0;
  open person_cursor;
<<read_loop_person>>
  loop
    fetch person_cursor into m_value_id, m_last_name, m_middle_name, m_home_phone, m_birth_date;
    if NOT FOUND then
			EXIT read_loop_person;
      --leave read_loop_person;
    end if;
    update esz.person
    set last_name = fn_depersonalize_name(m_last_name),
        middle_name = fn_depersonalize_name(m_middle_name),
        phone = fn_depersonalize_numbers(m_home_phone),
        email = 'local@localhost.local',
        birth_date = fn_depersonalize_date(m_birth_date)
    where id = m_value_id;
    m_updated_count := m_updated_count + 1;
  end loop read_loop_person;
  close person_cursor;
  m_done := concat(m_done, 'Persons : ', m_updated_count, '
');


  -- set m_loop_done = false;
  m_updated_count := 0;
  open user_cursor;
<<read_loop_user>>
  loop
    fetch user_cursor into m_value_id, m_last_name, m_first_name, m_middle_name, m_full_name, m_home_phone;
    if NOT FOUND then
			EXIT read_loop_user;
      -- leave read_loop_user;
    end if;
    m_last_name := fn_depersonalize_name(m_last_name);
    m_middle_name := fn_depersonalize_name(m_middle_name);
    if ((m_last_name is not null)
      or (m_first_name is not null)
      or (m_middle_name is not null)) then
      m_full_name := concat_ws(' ', m_last_name, m_first_name, m_middle_name);
    end if;
    update esz_users.user
    set name = m_full_name,
        phone = fn_depersonalize_numbers(m_home_phone),
        email = 'local@localhost.local'
    where id = m_value_id;

    update esz.user
    set name = m_full_name
    where id = m_value_id;

    m_updated_count := m_updated_count + 1;
  end loop read_loop_user;
  close user_cursor;
  m_done := concat(m_done, 'Persons : ', m_updated_count, '
');


  -- m_loop_done := false;
  m_updated_count := 0;
  open contingent_cursor;
<<read_loop_contingent>>
  loop
    fetch contingent_cursor into m_value_id, m_last_name, m_middle_name, m_birth_date;
    if NOT FOUND then
			EXIT read_loop_contingent;
      -- leave read_loop_contingent;
    end if;
    update esz_contingent.contingent
    set last_name = fn_depersonalize_name(m_last_name),
        middle_name = fn_depersonalize_name(m_middle_name),
        birth_date = fn_depersonalize_date(m_birth_date)
    where id = m_value_id;
    m_updated_count := m_updated_count + 1;
  end loop read_loop_contingent;
  close contingent_cursor;
  m_done := concat(m_done, 'Contingent pupils : ', m_updated_count, '
');


  -- set m_loop_done = false;
  m_updated_count := 0;
  open contingent_document_cursor;
<<read_loop_contingent_document>>
  loop
    fetch contingent_document_cursor into m_value_id, m_doc_series, m_doc_number;
    if NOT FOUND then
			EXIT read_loop_contingent_document;
      -- leave read_loop_contingent_document;
    end if;
    update esz_contingent.contingent_document
    set series = fn_depersonalize_numbers(m_doc_series),
        number = fn_depersonalize_numbers(m_doc_number)
    where id = m_value_id;
    m_updated_count := m_updated_count + 1;
  end loop read_loop_contingent_document;
  close contingent_document_cursor;
  m_done := concat(m_done, 'Contingent documents : ', m_updated_count, '
');

  return m_done;

end
$function$
;

-- DROP PROCEDURE esz.sp_disable_irs_bans();

CREATE OR REPLACE PROCEDURE esz.sp_disable_irs_bans()
 LANGUAGE plpgsql
AS $procedure$
BEGIN
  update esz.system_property
  set value_text = '{"ApplicantPassport":false,"PupilBirthCertificate":false,"RegistrationAddress":false,"PupilPassport":false,"Relatedness":false, "BirthRecord":false}'
  where name = 'IrsBanOptions';
  update iteco.shedule_execute_status
  set execution_date = now()
  where code = 'sp_disable_irs_bans';
end
$procedure$
;

-- DROP PROCEDURE esz.sp_send_completion_doc_to_portfolio();

CREATE OR REPLACE PROCEDURE esz.sp_send_completion_doc_to_portfolio()
 LANGUAGE plpgsql
AS $procedure$
declare date_end timestamp(0);
				date_start timestamp(0);
BEGIN

  drop table if exists iteco.tmp_completion_doc_to_portfolio;

  create table iteco.tmp_completion_doc_to_portfolio (
    id int4 primary key,
    extend_entity_guid uuid not null
  );


  date_end := CURRENT_DATE;
  date_start := (date_end - interval '1' day);


  insert into iteco.tmp_completion_doc_to_portfolio (id, extend_entity_guid)
    select distinct
      pcd.id,
      gen_random_uuid()
    from esz.pupil_completion_document pcd
      join esz.pupil p
        on p.id = pcd.pupil_id
      left join esz.queue q
        on q.entity_id = pcd.id
        and q.sent_date is null
    where pcd.document_type_id = 8
			and p.contingent_guid is not null
			and pcd.is_archive = FALSE
			and q.id is null
			and ((pcd.date_create >= date_start
				and pcd.date_create < date_end)
				or (pcd.date_change >= date_start
				and pcd.date_change < date_end));


  insert into esz.queue (queue_type_id, entity_id, create_date, extend_entity_guid)
    select
      1600,
      id,
      now(),
      extend_entity_guid
    from iteco.tmp_completion_doc_to_portfolio;

end
$procedure$
;

-- DROP PROCEDURE esz.sp_send_subsciptions(int4);

CREATE OR REPLACE PROCEDURE esz.sp_send_subsciptions(IN max_svc_cnt integer)
 LANGUAGE plpgsql
AS $procedure$
declare max_subscr_cnt int4 default max_svc_cnt * 10;
BEGIN
  drop table if exists iteco.subscripted_ucs;

  create table iteco.subscripted_ucs (
    id SERIAL primary key,
    ucs_id int4
    --key ind_ucs_id (ucs_id)
  );
	CREATE INDEX ind_ucs_id ON iteco.subscripted_ucs USING btree (ucs_id);
	
	COMMIT;
	
  insert into iteco.subscripted_ucs (ucs_id)
    select distinct
      ucs.id
    from esz.union_catalog_services ucs
      inner join esz.training_group g
        on ucs.id = g.union_catalog_services_id
      inner join esz.schedule_of_timetable t
        on t.training_group_id = g.id
      inner join esz.subscription sb
        on sb.union_catalog_services_id = ucs.id
      inner join esz.service_stage ss
        on g.service_stage_id = ss.id
      inner join esz.esz_booking.slot sl
        on g.id = sl.training_group_id
    where g.is_archive = FALSE
			and t.is_archive = FALSE
			and sb.is_archive = FALSE
			and t.training_group_status_id = 2
			and ucs.is_archive = FALSE
			and ss.is_archive = FALSE
			and ucs.service_status_id = 2
			and t.request_start < now()
			and (t.request_end is null
				or t.request_end > now())
			and (sl.volume = 0
				or sl.volume is null
				or sl.volume > sl.volume_used
				or sl.volume_used is null)
    limit max_svc_cnt;

  -- start transaction;

    insert into esz.queue (queue_type_id, entity_id, email, create_date)
      select
        101,
        sb.union_catalog_services_id,
        sb.email,
        now()
      from iteco.subscripted_ucs su
        inner join esz.subscription sb
          on su.ucs_id = sb.union_catalog_services_id
      where sb.is_archive = FALSE 
			limit max_subscr_cnt;

    update esz.subscription
    set is_archive = TRUE,
        date_change = now()
    where is_archive = FALSE
			and union_catalog_services_id in (select ucs_id
																				from iteco.subscripted_ucs);
  commit;

end
$procedure$
;

-- DROP PROCEDURE esz.sp_set_need_reindex(bool, bool, bool, bool, bool, int4);

CREATE OR REPLACE PROCEDURE esz.sp_set_need_reindex(IN set_request boolean, IN set_pupil boolean, IN set_services boolean, IN set_service_classes boolean, IN set_address boolean, IN set_only_base_value integer)
 LANGUAGE plpgsql
AS $procedure$
declare m_max_id int default null;
declare m_loop_count int default null;
declare m_done varchar(1000) default '';
declare m_value integer default 3;
declare m_step integer default 100000; -- получено эмпирическим путем, не дольше минуты
begin
  if set_only_base_value = 1 then
    m_value = 1;
  end if;
  if set_only_base_value = 2 then
    m_value = 2;
  end if;
  --
  if set_request = true then
    select max(id) into m_max_id from esz.request;
    m_loop_count = m_max_id + 1;
    m_loop_count = m_loop_count + (m_step - m_loop_count % m_step);
    while m_loop_count > 0 loop
      update request set need_reindex = need_reindex | m_value
      where is_archive = false and id >= case when m_loop_count < m_step then 0 else m_loop_count - m_step end
        and id < m_loop_count;
      --
      commit; -- после каждого шага, чтобы не держать сегмент для других изменений
      --
      m_loop_count = m_loop_count - m_step;
    end loop;
    m_done = concat('requests : ', cast(m_max_id as char(20)), ';');
  end if;
  --
  if set_pupil = true then
    select max(id) into m_max_id from esz.pupil;
    m_loop_count = m_max_id + 1;
    m_loop_count = m_loop_count + (m_step - m_loop_count % m_step);
    while m_loop_count > 0 loop
      update pupil set need_reindex = need_reindex | m_value
      where is_archive = false
        and id >= case when m_loop_count < m_step then 0 else m_loop_count - m_step end
        and id < m_loop_count;
      --
      commit; -- после каждого шага, чтобы не держать сегмент для других изменений
      --
      m_loop_count = m_loop_count - m_step;
    end loop;
    m_done = concat(m_done, 'pupil : ',cast(m_max_id as char(20)), ';');
  end if;
  --
  if set_services = true then
    select max(id) into m_max_id from esz.union_catalog_services;
    m_loop_count = m_max_id + 1;
    m_loop_count = m_loop_count + (m_step - m_loop_count % m_step);
    while m_loop_count > 0 loop
      update union_catalog_services set need_reindex = need_reindex | m_value
      where is_archive = false
        and id >= case when m_loop_count < m_step then 0 else m_loop_count - m_step end
        and id < m_loop_count;
      --
      commit; -- после каждого шага, чтобы не держать сегмент для других изменений
      --
      m_loop_count = m_loop_count - m_step;
    end loop;
    m_done = concat(m_done, 'services : ',cast(m_max_id as char(20)), ';');
  end if;
  --
  if set_service_classes = true then
    select max(id) into m_max_id from esz.service_class;
    m_loop_count = m_max_id + 1;
    m_loop_count = m_loop_count + (m_step - m_loop_count % m_step);
    while m_loop_count > 0 loop
      update service_class set need_reindex = need_reindex | m_value where is_archive = false and id >= case when m_loop_count < m_step then 0 else m_loop_count - m_step end and id < m_loop_count;
      --
      commit; -- после каждого шага, чтобы не держать сегмент для других изменений
      --
      m_loop_count = m_loop_count - m_step;
    end loop;
    m_done = concat(m_done, 'service_classes : ',cast(m_max_id as char(20)), ';');
  end if;
  --
  if set_address = true then
    select max(id) into m_max_id from esz.address;
    m_loop_count = m_max_id + 1;
    m_loop_count = m_loop_count + (m_step - m_loop_count % m_step);
    while m_loop_count > 0 loop
      update address set need_reindex = need_reindex | m_value where is_archive = false and id >= case when m_loop_count < m_step then 0 else m_loop_count - m_step end and id < m_loop_count;
      --
      commit; -- после каждого шага, чтобы не держать сегмент для других изменений
      --
      m_loop_count = m_loop_count - m_step;
    end loop;
    m_done = concat(m_done, 'addresses : ',cast(m_max_id as char(20)), ';');
  end if;
  --
  raise notice 'updated % all done!', m_done;
end
$procedure$
;

-- DROP PROCEDURE esz.sp_update_irs_bans();

CREATE OR REPLACE PROCEDURE esz.sp_update_irs_bans()
 LANGUAGE plpgsql
AS $procedure$
declare m_birth_cert_requests_count int;
				m_relatedness_requests_count int;
				m_irs_ban_check varchar(100);
				m_passport_requests_count int;
				m_birth_record_requests_count int;
				m_address_requests_count int;
BEGIN
  SELECT 
	CASE WHEN sp.value_text::json->>'PupilBirthCertificate'='false' THEN 
	(SELECT COUNT(*) FROM esz.external_system_response esr WHERE esr.response_status_id IN (83, 84, 85, 86) AND esr.date_create >= current_date) 
	ELSE 0 END 
	INTO m_birth_cert_requests_count
	from esz.system_property sp where sp.name = 'IrsBanOptions' limit 1;
	
	SELECT 
	CASE WHEN sp.value_text::json->>'Relatedness'='false' THEN 
	(SELECT COUNT(*) FROM esz.external_system_response esr WHERE esr.response_status_id IN (108, 109, 110, 111) AND esr.date_create >= current_date) 
	ELSE 0 END 
	INTO m_relatedness_requests_count
	from esz.system_property sp where sp.name = 'IrsBanOptions' limit 1;
	 
	SELECT 
	CASE WHEN sp.value_text::json->>'ApplicantPassport'='false' OR sp.value_text::json->>'PupilPassport'='false' THEN 
	(SELECT COUNT(*) FROM esz.external_system_response esr WHERE esr.response_status_id IN (89, 90, 91, 92, 95, 96, 97, 98) AND esr.date_create >= current_date) 
	ELSE 0 END 
	INTO m_passport_requests_count
	from esz.system_property sp where sp.name = 'IrsBanOptions' limit 1;
	
	SELECT 
	CASE WHEN sp.value_text::json->>'BirthRecord'='false' THEN 
	(SELECT COUNT(*) FROM esz.external_system_response esr WHERE esr.response_status_id IN (120, 121, 122, 123) AND esr.date_create >= current_date) 
	ELSE 0 END 
	INTO m_birth_record_requests_count
	from esz.system_property sp where sp.name = 'IrsBanOptions' limit 1;
	
	SELECT 
	CASE WHEN sp.value_text::json->>'RegistrationAddress'='false' THEN 
	(SELECT COUNT(*) FROM esz.external_system_response esr WHERE esr.response_status_id IN (102, 103, 104, 105) AND esr.date_create >= current_date) 
	ELSE 0 END 
	INTO m_address_requests_count
	from esz.system_property sp where sp.name = 'IrsBanOptions' limit 1;

    UPDATE esz.system_property
        SET value_text = CONCAT(
          '{"ApplicantPassport":', CASE WHEN m_passport_requests_count > 17500 THEN 'true' ELSE value_text::json->>'ApplicantPassport' END,
          ',"PupilBirthCertificate":', CASE WHEN m_birth_cert_requests_count > 5000 THEN 'true' ELSE value_text::json->>'PupilBirthCertificate' END,
          ',"RegistrationAddress":', CASE WHEN m_address_requests_count > 5000 THEN 'true' ELSE value_text::json->>'RegistrationAddress' END,
          ',"PupilPassport":', CASE WHEN m_passport_requests_count > 17500 THEN 'true' ELSE value_text::json->>'PupilPassport' END,
          ',"Relatedness":', CASE WHEN m_relatedness_requests_count > 5000 THEN 'true' ELSE value_text::json->>'Relatedness' END,
          ',"BirthRecord":', CASE WHEN m_birth_record_requests_count > 5000 THEN 'true' ELSE value_text::json->>'BirthRecord' END,
          '}')
        WHERE name = 'IrsBanOptions';

update iteco.shedule_execute_status
  set execution_date = now()
  where code = 'sp_update_irs_bans';
end
$procedure$
;

-- DROP FUNCTION esz.substring_index(in text, in text, in int4, out text);

CREATE OR REPLACE FUNCTION esz.substring_index(str text, delim text, count integer DEFAULT 1, OUT substring_index text)
 RETURNS text
 LANGUAGE plpgsql
 IMMUTABLE COST 5
AS $function$
BEGIN
  IF count > 0 THEN
    substring_index = array_to_string((string_to_array(str, delim))[:count], delim);
  ELSE
    DECLARE
      _array TEXT[];
    BEGIN
      _array = string_to_array(str, delim);
      substring_index = array_to_string(_array[array_length(_array, 1) + count + 1:], delim);    
    END;  
  END IF;
END;
$function$
;

-- DROP PROCEDURE esz.update_monitoring_mosru();

CREATE OR REPLACE PROCEDURE esz.update_monitoring_mosru()
 LANGUAGE plpgsql
AS $procedure$
BEGIN
  insert into monitoring_mosru (num_org, num_ucs, num_sc, sum_pupil, sum_free, num_ad, fullad, date_create)
    select distinct
      b.num_org, -- "Количество организаций",
      b.num_ucs, -- "Количество услуг",
      b.num_sc, -- "Количество групп",
      b.sum_pupil, -- "Количество зачисленных",
      b.sum_free, -- "Количество мест",
      b.num_ad, -- "Количество записей без адресов предоставления услуг",
      a.fullad, -- "Адреса без района и/или округа",
      now()
    from (select distinct coalesce(d3.short_address, d3.full_address) as fullad
					from esz.address d3
						inner join esz.place_service ps1 on ps1.address_id = d3.id
						inner join esz.union_catalog_to_place_service_rel toplace1 on toplace1.place_service_id = ps1.id
						inner join esz.union_catalog_services ucs1 on ucs1.id = toplace1.union_catalog_services_id
						inner join esz.classificator_eku eku3 on ucs1.classificator_eku_id = eku3.id
							and (eku3.is_archive is null or eku3.is_archive = FALSE)
							and eku3.education_type_id = 4
						inner join esz.service_class_rel sr1 on ucs1.id = sr1.union_catalog_services_id
						inner join esz.service_class sc1 on sc1.id = sr1.service_class_id
					where d3.territory_entity_id is null
				 ) as a
			cross join (select
										count(distinct org.id) as num_org,
										count(distinct ucs.id) as num_ucs,
										count(distinct a.id) as num_sc,
										sum(a.pupil) as sum_pupil,
										sum(a.place_free) as sum_free,
										count(distinct case when ps.address_id is null then ucs.id end) as num_ad
									from esz.union_catalog_services ucs
										inner join esz.organization org on org.id = ucs.organization_id
										left join esz.union_catalog_to_place_service_rel toplace on toplace.union_catalog_services_id = ucs.id
										left join esz.place_service ps on ps.id = toplace.place_service_id
										left join esz.address d on d.id = ps.address_id
										inner join esz.vedomstvo v on v.id = org.vedomstvo_id
										left join esz.organization o on o.id = ucs.css_organization_id
										inner join esz.classificator_eku eku on ucs.classificator_eku_id = eku.id
											and (eku.is_archive is null or eku.is_archive = FALSE)
										left join esz.classificator_eku eku1 on eku.parent_id = eku1.id
											and (eku1.is_archive is null or eku1.is_archive = FALSE)
										left join esz.classificator_eku eku2 on eku1.parent_id = eku2.id
											and (eku2.is_archive is null or eku2.is_archive = FALSE)
										inner join (select distinct
																	ucs.id as ucs_id,
																	sc.id as id,
																	sc.code as code_,
																	sc.name as name_,
																	sc.capacity as place_free,
																	ucs.service_status_id as stat,
																	count(mr.pupil_id) as pupil
																from esz.service_class sc
																	left join (select mr.*
																						 from esz.mega_relation mr
																								inner join esz.request_ad rad on rad.request_id = mr.request_id
																									and rad.css_organization_id not in (88623, 89485, 88618)
																								inner join request r on r.id = rad.request_id
																									and (r.is_archive is null or r.is_archive = FALSE)
																						 where mr.next_mega_relation_id is null
																								and mr.mega_relation_status_id <> 3
																								and (mr.is_archive is null or mr.is_archive = FALSE)
																								and mr.date_end is null
																						) as mr on mr.service_class_id = sc.id
																	inner join esz.service_class_rel sr on sr.service_class_id = sc.id
																	inner join esz.union_catalog_services ucs on ucs.id = sr.union_catalog_services_id
																	inner join esz.classificator_eku eku on ucs.classificator_eku_id = eku.id
																		and (eku.is_archive is null or eku.is_archive = FALSE)
																		and eku.education_type_id = 4
																where (sc.is_archive is null or sc.is_archive = FALSE)
																	and sc.service_class_status_id <> 3
																group by ucs.id,
																				 sc.id,
																				 sc.code,
																				 sc.name,
																				 sc.capacity,
																				 ucs.service_status_id
															 ) as a on a.ucs_id = ucs.id
									where eku.education_type_id = 4
										and (a.stat = 2 or (a.stat = 1 and a.pupil is not null and a.pupil > 0))
										and ucs.name not in ('Тестовая услуга 1', 'Тест')
										and (ucs.is_archive is null or ucs.is_archive = FALSE)
										and org.short_name not in ('Тест ДПиООС', 'Тестовый ТЦСО (ДИТовский)')
										and o.short_name != 'ГБУ ТЦСО "Тестовый"'
									) as b;

end
$procedure$
;

-- DROP FUNCTION esz.verify_heapam(in regclass, in bool, in bool, in text, in int8, in int8, out int8, out int4, out int4, out text);

CREATE OR REPLACE FUNCTION esz.verify_heapam(relation regclass, on_error_stop boolean DEFAULT false, check_toast boolean DEFAULT false, skip text DEFAULT 'none'::text, startblock bigint DEFAULT NULL::bigint, endblock bigint DEFAULT NULL::bigint, OUT blkno bigint, OUT offnum integer, OUT attnum integer, OUT msg text)
 RETURNS SETOF record
 LANGUAGE c
AS '$libdir/amcheck', $function$verify_heapam$function$
;